
HOLA23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080089e8  080089e8  000189e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009028  08009028  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009028  08009028  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009028  08009028  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000129c  20000070  080090a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  080090a0  0002130c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001764d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c6  00000000  00000000  000376ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003adb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e574  00000000  00000000  0003d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9d4  00000000  00000000  0005b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af1d0  00000000  00000000  00078288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127458  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000585c  00000000  00000000  001274a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089cc 	.word	0x080089cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080089cc 	.word	0x080089cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000c1e:	f002 f815 	bl	8002c4c <HAL_ADC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000c28:	f001 fc33 	bl	8002492 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_ADC1_Init+0xb4>)
 8000c4a:	f002 f985 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c54:	f001 fc1d 	bl	8002492 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000008c 	.word	0x2000008c

08000c64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c84:	d14c      	bne.n	8000d20 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_ADC_MspInit+0xc4>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <HAL_ADC_MspInit+0xc4>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <HAL_ADC_MspInit+0xc4>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_ADC_MspInit+0xc4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <HAL_ADC_MspInit+0xc4>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_ADC_MspInit+0xc4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f003 f83a 	bl	8003d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_ADC_MspInit+0xcc>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cf6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000d06:	f002 fe86 	bl	8003a16 <HAL_DMA_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000d10:	f001 fbbf 	bl	8002492 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_ADC_MspInit+0xc8>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	200000dc 	.word	0x200000dc
 8000d30:	40020008 	.word	0x40020008

08000d34 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_DAC_Init+0x4c>)
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_DAC_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_DAC_Init+0x4c>)
 8000d4c:	f002 fd31 	bl	80037b2 <HAL_DAC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000d56:	f001 fb9c 	bl	8002492 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d5a:	2324      	movs	r3, #36	; 0x24
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_DAC_Init+0x4c>)
 8000d6a:	f002 fdd1 	bl	8003910 <HAL_DAC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000d74:	f001 fb8d 	bl	8002492 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000120 	.word	0x20000120
 8000d84:	40007400 	.word	0x40007400

08000d88 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <HAL_DAC_MspInit+0xd0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d152      	bne.n	8000e50 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_DAC_MspInit+0xd4>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <HAL_DAC_MspInit+0xd4>)
 8000db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_DAC_MspInit+0xd4>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_DAC_MspInit+0xd4>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <HAL_DAC_MspInit+0xd4>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_DAC_MspInit+0xd4>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f002 ffa8 	bl	8003d44 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000df6:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <HAL_DAC_MspInit+0xdc>)
 8000df8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e12:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e1e:	2220      	movs	r2, #32
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e2a:	f002 fdf4 	bl	8003a16 <HAL_DMA_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000e34:	f001 fb2d 	bl	8002492 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_DAC_MspInit+0xe0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_DAC_MspInit+0xe0>)
 8000e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e42:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <HAL_DAC_MspInit+0xd8>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40007400 	.word	0x40007400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	20000134 	.word	0x20000134
 8000e64:	40020030 	.word	0x40020030
 8000e68:	40010000 	.word	0x40010000

08000e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_DMA_Init+0x48>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_DMA_Init+0x48>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_DMA_Init+0x48>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	200b      	movs	r0, #11
 8000e90:	f002 fc59 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e94:	200b      	movs	r0, #11
 8000e96:	f002 fc72 	bl	800377e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200d      	movs	r0, #13
 8000ea0:	f002 fc51 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ea4:	200d      	movs	r0, #13
 8000ea6:	f002 fc6a 	bl	800377e <HAL_NVIC_EnableIRQ>

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a3c      	ldr	r2, [pc, #240]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f240 1161 	movw	r1, #353	; 0x161
 8000f34:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0x110>)
 8000f36:	f003 f88f 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f40:	4822      	ldr	r0, [pc, #136]	; (8000fcc <MX_GPIO_Init+0x114>)
 8000f42:	f003 f889 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <MX_GPIO_Init+0x110>)
 8000f5e:	f002 fef1 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000f62:	f240 1361 	movw	r3, #353	; 0x161
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0x110>)
 8000f7c:	f002 fee2 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_GPIO_Init+0x114>)
 8000f9a:	f002 fed3 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f002 fec5 	bl	8003d44 <HAL_GPIO_Init>

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f023 030f 	bic.w	r3, r3, #15
 8000fe0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	f043 030c 	orr.w	r3, r3, #12
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2db      	uxtb	r3, r3
 8001004:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001010:	f107 0208 	add.w	r2, r7, #8
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2304      	movs	r3, #4
 800101a:	214e      	movs	r1, #78	; 0x4e
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <lcd_send_cmd+0x5c>)
 800101e:	f003 f8c3 	bl	80041a8 <HAL_I2C_Master_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000178 	.word	0x20000178

08001030 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f023 030f 	bic.w	r3, r3, #15
 8001040:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f043 030d 	orr.w	r3, r3, #13
 800104e:	b2db      	uxtb	r3, r3
 8001050:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0309 	orr.w	r3, r3, #9
 8001058:	b2db      	uxtb	r3, r3
 800105a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	f043 030d 	orr.w	r3, r3, #13
 8001062:	b2db      	uxtb	r3, r3
 8001064:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	f043 0309 	orr.w	r3, r3, #9
 800106c:	b2db      	uxtb	r3, r3
 800106e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2304      	movs	r3, #4
 800107a:	214e      	movs	r1, #78	; 0x4e
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <lcd_send_data+0x5c>)
 800107e:	f003 f893 	bl	80041a8 <HAL_I2C_Master_Transmit>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000178 	.word	0x20000178

08001090 <lcd_clear>:
	lcd_put_cur(row,col);
	lcd_send_string(string);
}

void lcd_clear (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001096:	2080      	movs	r0, #128	; 0x80
 8001098:	f7ff ff9a 	bl	8000fd0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	e005      	b.n	80010ae <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010a2:	2020      	movs	r0, #32
 80010a4:	f7ff ffc4 	bl	8001030 <lcd_send_data>
	for (int i=0; i<70; i++)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b45      	cmp	r3, #69	; 0x45
 80010b2:	ddf6      	ble.n	80010a2 <lcd_clear+0x12>
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
    switch (row)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <lcd_put_cur+0x18>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d005      	beq.n	80010e0 <lcd_put_cur+0x22>
 80010d4:	e009      	b.n	80010ea <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	603b      	str	r3, [r7, #0]
            break;
 80010de:	e004      	b.n	80010ea <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010e6:	603b      	str	r3, [r7, #0]
            break;
 80010e8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff6e 	bl	8000fd0 <lcd_send_cmd>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <lcd_init>:


void lcd_init (void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001100:	2032      	movs	r0, #50	; 0x32
 8001102:	f001 fd7f 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001106:	2030      	movs	r0, #48	; 0x30
 8001108:	f7ff ff62 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800110c:	2005      	movs	r0, #5
 800110e:	f001 fd79 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001112:	2030      	movs	r0, #48	; 0x30
 8001114:	f7ff ff5c 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001118:	2001      	movs	r0, #1
 800111a:	f001 fd73 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x30);
 800111e:	2030      	movs	r0, #48	; 0x30
 8001120:	f7ff ff56 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(10);
 8001124:	200a      	movs	r0, #10
 8001126:	f001 fd6d 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800112a:	2020      	movs	r0, #32
 800112c:	f7ff ff50 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f001 fd67 	bl	8002c04 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001136:	2028      	movs	r0, #40	; 0x28
 8001138:	f7ff ff4a 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f001 fd61 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001142:	2008      	movs	r0, #8
 8001144:	f7ff ff44 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f001 fd5b 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff ff3e 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f001 fd55 	bl	8002c04 <HAL_Delay>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fd52 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001160:	2006      	movs	r0, #6
 8001162:	f7ff ff35 	bl	8000fd0 <lcd_send_cmd>
	HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f001 fd4c 	bl	8002c04 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800116c:	200c      	movs	r0, #12
 800116e:	f7ff ff2f 	bl	8000fd0 <lcd_send_cmd>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}

08001176 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800117e:	e006      	b.n	800118e <lcd_send_string+0x18>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff51 	bl	8001030 <lcd_send_data>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f4      	bne.n	8001180 <lcd_send_string+0xa>
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_I2C1_Init+0x74>)
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <MX_I2C1_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_I2C1_Init+0x74>)
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <MX_I2C1_Init+0x7c>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_I2C1_Init+0x74>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <MX_I2C1_Init+0x74>)
 80011dc:	f002 ff54 	bl	8004088 <HAL_I2C_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011e6:	f001 f954 	bl	8002492 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <MX_I2C1_Init+0x74>)
 80011ee:	f003 fadf 	bl	80047b0 <HAL_I2CEx_ConfigAnalogFilter>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f8:	f001 f94b 	bl	8002492 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_I2C1_Init+0x74>)
 8001200:	f003 fb21 	bl	8004846 <HAL_I2CEx_ConfigDigitalFilter>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800120a:	f001 f942 	bl	8002492 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000178 	.word	0x20000178
 8001218:	40005400 	.word	0x40005400
 800121c:	2000090e 	.word	0x2000090e

08001220 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_I2C_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d128      	bne.n	8001294 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800125a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126c:	2304      	movs	r3, #4
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_I2C_MspInit+0x84>)
 8001278:	f002 fd64 	bl	8003d44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40005400 	.word	0x40005400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000400 	.word	0x48000400

080012a8 <c_wave_square_>:
            wave_val[i] = 0;
        }
    }
}
*/
void c_wave_square_(double voltDiv, double dutyCycle) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80012b2:	ed87 1b00 	vstr	d1, [r7]
    int highPeriod = (int)(NUM_PUNTOS * dutyCycle);
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <c_wave_square_+0x8c>)
 80012bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012c0:	f7ff f992 	bl	80005e8 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc26 	bl	8000b1c <__aeabi_d2iz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	61bb      	str	r3, [r7, #24]
    int lowPeriod = NUM_PUNTOS - highPeriod;
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80012da:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < NUM_PUNTOS; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	e01e      	b.n	8001320 <c_wave_square_+0x78>
        if (i < highPeriod) {
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	da12      	bge.n	8001310 <c_wave_square_+0x68>
            // Calcular el valor para la parte alta de la onda
            wave_val[i] = (uint32_t)(voltDiv * (4096 / 2));
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <c_wave_square_+0x90>)
 80012f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f4:	f7ff f978 	bl	80005e8 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc34 	bl	8000b6c <__aeabi_d2uiz>
 8001304:	4602      	mov	r2, r0
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <c_wave_square_+0x94>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800130e:	e004      	b.n	800131a <c_wave_square_+0x72>
        } else {
            // Calcular el valor para la parte baja de la onda
            wave_val[i] = 0;
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <c_wave_square_+0x94>)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2100      	movs	r1, #0
 8001316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_PUNTOS; i++) {
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001326:	dbdc      	blt.n	80012e2 <c_wave_square_+0x3a>
        }
    }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	408f4000 	.word	0x408f4000
 8001338:	40a00000 	.word	0x40a00000
 800133c:	200001cc 	.word	0x200001cc

08001340 <c_wave_triangle_>:
// Llamar a la función c_wave_square_ con los valores deseados
double dutyCycle = 0.5;  // Por ejemplo, un ciclo de trabajo del 50%

void c_wave_triangle_(double voltDiv, double dutyCycle) {
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0b02 	vstr	d0, [r7, #8]
 800134a:	ed87 1b00 	vstr	d1, [r7]
    int halfPeriod = NUM_PUNTOS / 2;
 800134e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001352:	61bb      	str	r3, [r7, #24]
    int dutyCyclePoints = halfPeriod * dutyCycle;
 8001354:	69b8      	ldr	r0, [r7, #24]
 8001356:	f7ff f8dd 	bl	8000514 <__aeabi_i2d>
 800135a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800135e:	f7ff f943 	bl	80005e8 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbd7 	bl	8000b1c <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < NUM_PUNTOS; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e05d      	b.n	8001434 <c_wave_triangle_+0xf4>
        if (i < dutyCyclePoints) {
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	da28      	bge.n	80013d2 <c_wave_triangle_+0x92>
            // Calcular el valor para la primera mitad de la onda
            wave_val[i] = (uint32_t)((voltDiv * i / dutyCyclePoints) * (4096 / 2));
 8001380:	69f8      	ldr	r0, [r7, #28]
 8001382:	f7ff f8c7 	bl	8000514 <__aeabi_i2d>
 8001386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800138a:	f7ff f92d 	bl	80005e8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff f8bc 	bl	8000514 <__aeabi_i2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4620      	mov	r0, r4
 80013a2:	4629      	mov	r1, r5
 80013a4:	f7ff fa4a 	bl	800083c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <c_wave_triangle_+0x108>)
 80013b6:	f7ff f917 	bl	80005e8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fbd3 	bl	8000b6c <__aeabi_d2uiz>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4920      	ldr	r1, [pc, #128]	; (800144c <c_wave_triangle_+0x10c>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80013d0:	e02d      	b.n	800142e <c_wave_triangle_+0xee>
        } else {
            // Calcular el valor para la segunda mitad de la onda
            wave_val[i] = (uint32_t)((voltDiv * (NUM_PUNTOS - i) / (NUM_PUNTOS - dutyCyclePoints)) * (4096 / 2));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f89b 	bl	8000514 <__aeabi_i2d>
 80013de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013e2:	f7ff f901 	bl	80005e8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4614      	mov	r4, r2
 80013ec:	461d      	mov	r5, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f88d 	bl	8000514 <__aeabi_i2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7ff fa1b 	bl	800083c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <c_wave_triangle_+0x108>)
 8001414:	f7ff f8e8 	bl	80005e8 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fba4 	bl	8000b6c <__aeabi_d2uiz>
 8001424:	4602      	mov	r2, r0
 8001426:	4909      	ldr	r1, [pc, #36]	; (800144c <c_wave_triangle_+0x10c>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < NUM_PUNTOS; i++) {
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800143a:	db9d      	blt.n	8001378 <c_wave_triangle_+0x38>
        }
    }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bdb0      	pop	{r4, r5, r7, pc}
 8001446:	bf00      	nop
 8001448:	40a00000 	.word	0x40a00000
 800144c:	200001cc 	.word	0x200001cc

08001450 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b0ba      	sub	sp, #232	; 0xe8
 8001454:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001456:	f001 fb6f 	bl	8002b38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800145a:	f000 ffbb 	bl	80023d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800145e:	f7ff fd2b 	bl	8000eb8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001462:	f7ff fd03 	bl	8000e6c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001466:	f001 facb 	bl	8002a00 <MX_USART2_UART_Init>
	MX_DAC_Init();
 800146a:	f7ff fc63 	bl	8000d34 <MX_DAC_Init>
	MX_TIM2_Init();
 800146e:	f001 fa2b 	bl	80028c8 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001472:	f7ff fb9b 	bl	8000bac <MX_ADC1_Init>
	MX_I2C1_Init();
 8001476:	f7ff fe93 	bl	80011a0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800147a:	48c3      	ldr	r0, [pc, #780]	; (8001788 <main+0x338>)
 800147c:	f004 fe36 	bl	80060ec <HAL_TIM_Base_Start>
	//if(iSierra == 1)
		c_wave_triangle_(0, 1); // Inicializar la forma de onda sin desplazamiento (voltDiv = 0, timeDiv = 1)
 8001480:	ed9f 1bb9 	vldr	d1, [pc, #740]	; 8001768 <main+0x318>
 8001484:	ed9f 0bba 	vldr	d0, [pc, #744]	; 8001770 <main+0x320>
 8001488:	f7ff ff5a 	bl	8001340 <c_wave_triangle_>

	//if(iSenoidal == 1)
		c_wave_sine_(0,1);
 800148c:	2101      	movs	r1, #1
 800148e:	2000      	movs	r0, #0
 8001490:	f000 ff3a 	bl	8002308 <c_wave_sine_>
	//if(iCuadrada == 1)
		//c_wave_square_(0,1);
		// Generar la forma de onda cuadrada
		 //   c_wave_square_(3.3, 0.5); // Ejemplo con voltaje de 3.3V y ciclo de trabajo del 50%

	max_init(0x03);
 8001494:	2003      	movs	r0, #3
 8001496:	f001 f943 	bl	8002720 <max_init>
	lcd_init();
 800149a:	f7ff fe2f 	bl	80010fc <lcd_init>
	//write_char(3, 1);
	//HAL_Delay(2000);
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, wave_val, 100, DAC_ALIGN_12B_R);
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	4ab9      	ldr	r2, [pc, #740]	; (800178c <main+0x33c>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	48b9      	ldr	r0, [pc, #740]	; (8001790 <main+0x340>)
 80014aa:	f002 f9c3 	bl	8003834 <HAL_DAC_Start_DMA>
	//HAL_DAC_Start_DMA(&hdac1, &led_value, 1);
	/* USER CODE END 2 */
	uint8_t MSG[50] = { '\0' };
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b6:	222e      	movs	r2, #46	; 0x2e
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f005 fdc4 	bl	8007048 <memset>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80014c0:	213c      	movs	r1, #60	; 0x3c
 80014c2:	48b1      	ldr	r0, [pc, #708]	; (8001788 <main+0x338>)
 80014c4:	f004 ff04 	bl	80062d0 <HAL_TIM_Encoder_Start>

	int pushButtonPressed = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int touchCount = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int iStart1 = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	int previousEncoderValueBackup = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	int previous_iStart1 = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int encoderValue = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	int previousEncoderValue = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	//double voltDiv = 1.0;  // Valor inicial de Volt/Div
	double timeDiv = 1.0;  // Valor inicial de Volt/Div
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4ba7      	ldr	r3, [pc, #668]	; (8001794 <main+0x344>)
 80014f8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	static int iSenoidal = 0;
	static int iCuadrada = 0;
	static int iSierra = 0;
	static int iLinea = 0;
	float voltDivValues[] = {0.41, 0.82, 1.23, 1.64, 2.05, 2.46, 2.87, 3.28, 3.3, 3.3};
 80014fc:	4ba6      	ldr	r3, [pc, #664]	; (8001798 <main+0x348>)
 80014fe:	1d3c      	adds	r4, r7, #4
 8001500:	461d      	mov	r5, r3
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800150e:	e884 0003 	stmia.w	r4, {r0, r1}
	static int buttonPressCount = 0;
	/* Infinite loop */

	// Generar la forma de onda cuadrada
			    double voltDiv = 3.3; // Voltaje pico de la onda
 8001512:	a399      	add	r3, pc, #612	; (adr r3, 8001778 <main+0x328>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
			    double dutyCycle = 0.5; // Ciclo de trabajo del 50%
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b9e      	ldr	r3, [pc, #632]	; (800179c <main+0x34c>)
 8001522:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			    c_wave_square_(voltDiv, dutyCycle);
 8001526:	ed97 1b1c 	vldr	d1, [r7, #112]	; 0x70
 800152a:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800152e:	f7ff febb 	bl	80012a8 <c_wave_square_>

			    // Generar la onda cuadrada en el pin GPIOA8
			    while (1) {
			        for (int i = 0; i < NUM_PUNTOS; i++) {
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001538:	e021      	b.n	800157e <main+0x12e>
			            if (wave_val[i] > 0) {
 800153a:	4a94      	ldr	r2, [pc, #592]	; (800178c <main+0x33c>)
 800153c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <main+0x100>
			                GPIOC->BSRR = GPIO_BSRR_BS_0; // Encender el pin GPIOA8
 8001548:	4b95      	ldr	r3, [pc, #596]	; (80017a0 <main+0x350>)
 800154a:	2201      	movs	r2, #1
 800154c:	619a      	str	r2, [r3, #24]
 800154e:	e003      	b.n	8001558 <main+0x108>
			            } else {
			                GPIOC->BSRR = GPIO_BSRR_BR_0; // Apagar el pin GPIOA8
 8001550:	4b93      	ldr	r3, [pc, #588]	; (80017a0 <main+0x350>)
 8001552:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001556:	619a      	str	r2, [r3, #24]
			            }

			            // Retraso para ajustar la frecuencia de la onda
			            for (int delay = 0; delay < 1000; delay++) {
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800155e:	e004      	b.n	800156a <main+0x11a>
 8001560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001564:	3301      	adds	r3, #1
 8001566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800156a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800156e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001572:	dbf5      	blt.n	8001560 <main+0x110>
			        for (int i = 0; i < NUM_PUNTOS; i++) {
 8001574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001578:	3301      	adds	r3, #1
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800157e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001586:	dbd8      	blt.n	800153a <main+0xea>
			                // Pequeño retraso
			            }
			        }

		// Mostrar la forma de onda en la matriz LED
		max_clear(); // Limpiar la matriz LED antes de mostrar la siguiente forma de onda
 8001588:	f001 f89c 	bl	80026c4 <max_clear>

		// Iterar sobre cada columna de la matriz LED
		for (int col = 0; col < MATRIX_SIZE; col++) {
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001592:	e02a      	b.n	80015ea <main+0x19a>
			// Mapear el valor de la forma de onda al rango de la matriz LED
			uint8_t led_value = wave_val[col] / (4096 / MATRIX_SIZE);
 8001594:	4a7d      	ldr	r2, [pc, #500]	; (800178c <main+0x33c>)
 8001596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	0a5b      	lsrs	r3, r3, #9
 80015a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			// Encender el LED correspondiente en la columna actual
			setled(col, MATRIX_SIZE - 1 - led_value, 1);
 80015a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2201      	movs	r2, #1
 80015b6:	4619      	mov	r1, r3
 80015b8:	f000 ffca 	bl	8002550 <setled>

			// Calcular el retraso basado en el valor de timeDiv
			uint32_t delay_ms = (uint32_t)(10 / timeDiv);
 80015bc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	4977      	ldr	r1, [pc, #476]	; (80017a4 <main+0x354>)
 80015c6:	f7ff f939 	bl	800083c <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff facb 	bl	8000b6c <__aeabi_d2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	663b      	str	r3, [r7, #96]	; 0x60

			// Retraso opcional para ajustar la velocidad de visualización
			HAL_Delay(delay_ms); // Ajusta el valor según sea necesario
 80015da:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015dc:	f001 fb12 	bl	8002c04 <HAL_Delay>
		for (int col = 0; col < MATRIX_SIZE; col++) {
 80015e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015e4:	3301      	adds	r3, #1
 80015e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80015ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015ee:	2b07      	cmp	r3, #7
 80015f0:	ddd0      	ble.n	8001594 <main+0x144>
		}

		// Retraso opcional para mantener los LEDs encendidos antes de apagarse progresivamente
		HAL_Delay(10); // Ajusta el valor según sea necesario
 80015f2:	200a      	movs	r0, #10
 80015f4:	f001 fb06 	bl	8002c04 <HAL_Delay>

		// Apagar los LEDs progresivamente en sentido inverso
		for (int col = MATRIX_SIZE - 1; col >= 0; col--) {
 80015f8:	2307      	movs	r3, #7
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015fe:	e02a      	b.n	8001656 <main+0x206>
			// Mapear el valor de la forma de onda al rango de la matriz LED
			uint8_t led_value = wave_val[col] / (4096 / MATRIX_SIZE);
 8001600:	4a62      	ldr	r2, [pc, #392]	; (800178c <main+0x33c>)
 8001602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	0a5b      	lsrs	r3, r3, #9
 800160c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			// Apagar el LED correspondiente en la columna actual
			setled(col, MATRIX_SIZE - 1 - led_value, 0);
 8001610:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001614:	b2d8      	uxtb	r0, r3
 8001616:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	f000 ff94 	bl	8002550 <setled>

			// Calcular el retraso basado en el valor de timeDiv
			uint32_t delay_ms = (uint32_t)(10 / timeDiv);
 8001628:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	495c      	ldr	r1, [pc, #368]	; (80017a4 <main+0x354>)
 8001632:	f7ff f903 	bl	800083c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa95 	bl	8000b6c <__aeabi_d2uiz>
 8001642:	4603      	mov	r3, r0
 8001644:	66bb      	str	r3, [r7, #104]	; 0x68

			// Retraso opcional para ajustar la velocidad de apagado
			HAL_Delay(delay_ms); // Ajusta el valor según sea necesario
 8001646:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001648:	f001 fadc 	bl	8002c04 <HAL_Delay>
		for (int col = MATRIX_SIZE - 1; col >= 0; col--) {
 800164c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001650:	3b01      	subs	r3, #1
 8001652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800165a:	2b00      	cmp	r3, #0
 800165c:	dad0      	bge.n	8001600 <main+0x1b0>
		}


		 for (int i = 0; i < NUM_PUNTOS; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001664:	e016      	b.n	8001694 <main+0x244>
		            if (wave_val[i] > 0) {
 8001666:	4a49      	ldr	r2, [pc, #292]	; (800178c <main+0x33c>)
 8001668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <main+0x230>
		                // Encender el pin GPIOA8
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	4849      	ldr	r0, [pc, #292]	; (80017a0 <main+0x350>)
 800167a:	f002 fced 	bl	8004058 <HAL_GPIO_WritePin>
 800167e:	e004      	b.n	800168a <main+0x23a>
		            } else {
		                // Apagar el pin GPIOA8
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2101      	movs	r1, #1
 8001684:	4846      	ldr	r0, [pc, #280]	; (80017a0 <main+0x350>)
 8001686:	f002 fce7 	bl	8004058 <HAL_GPIO_WritePin>
		 for (int i = 0; i < NUM_PUNTOS; i++) {
 800168a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800168e:	3301      	adds	r3, #1
 8001690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169c:	dbe3      	blt.n	8001666 <main+0x216>
		            //HAL_Delay(50); // Ajusta el valor según sea necesario
		        }


		// Obtener el valor del encoder
		encoderValue = TIM2->CNT;
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		if (iSenoidal == 1) {
 80016a8:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <main+0x358>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 80d3 	bne.w	8001858 <main+0x408>
			if (iStart1 == 0) {
 80016b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d17a      	bne.n	80017b0 <main+0x360>
					        // Verificar si el valor de iStart1 ha cambiado de 1 a 0
					        if (previous_iStart1 == 1 && iStart1 == 0) {
 80016ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <main+0x282>
 80016c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <main+0x282>
					            encoderValue = previousEncoderValueBackup;
 80016ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					        }

					        // Limitar el valor del encoder a un máximo de 10
					        if (encoderValue > 10) {
 80016d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	dd07      	ble.n	80016ea <main+0x29a>
					            encoderValue = 10;
 80016da:	230a      	movs	r3, #10
 80016dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					            TIM2->CNT = encoderValue;
 80016e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016e8:	6253      	str	r3, [r2, #36]	; 0x24
					        }

					        // Verificar si el valor del encoder ha cambiado
					        if (encoderValue != previousEncoderValue) {
 80016ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80016ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f000 80b0 	beq.w	8001858 <main+0x408>
					            // Calcular el nuevo valor de voltDiv según el valor del encoder
					            voltDiv = encoderValue * 0.1;
 80016f8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80016fc:	f7fe ff0a 	bl	8000514 <__aeabi_i2d>
 8001700:	a31f      	add	r3, pc, #124	; (adr r3, 8001780 <main+0x330>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff6f 	bl	80005e8 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

					            // Limitar el rango de voltDiv entre 0.1 y 3.0
					            if (voltDiv < 0.1) {
 8001712:	a31b      	add	r3, pc, #108	; (adr r3, 8001780 <main+0x330>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800171c:	f7ff f9d6 	bl	8000acc <__aeabi_dcmplt>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <main+0x2e2>
					                voltDiv = 0.1;
 8001726:	a316      	add	r3, pc, #88	; (adr r3, 8001780 <main+0x330>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8001730:	e00e      	b.n	8001750 <main+0x300>
					            } else if (voltDiv > 3.0) {
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <main+0x35c>)
 8001738:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800173c:	f7ff f9e4 	bl	8000b08 <__aeabi_dcmpgt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <main+0x300>
					                voltDiv = 3.0;
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <main+0x35c>)
 800174c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
					            }

					            // Actualizar la forma de onda con el nuevo voltDiv
					            c_wave_sine_(voltDiv, timeDiv);
 8001750:	ed97 1b2e 	vldr	d1, [r7, #184]	; 0xb8
 8001754:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8001758:	f000 fdd6 	bl	8002308 <c_wave_sine_>

					            // Actualizar el valor del encoder previo
					            previousEncoderValue = encoderValue;
 800175c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001764:	e078      	b.n	8001858 <main+0x408>
 8001766:	bf00      	nop
 8001768:	00000000 	.word	0x00000000
 800176c:	3ff00000 	.word	0x3ff00000
	...
 8001778:	66666666 	.word	0x66666666
 800177c:	400a6666 	.word	0x400a6666
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fb99999 	.word	0x3fb99999
 8001788:	20001224 	.word	0x20001224
 800178c:	200001cc 	.word	0x200001cc
 8001790:	20000120 	.word	0x20000120
 8001794:	3ff00000 	.word	0x3ff00000
 8001798:	08008db8 	.word	0x08008db8
 800179c:	3fe00000 	.word	0x3fe00000
 80017a0:	48000800 	.word	0x48000800
 80017a4:	40240000 	.word	0x40240000
 80017a8:	2000116c 	.word	0x2000116c
 80017ac:	40080000 	.word	0x40080000
					        }
					    } else {
					        // Verificar si el valor de iStart1 ha cambiado de 0 a 1
					        if (previous_iStart1 == 0 && iStart1 == 1) {
 80017b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <main+0x378>
 80017b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d103      	bne.n	80017c8 <main+0x378>
					            previousEncoderValueBackup = previousEncoderValue;
 80017c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					        }

					        // Limitar el valor del encoder a un máximo de 10
					        if (encoderValue > 20) {
 80017c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017cc:	2b14      	cmp	r3, #20
 80017ce:	dd07      	ble.n	80017e0 <main+0x390>
					            encoderValue = 20;
 80017d0:	2314      	movs	r3, #20
 80017d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					            TIM2->CNT = encoderValue;
 80017d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017de:	6253      	str	r3, [r2, #36]	; 0x24
					        }

					        // Verificar si el valor del encoder ha cambiado
					        if (encoderValue != previousEncoderValue) {
 80017e0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80017e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d035      	beq.n	8001858 <main+0x408>
					            // Calcular el nuevo valor de timeDiv según el valor del encoder
					            timeDiv = encoderValue * 0.1;
 80017ec:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017f0:	f7fe fe90 	bl	8000514 <__aeabi_i2d>
 80017f4:	a3be      	add	r3, pc, #760	; (adr r3, 8001af0 <main+0x6a0>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fef5 	bl	80005e8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

					            // Limitar el rango de timeDiv entre 0.1 y 3.0
					            if (timeDiv < 0.1) {
 8001806:	a3ba      	add	r3, pc, #744	; (adr r3, 8001af0 <main+0x6a0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001810:	f7ff f95c 	bl	8000acc <__aeabi_dcmplt>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <main+0x3d6>
					                timeDiv = 0.1;
 800181a:	a3b5      	add	r3, pc, #724	; (adr r3, 8001af0 <main+0x6a0>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8001824:	e00e      	b.n	8001844 <main+0x3f4>
					            } else if (timeDiv > 3.0) {
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4bb5      	ldr	r3, [pc, #724]	; (8001b00 <main+0x6b0>)
 800182c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001830:	f7ff f96a 	bl	8000b08 <__aeabi_dcmpgt>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <main+0x3f4>
					                timeDiv = 3.0;
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4bb0      	ldr	r3, [pc, #704]	; (8001b00 <main+0x6b0>)
 8001840:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
					            }

					            // Actualizar la forma de onda con el nuevo timeDiv
					            c_wave_sine_(voltDiv, timeDiv);
 8001844:	ed97 1b2e 	vldr	d1, [r7, #184]	; 0xb8
 8001848:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800184c:	f000 fd5c 	bl	8002308 <c_wave_sine_>

					            // Actualizar el valor del encoder previo
					            previousEncoderValue = encoderValue;
 8001850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					        }
					    }
		}
		if (iCuadrada == 1) {
 8001858:	4baa      	ldr	r3, [pc, #680]	; (8001b04 <main+0x6b4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	f040 80ae 	bne.w	80019be <main+0x56e>
			if (iStart1 == 0) {
 8001862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d155      	bne.n	8001916 <main+0x4c6>
				// Verificar si el valor de iStart1 ha cambiado de 1 a 0
				if (previous_iStart1 == 1 && iStart1 == 0) {
 800186a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <main+0x432>
 8001872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <main+0x432>
					encoderValue = previousEncoderValueBackup;
 800187a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800187e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				}

				// Limitar el valor del encoder a un máximo de 10
				if (encoderValue > 10) {
 8001882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001886:	2b0a      	cmp	r3, #10
 8001888:	dd07      	ble.n	800189a <main+0x44a>
					encoderValue = 10;
 800188a:	230a      	movs	r3, #10
 800188c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					TIM2->CNT = encoderValue;
 8001890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001898:	6253      	str	r3, [r2, #36]	; 0x24
				}

				// Verificar si el valor del encoder ha cambiado
				if (encoderValue != previousEncoderValue) {
 800189a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800189e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f000 808b 	beq.w	80019be <main+0x56e>
					// Calcular el nuevo valor de voltDiv según el valor del encoder
					double voltDiv = encoderValue * 0.1;
 80018a8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80018ac:	f7fe fe32 	bl	8000514 <__aeabi_i2d>
 80018b0:	a38f      	add	r3, pc, #572	; (adr r3, 8001af0 <main+0x6a0>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe97 	bl	80005e8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

					// Limitar el rango de voltDiv entre 0.1 y 3.0
					if (voltDiv < 0.1) {
 80018c2:	a38b      	add	r3, pc, #556	; (adr r3, 8001af0 <main+0x6a0>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80018cc:	f7ff f8fe 	bl	8000acc <__aeabi_dcmplt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <main+0x492>
						voltDiv = 0.1;
 80018d6:	a386      	add	r3, pc, #536	; (adr r3, 8001af0 <main+0x6a0>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80018e0:	e00e      	b.n	8001900 <main+0x4b0>
					} else if (voltDiv > 3.0) {
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b86      	ldr	r3, [pc, #536]	; (8001b00 <main+0x6b0>)
 80018e8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80018ec:	f7ff f90c 	bl	8000b08 <__aeabi_dcmpgt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <main+0x4b0>
						voltDiv = 3.0;
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <main+0x6b0>)
 80018fc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
					}

					// Actualizar la forma de onda con el nuevo voltDiv
					c_wave_square_(voltDiv, dutyCycle);
 8001900:	ed97 1b1c 	vldr	d1, [r7, #112]	; 0x70
 8001904:	ed97 0b24 	vldr	d0, [r7, #144]	; 0x90
 8001908:	f7ff fcce 	bl	80012a8 <c_wave_square_>

					// Actualizar el valor del encoder previo
					previousEncoderValue = encoderValue;
 800190c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001914:	e053      	b.n	80019be <main+0x56e>
				}
			} else {
				// Verificar si el valor de iStart1 ha cambiado de 0 a 1
				if (previous_iStart1 == 0 && iStart1 == 1) {
 8001916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <main+0x4de>
 800191e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001922:	2b01      	cmp	r3, #1
 8001924:	d103      	bne.n	800192e <main+0x4de>
					previousEncoderValueBackup = previousEncoderValue;
 8001926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800192a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				}

				// Limitar el valor del encoder a un máximo de 10
				if (encoderValue > 10) {
 800192e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001932:	2b0a      	cmp	r3, #10
 8001934:	dd07      	ble.n	8001946 <main+0x4f6>
					encoderValue = 10;
 8001936:	230a      	movs	r3, #10
 8001938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					TIM2->CNT = encoderValue;
 800193c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001940:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001944:	6253      	str	r3, [r2, #36]	; 0x24
				}

				// Verificar si el valor del encoder ha cambiado
				if (encoderValue != previousEncoderValue) {
 8001946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800194a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800194e:	429a      	cmp	r2, r3
 8001950:	d035      	beq.n	80019be <main+0x56e>
					// Calcular el nuevo valor de dutyCycle según el valor del encoder
					double dutyCycle = encoderValue / 10.0;
 8001952:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001956:	f7fe fddd 	bl	8000514 <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <main+0x6b8>)
 8001960:	f7fe ff6c 	bl	800083c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

					// Limitar el rango de dutyCycle entre 0.1 y 0.9
					if (dutyCycle < 0.1) {
 800196c:	a360      	add	r3, pc, #384	; (adr r3, 8001af0 <main+0x6a0>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001976:	f7ff f8a9 	bl	8000acc <__aeabi_dcmplt>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <main+0x53c>
						dutyCycle = 0.1;
 8001980:	a35b      	add	r3, pc, #364	; (adr r3, 8001af0 <main+0x6a0>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800198a:	e00e      	b.n	80019aa <main+0x55a>
					} else if (dutyCycle > 0.9) {
 800198c:	a35a      	add	r3, pc, #360	; (adr r3, 8001af8 <main+0x6a8>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001996:	f7ff f8b7 	bl	8000b08 <__aeabi_dcmpgt>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <main+0x55a>
						dutyCycle = 0.9;
 80019a0:	a355      	add	r3, pc, #340	; (adr r3, 8001af8 <main+0x6a8>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
					}

					// Actualizar la forma de onda con el nuevo dutyCycle
					c_wave_square_(voltDiv, dutyCycle);
 80019aa:	ed97 1b22 	vldr	d1, [r7, #136]	; 0x88
 80019ae:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 80019b2:	f7ff fc79 	bl	80012a8 <c_wave_square_>

					// Actualizar el valor del encoder previo
					previousEncoderValue = encoderValue;
 80019b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
				}
			}

		}
		if (iSierra = 1) {
 80019be:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <main+0x6bc>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
			if (iStart1 == 0) {
 80019c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d155      	bne.n	8001a78 <main+0x628>
				// Verificar si el valor de iStart1 ha cambiado de 1 a 0
				if (previous_iStart1 == 1 && iStart1 == 0) {
 80019cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <main+0x594>
 80019d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <main+0x594>
					encoderValue = previousEncoderValueBackup;
 80019dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				}

				// Limitar el valor del encoder a un máximo de 10
				if (encoderValue > 16) {
 80019e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	dd07      	ble.n	80019fc <main+0x5ac>
					encoderValue = 16;
 80019ec:	2310      	movs	r3, #16
 80019ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					TIM2->CNT = encoderValue;
 80019f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019fa:	6253      	str	r3, [r2, #36]	; 0x24
				}

				// Verificar si el valor del encoder ha cambiado
				if (encoderValue != previousEncoderValue) {
 80019fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f000 809c 	beq.w	8001b42 <main+0x6f2>
					// Calcular el nuevo valor de voltDiv según el valor del encoder
					double voltDiv = encoderValue * 0.1;
 8001a0a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a0e:	f7fe fd81 	bl	8000514 <__aeabi_i2d>
 8001a12:	a337      	add	r3, pc, #220	; (adr r3, 8001af0 <main+0x6a0>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fde6 	bl	80005e8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

					// Limitar el rango de voltDiv entre 0.1 y 3.0
					if (voltDiv < 0.1) {
 8001a24:	a332      	add	r3, pc, #200	; (adr r3, 8001af0 <main+0x6a0>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a2e:	f7ff f84d 	bl	8000acc <__aeabi_dcmplt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <main+0x5f4>
						voltDiv = 0.1;
 8001a38:	a32d      	add	r3, pc, #180	; (adr r3, 8001af0 <main+0x6a0>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a42:	e00e      	b.n	8001a62 <main+0x612>
					} else if (voltDiv > 3.0) {
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <main+0x6b0>)
 8001a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a4e:	f7ff f85b 	bl	8000b08 <__aeabi_dcmpgt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <main+0x612>
						voltDiv = 3.0;
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <main+0x6b0>)
 8001a5e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
					}

					// Actualizar la forma de onda con el nuevo voltDiv
					c_wave_triangle_(voltDiv, dutyCycle);
 8001a62:	ed97 1b1c 	vldr	d1, [r7, #112]	; 0x70
 8001a66:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8001a6a:	f7ff fc69 	bl	8001340 <c_wave_triangle_>

					// Actualizar el valor del encoder previo
					previousEncoderValue = encoderValue;
 8001a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a76:	e064      	b.n	8001b42 <main+0x6f2>
				}
			} else {
				// Verificar si el valor de iStart1 ha cambiado de 0 a 1
				if (previous_iStart1 == 0 && iStart1 == 1) {
 8001a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <main+0x640>
 8001a80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d103      	bne.n	8001a90 <main+0x640>
					previousEncoderValueBackup = previousEncoderValue;
 8001a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				}

				// Limitar el valor del encoder a un máximo de 10
				if (encoderValue > 20) {
 8001a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a94:	2b14      	cmp	r3, #20
 8001a96:	dd07      	ble.n	8001aa8 <main+0x658>
					encoderValue = 20;
 8001a98:	2314      	movs	r3, #20
 8001a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					TIM2->CNT = encoderValue;
 8001a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aa6:	6253      	str	r3, [r2, #36]	; 0x24
				}

				// Verificar si el valor del encoder ha cambiado
				if (encoderValue != previousEncoderValue) {
 8001aa8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d046      	beq.n	8001b42 <main+0x6f2>
					// Calcular el nuevo valor de dutyCycle según el valor del encoder
					double dutyCycle = encoderValue / 10.0;
 8001ab4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001ab8:	f7fe fd2c 	bl	8000514 <__aeabi_i2d>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <main+0x6b8>)
 8001ac2:	f7fe febb 	bl	800083c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

					// Limitar el rango de dutyCycle entre 0.1 y 0.9
					if (dutyCycle < 0.1) {
 8001ace:	a308      	add	r3, pc, #32	; (adr r3, 8001af0 <main+0x6a0>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ad8:	f7fe fff8 	bl	8000acc <__aeabi_dcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <main+0x6c0>
						dutyCycle = 0.1;
 8001ae2:	a303      	add	r3, pc, #12	; (adr r3, 8001af0 <main+0x6a0>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8001aec:	e01f      	b.n	8001b2e <main+0x6de>
 8001aee:	bf00      	nop
 8001af0:	9999999a 	.word	0x9999999a
 8001af4:	3fb99999 	.word	0x3fb99999
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	3feccccc 	.word	0x3feccccc
 8001b00:	40080000 	.word	0x40080000
 8001b04:	20001170 	.word	0x20001170
 8001b08:	40240000 	.word	0x40240000
 8001b0c:	20001174 	.word	0x20001174
					} else if (dutyCycle > 0.9) {
 8001b10:	a3de      	add	r3, pc, #888	; (adr r3, 8001e8c <main+0xa3c>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b1a:	f7fe fff5 	bl	8000b08 <__aeabi_dcmpgt>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <main+0x6de>
						dutyCycle = 0.9;
 8001b24:	a3d9      	add	r3, pc, #868	; (adr r3, 8001e8c <main+0xa3c>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
					}

					// Actualizar la forma de onda con el nuevo dutyCycle
					c_wave_triangle_(voltDiv, dutyCycle);
 8001b2e:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8001b32:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8001b36:	f7ff fc03 	bl	8001340 <c_wave_triangle_>

					// Actualizar el valor del encoder previo
					previousEncoderValue = encoderValue;
 8001b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
				}
			}

		}
		// Mostrar el valor del encoder en la I2C LCD
		sprintf(MSG, "Encoder: %d ", encoderValue);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b4a:	49b1      	ldr	r1, [pc, #708]	; (8001e10 <main+0x9c0>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f005 fa83 	bl	8007058 <siprintf>
		lcd_put_cur(0, 0);
 8001b52:	2100      	movs	r1, #0
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fab2 	bl	80010be <lcd_put_cur>
		lcd_send_string(MSG);
 8001b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb09 	bl	8001176 <lcd_send_string>

		if (iStart1 == 0) {
 8001b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 81a2 	bne.w	8001eb2 <main+0xa62>
			if (iSenoidal == 1 || iCuadrada == 1 || iLinea == 1 && iSierra == 0) {
 8001b6e:	4ba9      	ldr	r3, [pc, #676]	; (8001e14 <main+0x9c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d00b      	beq.n	8001b8e <main+0x73e>
 8001b76:	4ba8      	ldr	r3, [pc, #672]	; (8001e18 <main+0x9c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d007      	beq.n	8001b8e <main+0x73e>
 8001b7e:	4ba7      	ldr	r3, [pc, #668]	; (8001e1c <main+0x9cc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d177      	bne.n	8001c76 <main+0x826>
 8001b86:	4ba6      	ldr	r3, [pc, #664]	; (8001e20 <main+0x9d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d173      	bne.n	8001c76 <main+0x826>
				// Mostrar el valor de voltDiv en la LCD
				if (encoderValue == 1) {
 8001b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <main+0x754>
					sprintf(MSG, "Volt/Div: 0.33 V  ");
 8001b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9a:	49a2      	ldr	r1, [pc, #648]	; (8001e24 <main+0x9d4>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 fa5b 	bl	8007058 <siprintf>
 8001ba2:	e068      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 2) {
 8001ba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d106      	bne.n	8001bba <main+0x76a>
					sprintf(MSG, "Volt/Div: 0.66 V  ");
 8001bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb0:	499d      	ldr	r1, [pc, #628]	; (8001e28 <main+0x9d8>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f005 fa50 	bl	8007058 <siprintf>
 8001bb8:	e05d      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 3) {
 8001bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d106      	bne.n	8001bd0 <main+0x780>
					sprintf(MSG, "Volt/Div: 0.99 V  ");
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4999      	ldr	r1, [pc, #612]	; (8001e2c <main+0x9dc>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fa45 	bl	8007058 <siprintf>
 8001bce:	e052      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 4) {
 8001bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d106      	bne.n	8001be6 <main+0x796>
					sprintf(MSG, "Volt/Div: 1.32 V  ");
 8001bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bdc:	4994      	ldr	r1, [pc, #592]	; (8001e30 <main+0x9e0>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fa3a 	bl	8007058 <siprintf>
 8001be4:	e047      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 5) {
 8001be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d106      	bne.n	8001bfc <main+0x7ac>
					sprintf(MSG, "Volt/Div: 1.65 V  ");
 8001bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf2:	4990      	ldr	r1, [pc, #576]	; (8001e34 <main+0x9e4>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 fa2f 	bl	8007058 <siprintf>
 8001bfa:	e03c      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 6) {
 8001bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d106      	bne.n	8001c12 <main+0x7c2>
					sprintf(MSG, "Volt/Div: 1.98 V  ");
 8001c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c08:	498b      	ldr	r1, [pc, #556]	; (8001e38 <main+0x9e8>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fa24 	bl	8007058 <siprintf>
 8001c10:	e031      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 7) {
 8001c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d106      	bne.n	8001c28 <main+0x7d8>
					sprintf(MSG, "Volt/Div: 2.31 V  ");
 8001c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1e:	4987      	ldr	r1, [pc, #540]	; (8001e3c <main+0x9ec>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 fa19 	bl	8007058 <siprintf>
 8001c26:	e026      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 8) {
 8001c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d106      	bne.n	8001c3e <main+0x7ee>
					sprintf(MSG, "Volt/Div: 2.64 V  ");
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	4982      	ldr	r1, [pc, #520]	; (8001e40 <main+0x9f0>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 fa0e 	bl	8007058 <siprintf>
 8001c3c:	e01b      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 9) {
 8001c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d106      	bne.n	8001c54 <main+0x804>
					sprintf(MSG, "Volt/Div: 2.97 V  ");
 8001c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4a:	497e      	ldr	r1, [pc, #504]	; (8001e44 <main+0x9f4>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fa03 	bl	8007058 <siprintf>
 8001c52:	e010      	b.n	8001c76 <main+0x826>
				} else if (encoderValue == 10) {
 8001c54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d106      	bne.n	8001c6a <main+0x81a>
					sprintf(MSG, "Volt/Div: 3.3 V  ");
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4979      	ldr	r1, [pc, #484]	; (8001e48 <main+0x9f8>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 f9f8 	bl	8007058 <siprintf>
 8001c68:	e005      	b.n	8001c76 <main+0x826>
				} else {
					sprintf(MSG, "Volt/Div: 0 V ");
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4977      	ldr	r1, [pc, #476]	; (8001e4c <main+0x9fc>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 f9f1 	bl	8007058 <siprintf>
				}
			}
			lcd_put_cur(1, 0);
 8001c76:	2100      	movs	r1, #0
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fa20 	bl	80010be <lcd_put_cur>
			lcd_send_string(MSG);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa77 	bl	8001176 <lcd_send_string>

			if (iSierra == 1 && iSenoidal == 0 && iCuadrada == 0 && iLinea == 0) {
 8001c88:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <main+0x9d0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	f040 8107 	bne.w	8001ea0 <main+0xa50>
 8001c92:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <main+0x9c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8102 	bne.w	8001ea0 <main+0xa50>
 8001c9c:	4b5e      	ldr	r3, [pc, #376]	; (8001e18 <main+0x9c8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 80fd 	bne.w	8001ea0 <main+0xa50>
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <main+0x9cc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 80f8 	bne.w	8001ea0 <main+0xa50>
				// Mostrar el valor de voltDiv en la LCD
				if (encoderValue == 1) {
 8001cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <main+0x876>
					sprintf(MSG, "Volt/Div: 0.20 V  ");
 8001cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbc:	4964      	ldr	r1, [pc, #400]	; (8001e50 <main+0xa00>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 f9ca 	bl	8007058 <siprintf>
 8001cc4:	e0ec      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 2) {
 8001cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d106      	bne.n	8001cdc <main+0x88c>
					sprintf(MSG, "Volt/Div: 0.4 V  ");
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	4960      	ldr	r1, [pc, #384]	; (8001e54 <main+0xa04>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 f9bf 	bl	8007058 <siprintf>
 8001cda:	e0e1      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 3) {
 8001cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d106      	bne.n	8001cf2 <main+0x8a2>
					sprintf(MSG, "Volt/Div: 0.6 V  ");
 8001ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce8:	495b      	ldr	r1, [pc, #364]	; (8001e58 <main+0xa08>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 f9b4 	bl	8007058 <siprintf>
 8001cf0:	e0d6      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 4) {
 8001cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d106      	bne.n	8001d08 <main+0x8b8>
					sprintf(MSG, "Volt/Div: 0.8 V  ");
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	4957      	ldr	r1, [pc, #348]	; (8001e5c <main+0xa0c>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 f9a9 	bl	8007058 <siprintf>
 8001d06:	e0cb      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 5) {
 8001d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d106      	bne.n	8001d1e <main+0x8ce>
					sprintf(MSG, "Volt/Div: 1 V  ");
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	4952      	ldr	r1, [pc, #328]	; (8001e60 <main+0xa10>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f005 f99e 	bl	8007058 <siprintf>
 8001d1c:	e0c0      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 6) {
 8001d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d106      	bne.n	8001d34 <main+0x8e4>
					sprintf(MSG, "Volt/Div: 1.2 V  ");
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	494e      	ldr	r1, [pc, #312]	; (8001e64 <main+0xa14>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 f993 	bl	8007058 <siprintf>
 8001d32:	e0b5      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 7) {
 8001d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d38:	2b07      	cmp	r3, #7
 8001d3a:	d106      	bne.n	8001d4a <main+0x8fa>
					sprintf(MSG, "Volt/Div: 1.4 V  ");
 8001d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d40:	4949      	ldr	r1, [pc, #292]	; (8001e68 <main+0xa18>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 f988 	bl	8007058 <siprintf>
 8001d48:	e0aa      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 8) {
 8001d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d106      	bne.n	8001d60 <main+0x910>
					sprintf(MSG, "Volt/Div: 1.6 V  ");
 8001d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d56:	4945      	ldr	r1, [pc, #276]	; (8001e6c <main+0xa1c>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f005 f97d 	bl	8007058 <siprintf>
 8001d5e:	e09f      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 9) {
 8001d60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d106      	bne.n	8001d76 <main+0x926>
					sprintf(MSG, "Volt/Div: 1.8 V  ");
 8001d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6c:	4940      	ldr	r1, [pc, #256]	; (8001e70 <main+0xa20>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f005 f972 	bl	8007058 <siprintf>
 8001d74:	e094      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 10) {
 8001d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d106      	bne.n	8001d8c <main+0x93c>
					sprintf(MSG, "Volt/Div: 2 V  ");
 8001d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d82:	493c      	ldr	r1, [pc, #240]	; (8001e74 <main+0xa24>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 f967 	bl	8007058 <siprintf>
 8001d8a:	e089      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 11) {
 8001d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d90:	2b0b      	cmp	r3, #11
 8001d92:	d106      	bne.n	8001da2 <main+0x952>
					sprintf(MSG, "Volt/Div: 2.2 V  ");
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4937      	ldr	r1, [pc, #220]	; (8001e78 <main+0xa28>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f005 f95c 	bl	8007058 <siprintf>
 8001da0:	e07e      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 12) {
 8001da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d106      	bne.n	8001db8 <main+0x968>
					sprintf(MSG, "Volt/Div: 2.4 V  ");
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4933      	ldr	r1, [pc, #204]	; (8001e7c <main+0xa2c>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 f951 	bl	8007058 <siprintf>
 8001db6:	e073      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 13) {
 8001db8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dbc:	2b0d      	cmp	r3, #13
 8001dbe:	d106      	bne.n	8001dce <main+0x97e>
					sprintf(MSG, "Volt/Div: 2.6 V  ");
 8001dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc4:	492e      	ldr	r1, [pc, #184]	; (8001e80 <main+0xa30>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 f946 	bl	8007058 <siprintf>
 8001dcc:	e068      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 14) {
 8001dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dd2:	2b0e      	cmp	r3, #14
 8001dd4:	d106      	bne.n	8001de4 <main+0x994>
					sprintf(MSG, "Volt/Div: 2.8 V  ");
 8001dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dda:	492a      	ldr	r1, [pc, #168]	; (8001e84 <main+0xa34>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 f93b 	bl	8007058 <siprintf>
 8001de2:	e05d      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 15) {
 8001de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d106      	bne.n	8001dfa <main+0x9aa>
					sprintf(MSG, "Volt/Div: 3 V  ");
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4925      	ldr	r1, [pc, #148]	; (8001e88 <main+0xa38>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 f930 	bl	8007058 <siprintf>
 8001df8:	e052      	b.n	8001ea0 <main+0xa50>
				} else if (encoderValue == 16) {
 8001dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d148      	bne.n	8001e94 <main+0xa44>
					sprintf(MSG, "Volt/Div: 3.3 V  ");
 8001e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e06:	4910      	ldr	r1, [pc, #64]	; (8001e48 <main+0x9f8>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f005 f925 	bl	8007058 <siprintf>
 8001e0e:	e047      	b.n	8001ea0 <main+0xa50>
 8001e10:	080089e8 	.word	0x080089e8
 8001e14:	2000116c 	.word	0x2000116c
 8001e18:	20001170 	.word	0x20001170
 8001e1c:	20001178 	.word	0x20001178
 8001e20:	20001174 	.word	0x20001174
 8001e24:	080089f8 	.word	0x080089f8
 8001e28:	08008a0c 	.word	0x08008a0c
 8001e2c:	08008a20 	.word	0x08008a20
 8001e30:	08008a34 	.word	0x08008a34
 8001e34:	08008a48 	.word	0x08008a48
 8001e38:	08008a5c 	.word	0x08008a5c
 8001e3c:	08008a70 	.word	0x08008a70
 8001e40:	08008a84 	.word	0x08008a84
 8001e44:	08008a98 	.word	0x08008a98
 8001e48:	08008aac 	.word	0x08008aac
 8001e4c:	08008ac0 	.word	0x08008ac0
 8001e50:	08008ad0 	.word	0x08008ad0
 8001e54:	08008ae4 	.word	0x08008ae4
 8001e58:	08008af8 	.word	0x08008af8
 8001e5c:	08008b0c 	.word	0x08008b0c
 8001e60:	08008b20 	.word	0x08008b20
 8001e64:	08008b30 	.word	0x08008b30
 8001e68:	08008b44 	.word	0x08008b44
 8001e6c:	08008b58 	.word	0x08008b58
 8001e70:	08008b6c 	.word	0x08008b6c
 8001e74:	08008b80 	.word	0x08008b80
 8001e78:	08008b90 	.word	0x08008b90
 8001e7c:	08008ba4 	.word	0x08008ba4
 8001e80:	08008bb8 	.word	0x08008bb8
 8001e84:	08008bcc 	.word	0x08008bcc
 8001e88:	08008be0 	.word	0x08008be0
 8001e8c:	cccccccd 	.word	0xcccccccd
 8001e90:	3feccccc 	.word	0x3feccccc
				} else {
					sprintf(MSG, "Volt/Div: 0 V");
 8001e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e98:	49aa      	ldr	r1, [pc, #680]	; (8002144 <main+0xcf4>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 f8dc 	bl	8007058 <siprintf>
				}
			}

			lcd_put_cur(1, 0);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7ff f90b 	bl	80010be <lcd_put_cur>
			lcd_send_string(MSG);
 8001ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f962 	bl	8001176 <lcd_send_string>
		}

		if (iStart1 == 1) {
 8001eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 80fc 	bne.w	80020b4 <main+0xc64>
			if (iSenoidal == 1 || iCuadrada == 1 || iLinea == 1 || iSierra == 1) {
 8001ebc:	4ba2      	ldr	r3, [pc, #648]	; (8002148 <main+0xcf8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00c      	beq.n	8001ede <main+0xa8e>
 8001ec4:	4ba1      	ldr	r3, [pc, #644]	; (800214c <main+0xcfc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d008      	beq.n	8001ede <main+0xa8e>
 8001ecc:	4ba0      	ldr	r3, [pc, #640]	; (8002150 <main+0xd00>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d004      	beq.n	8001ede <main+0xa8e>
 8001ed4:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <main+0xd04>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f040 80e2 	bne.w	80020a2 <main+0xc52>
				// Mostrar el valor de voltDiv en la LCD
				if (encoderValue == 1) {
 8001ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d106      	bne.n	8001ef4 <main+0xaa4>
					sprintf(MSG, "Time/Div: 0.1 ms  ");
 8001ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eea:	499b      	ldr	r1, [pc, #620]	; (8002158 <main+0xd08>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 f8b3 	bl	8007058 <siprintf>
 8001ef2:	e0d6      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 2) {
 8001ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d106      	bne.n	8001f0a <main+0xaba>
					sprintf(MSG, "Time/Div: 0.2 ms  ");
 8001efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f00:	4996      	ldr	r1, [pc, #600]	; (800215c <main+0xd0c>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 f8a8 	bl	8007058 <siprintf>
 8001f08:	e0cb      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 3) {
 8001f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d106      	bne.n	8001f20 <main+0xad0>
					sprintf(MSG, "Time/Div: 0.3 ms  ");
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	4992      	ldr	r1, [pc, #584]	; (8002160 <main+0xd10>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f005 f89d 	bl	8007058 <siprintf>
 8001f1e:	e0c0      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 4) {
 8001f20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d106      	bne.n	8001f36 <main+0xae6>
					sprintf(MSG, "Time/Div: 0.4 ms  ");
 8001f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2c:	498d      	ldr	r1, [pc, #564]	; (8002164 <main+0xd14>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f005 f892 	bl	8007058 <siprintf>
 8001f34:	e0b5      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 5) {
 8001f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d106      	bne.n	8001f4c <main+0xafc>
					sprintf(MSG, "Time/Div: 0.5 ms  ");
 8001f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f42:	4989      	ldr	r1, [pc, #548]	; (8002168 <main+0xd18>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 f887 	bl	8007058 <siprintf>
 8001f4a:	e0aa      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 6) {
 8001f4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d106      	bne.n	8001f62 <main+0xb12>
					sprintf(MSG, "Time/Div: 0.6 ms  ");
 8001f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f58:	4984      	ldr	r1, [pc, #528]	; (800216c <main+0xd1c>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 f87c 	bl	8007058 <siprintf>
 8001f60:	e09f      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 7) {
 8001f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f66:	2b07      	cmp	r3, #7
 8001f68:	d106      	bne.n	8001f78 <main+0xb28>
					sprintf(MSG, "Time/Div: 0.7 ms  ");
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	4980      	ldr	r1, [pc, #512]	; (8002170 <main+0xd20>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f005 f871 	bl	8007058 <siprintf>
 8001f76:	e094      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 8) {
 8001f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d106      	bne.n	8001f8e <main+0xb3e>
					sprintf(MSG, "Time/Div: 0.8 ms  ");
 8001f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f84:	497b      	ldr	r1, [pc, #492]	; (8002174 <main+0xd24>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f005 f866 	bl	8007058 <siprintf>
 8001f8c:	e089      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 9) {
 8001f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d106      	bne.n	8001fa4 <main+0xb54>
					sprintf(MSG, "Time/Div: 0.9 ms  ");
 8001f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9a:	4977      	ldr	r1, [pc, #476]	; (8002178 <main+0xd28>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 f85b 	bl	8007058 <siprintf>
 8001fa2:	e07e      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 10) {
 8001fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fa8:	2b0a      	cmp	r3, #10
 8001faa:	d106      	bne.n	8001fba <main+0xb6a>
					sprintf(MSG, "Time/Div: 1 ms  ");
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	4972      	ldr	r1, [pc, #456]	; (800217c <main+0xd2c>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f005 f850 	bl	8007058 <siprintf>
 8001fb8:	e073      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 11) {
 8001fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fbe:	2b0b      	cmp	r3, #11
 8001fc0:	d106      	bne.n	8001fd0 <main+0xb80>
					sprintf(MSG, "Time/Div: 1.1 ms  ");
 8001fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc6:	496e      	ldr	r1, [pc, #440]	; (8002180 <main+0xd30>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 f845 	bl	8007058 <siprintf>
 8001fce:	e068      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 12) {
 8001fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d106      	bne.n	8001fe6 <main+0xb96>
					sprintf(MSG, "Time/Div: 1.2 ms  ");
 8001fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fdc:	4969      	ldr	r1, [pc, #420]	; (8002184 <main+0xd34>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 f83a 	bl	8007058 <siprintf>
 8001fe4:	e05d      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 13) {
 8001fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fea:	2b0d      	cmp	r3, #13
 8001fec:	d106      	bne.n	8001ffc <main+0xbac>
					sprintf(MSG, "Time/Div: 1.3 ms  ");
 8001fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff2:	4965      	ldr	r1, [pc, #404]	; (8002188 <main+0xd38>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 f82f 	bl	8007058 <siprintf>
 8001ffa:	e052      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 14) {
 8001ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002000:	2b0e      	cmp	r3, #14
 8002002:	d106      	bne.n	8002012 <main+0xbc2>
					sprintf(MSG, "Time/Div: 1.4 ms  ");
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	4960      	ldr	r1, [pc, #384]	; (800218c <main+0xd3c>)
 800200a:	4618      	mov	r0, r3
 800200c:	f005 f824 	bl	8007058 <siprintf>
 8002010:	e047      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 15) {
 8002012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d106      	bne.n	8002028 <main+0xbd8>
					sprintf(MSG, "Time/Div: 1.5 ms  ");
 800201a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201e:	495c      	ldr	r1, [pc, #368]	; (8002190 <main+0xd40>)
 8002020:	4618      	mov	r0, r3
 8002022:	f005 f819 	bl	8007058 <siprintf>
 8002026:	e03c      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 16) {
 8002028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800202c:	2b10      	cmp	r3, #16
 800202e:	d106      	bne.n	800203e <main+0xbee>
					sprintf(MSG, "Time/Div: 1.6 ms  ");
 8002030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002034:	4957      	ldr	r1, [pc, #348]	; (8002194 <main+0xd44>)
 8002036:	4618      	mov	r0, r3
 8002038:	f005 f80e 	bl	8007058 <siprintf>
 800203c:	e031      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 17) {
 800203e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002042:	2b11      	cmp	r3, #17
 8002044:	d106      	bne.n	8002054 <main+0xc04>
					sprintf(MSG, "Time/Div: 1.7 ms  ");
 8002046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204a:	4953      	ldr	r1, [pc, #332]	; (8002198 <main+0xd48>)
 800204c:	4618      	mov	r0, r3
 800204e:	f005 f803 	bl	8007058 <siprintf>
 8002052:	e026      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 18) {
 8002054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002058:	2b12      	cmp	r3, #18
 800205a:	d106      	bne.n	800206a <main+0xc1a>
					sprintf(MSG, "Time/Div: 1.8 ms  ");
 800205c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002060:	494e      	ldr	r1, [pc, #312]	; (800219c <main+0xd4c>)
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fff8 	bl	8007058 <siprintf>
 8002068:	e01b      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 19) {
 800206a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800206e:	2b13      	cmp	r3, #19
 8002070:	d106      	bne.n	8002080 <main+0xc30>
					sprintf(MSG, "Time/Div: 1.9 ms  ");
 8002072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002076:	494a      	ldr	r1, [pc, #296]	; (80021a0 <main+0xd50>)
 8002078:	4618      	mov	r0, r3
 800207a:	f004 ffed 	bl	8007058 <siprintf>
 800207e:	e010      	b.n	80020a2 <main+0xc52>
				} else if (encoderValue == 20) {
 8002080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002084:	2b14      	cmp	r3, #20
 8002086:	d106      	bne.n	8002096 <main+0xc46>
					sprintf(MSG, "Time/Div: 2 ms  ");
 8002088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208c:	4945      	ldr	r1, [pc, #276]	; (80021a4 <main+0xd54>)
 800208e:	4618      	mov	r0, r3
 8002090:	f004 ffe2 	bl	8007058 <siprintf>
 8002094:	e005      	b.n	80020a2 <main+0xc52>
				} else {
					sprintf(MSG, "Time/Div: 0 ms");
 8002096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209a:	4943      	ldr	r1, [pc, #268]	; (80021a8 <main+0xd58>)
 800209c:	4618      	mov	r0, r3
 800209e:	f004 ffdb 	bl	8007058 <siprintf>
				}
			}
			lcd_put_cur(1, 0);
 80020a2:	2100      	movs	r1, #0
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7ff f80a 	bl	80010be <lcd_put_cur>
					lcd_send_string(MSG);
 80020aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f861 	bl	8001176 <lcd_send_string>

				}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET
 80020b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020bc:	f001 ffb4 	bl	8004028 <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d130      	bne.n	8002128 <main+0xcd8>
				&& pushButtonPressed == 0) {
 80020c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d12c      	bne.n	8002128 <main+0xcd8>
			pushButtonPressed = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

			// Incrementar el contador de toques del botón
			touchCount++;
 80020d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020d8:	3301      	adds	r3, #1
 80020da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			if (touchCount == 1) {
 80020de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10c      	bne.n	8002100 <main+0xcb0>
				lcd_clear();
 80020e6:	f7fe ffd3 	bl	8001090 <lcd_clear>
				lcd_put_cur(0, 14);
 80020ea:	210e      	movs	r1, #14
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe ffe6 	bl	80010be <lcd_put_cur>
				lcd_send_string("1"); // Mostrar "1" en la posición (1,4) de la LCD
 80020f2:	482e      	ldr	r0, [pc, #184]	; (80021ac <main+0xd5c>)
 80020f4:	f7ff f83f 	bl	8001176 <lcd_send_string>
				iStart1 = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			if (touchCount == 1) {
 80020fe:	e059      	b.n	80021b4 <main+0xd64>
			} else if (touchCount == 2) {
 8002100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002104:	2b02      	cmp	r3, #2
 8002106:	d155      	bne.n	80021b4 <main+0xd64>
				lcd_clear();
 8002108:	f7fe ffc2 	bl	8001090 <lcd_clear>
				lcd_put_cur(0, 14);
 800210c:	210e      	movs	r1, #14
 800210e:	2000      	movs	r0, #0
 8002110:	f7fe ffd5 	bl	80010be <lcd_put_cur>
				lcd_send_string("2"); // Mostrar "2" en la posición (1,4) de la LCD
 8002114:	4826      	ldr	r0, [pc, #152]	; (80021b0 <main+0xd60>)
 8002116:	f7ff f82e 	bl	8001176 <lcd_send_string>
				touchCount = 0;  // Reiniciar touchCount a 0
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				iStart1 = 1;
 8002120:	2301      	movs	r3, #1
 8002122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			if (touchCount == 1) {
 8002126:	e045      	b.n	80021b4 <main+0xd64>
			}
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8002128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f001 ff7a 	bl	8004028 <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	d13d      	bne.n	80021b6 <main+0xd66>
			pushButtonPressed = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002140:	e039      	b.n	80021b6 <main+0xd66>
 8002142:	bf00      	nop
 8002144:	08008bf0 	.word	0x08008bf0
 8002148:	2000116c 	.word	0x2000116c
 800214c:	20001170 	.word	0x20001170
 8002150:	20001178 	.word	0x20001178
 8002154:	20001174 	.word	0x20001174
 8002158:	08008c00 	.word	0x08008c00
 800215c:	08008c14 	.word	0x08008c14
 8002160:	08008c28 	.word	0x08008c28
 8002164:	08008c3c 	.word	0x08008c3c
 8002168:	08008c50 	.word	0x08008c50
 800216c:	08008c64 	.word	0x08008c64
 8002170:	08008c78 	.word	0x08008c78
 8002174:	08008c8c 	.word	0x08008c8c
 8002178:	08008ca0 	.word	0x08008ca0
 800217c:	08008cb4 	.word	0x08008cb4
 8002180:	08008cc8 	.word	0x08008cc8
 8002184:	08008cdc 	.word	0x08008cdc
 8002188:	08008cf0 	.word	0x08008cf0
 800218c:	08008d04 	.word	0x08008d04
 8002190:	08008d18 	.word	0x08008d18
 8002194:	08008d2c 	.word	0x08008d2c
 8002198:	08008d40 	.word	0x08008d40
 800219c:	08008d54 	.word	0x08008d54
 80021a0:	08008d68 	.word	0x08008d68
 80021a4:	08008d7c 	.word	0x08008d7c
 80021a8:	08008d90 	.word	0x08008d90
 80021ac:	08008da0 	.word	0x08008da0
 80021b0:	08008da4 	.word	0x08008da4
			if (touchCount == 1) {
 80021b4:	bf00      	nop
		}


		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80021b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ba:	4849      	ldr	r0, [pc, #292]	; (80022e0 <main+0xe90>)
 80021bc:	f001 ff34 	bl	8004028 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d17f      	bne.n	80022c6 <main+0xe76>
		    // El botón está presionado

		    // Incrementar el contador de pulsaciones
		    buttonPressCount++;
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <main+0xe94>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <main+0xe94>)
 80021ce:	6013      	str	r3, [r2, #0]

			// Cambiar el estado de acuerdo al número de pulsaciones
			if (buttonPressCount == 1) {
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <main+0xe94>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d115      	bne.n	8002204 <main+0xdb4>
				max_clear();
 80021d8:	f000 fa74 	bl	80026c4 <max_clear>
				iSenoidal = 1;
 80021dc:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <main+0xe98>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
				iCuadrada = 0;
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <main+0xe9c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
				iSierra = 0;
 80021e8:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <main+0xea0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
				iLinea = 0;
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <main+0xea4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
				lcd_put_cur(0, 15);
 80021f4:	210f      	movs	r1, #15
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe ff61 	bl	80010be <lcd_put_cur>
				lcd_send_string("S"); // Mostrar S
 80021fc:	483e      	ldr	r0, [pc, #248]	; (80022f8 <main+0xea8>)
 80021fe:	f7fe ffba 	bl	8001176 <lcd_send_string>
 8002202:	e060      	b.n	80022c6 <main+0xe76>

			} else if (buttonPressCount == 2) {
 8002204:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <main+0xe94>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d115      	bne.n	8002238 <main+0xde8>
				max_clear();
 800220c:	f000 fa5a 	bl	80026c4 <max_clear>
				iSenoidal = 0;
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <main+0xe98>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
				iCuadrada = 1;
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <main+0xe9c>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
				iSierra = 0;
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <main+0xea0>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
				iLinea = 0;
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <main+0xea4>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
				lcd_put_cur(0, 15);
 8002228:	210f      	movs	r1, #15
 800222a:	2000      	movs	r0, #0
 800222c:	f7fe ff47 	bl	80010be <lcd_put_cur>
				lcd_send_string("C"); // Mostrar C
 8002230:	4832      	ldr	r0, [pc, #200]	; (80022fc <main+0xeac>)
 8002232:	f7fe ffa0 	bl	8001176 <lcd_send_string>
 8002236:	e046      	b.n	80022c6 <main+0xe76>
			} else if (buttonPressCount == 3) {
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <main+0xe94>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d115      	bne.n	800226c <main+0xe1c>
				max_clear();
 8002240:	f000 fa40 	bl	80026c4 <max_clear>
				iSenoidal = 0;
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <main+0xe98>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
				iCuadrada = 0;
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <main+0xe9c>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
				iSierra = 1;
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <main+0xea0>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
				iLinea = 0;
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <main+0xea4>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
				lcd_put_cur(0, 15);
 800225c:	210f      	movs	r1, #15
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe ff2d 	bl	80010be <lcd_put_cur>
				lcd_send_string("D"); // Mostrar D
 8002264:	4826      	ldr	r0, [pc, #152]	; (8002300 <main+0xeb0>)
 8002266:	f7fe ff86 	bl	8001176 <lcd_send_string>
 800226a:	e02c      	b.n	80022c6 <main+0xe76>
			} else if (buttonPressCount == 4) {
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <main+0xe94>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d115      	bne.n	80022a0 <main+0xe50>
				max_clear();
 8002274:	f000 fa26 	bl	80026c4 <max_clear>
				iSenoidal = 0;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <main+0xe98>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
				iCuadrada = 0;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <main+0xe9c>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
				iSierra = 0;
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <main+0xea0>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
				iLinea = 1;
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <main+0xea4>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
				lcd_put_cur(0, 15);
 8002290:	210f      	movs	r1, #15
 8002292:	2000      	movs	r0, #0
 8002294:	f7fe ff13 	bl	80010be <lcd_put_cur>
				lcd_send_string("L"); // Mostrar L
 8002298:	481a      	ldr	r0, [pc, #104]	; (8002304 <main+0xeb4>)
 800229a:	f7fe ff6c 	bl	8001176 <lcd_send_string>
 800229e:	e012      	b.n	80022c6 <main+0xe76>
			} else if (buttonPressCount == 5) {
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <main+0xe94>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10e      	bne.n	80022c6 <main+0xe76>
				// Reiniciar el contador de pulsaciones y volver al estado inicial
				buttonPressCount = 1;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <main+0xe94>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
				iSenoidal = 1;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <main+0xe98>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
				iCuadrada = 0;
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <main+0xe9c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
				iSierra = 0;
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <main+0xea0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
				iLinea = 0;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <main+0xea4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
			}
		}

		previousEncoderValue = encoderValue;
 80022c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		previous_iStart1 = iStart1;
 80022ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		HAL_Delay(100);
 80022d6:	2064      	movs	r0, #100	; 0x64
 80022d8:	f000 fc94 	bl	8002c04 <HAL_Delay>
			    while (1) {
 80022dc:	f7ff b929 	b.w	8001532 <main+0xe2>
 80022e0:	48000800 	.word	0x48000800
 80022e4:	2000117c 	.word	0x2000117c
 80022e8:	2000116c 	.word	0x2000116c
 80022ec:	20001170 	.word	0x20001170
 80022f0:	20001174 	.word	0x20001174
 80022f4:	20001178 	.word	0x20001178
 80022f8:	08008da8 	.word	0x08008da8
 80022fc:	08008dac 	.word	0x08008dac
 8002300:	08008db0 	.word	0x08008db0
 8002304:	08008db4 	.word	0x08008db4

08002308 <c_wave_sine_>:





void c_wave_sine_(double voltDiv, double timeDiv) {
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002312:	ed87 1b00 	vstr	d1, [r7]
	for (int i = 0; i < NUM_PUNTOS; i++) {
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e047      	b.n	80023ac <c_wave_sine_+0xa4>
		// Calcular el desplazamiento de tiempo basado en el valor del encoder
		double timeShift = (double) i * (2 * PI / (NUM_PUNTOS * timeDiv));
 800231c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800231e:	f7fe f8f9 	bl	8000514 <__aeabi_i2d>
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <c_wave_sine_+0xc0>)
 800232c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002330:	f7fe f95a 	bl	80005e8 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	a121      	add	r1, pc, #132	; (adr r1, 80023c0 <c_wave_sine_+0xb8>)
 800233a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800233e:	f7fe fa7d 	bl	800083c <__aeabi_ddiv>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fe f94d 	bl	80005e8 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	e9c7 2306 	strd	r2, r3, [r7, #24]

		// Calcular el valor de la onda senoidal en el punto actual
		double value = (sin(timeShift) * voltDiv + voltDiv) * (4096 / 2);
 8002356:	ed97 0b06 	vldr	d0, [r7, #24]
 800235a:	f005 faed 	bl	8007938 <sin>
 800235e:	ec51 0b10 	vmov	r0, r1, d0
 8002362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002366:	f7fe f93f 	bl	80005e8 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002376:	f7fd ff81 	bl	800027c <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <c_wave_sine_+0xc4>)
 8002388:	f7fe f92e 	bl	80005e8 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	e9c7 2304 	strd	r2, r3, [r7, #16]

		// Almacenar el valor de la onda en el arreglo
		wave_val[i] = (uint32_t) value;
 8002394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002398:	f7fe fbe8 	bl	8000b6c <__aeabi_d2uiz>
 800239c:	4602      	mov	r2, r0
 800239e:	490c      	ldr	r1, [pc, #48]	; (80023d0 <c_wave_sine_+0xc8>)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NUM_PUNTOS; i++) {
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b2:	dbb3      	blt.n	800231c <c_wave_sine_+0x14>
	}
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdb0      	pop	{r4, r5, r7, pc}
 80023be:	bf00      	nop
 80023c0:	4d12d84a 	.word	0x4d12d84a
 80023c4:	401921fb 	.word	0x401921fb
 80023c8:	408f4000 	.word	0x408f4000
 80023cc:	40a00000 	.word	0x40a00000
 80023d0:	200001cc 	.word	0x200001cc

080023d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09c      	sub	sp, #112	; 0x70
 80023d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023de:	2228      	movs	r2, #40	; 0x28
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 fe30 	bl	8007048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f8:	463b      	mov	r3, r7
 80023fa:	2234      	movs	r2, #52	; 0x34
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 fe22 	bl	8007048 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002404:	2303      	movs	r3, #3
 8002406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002412:	2301      	movs	r3, #1
 8002414:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002416:	2310      	movs	r3, #16
 8002418:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800241a:	2302      	movs	r3, #2
 800241c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002422:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002424:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002428:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800242e:	4618      	mov	r0, r3
 8002430:	f002 fa56 	bl	80048e0 <HAL_RCC_OscConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800243a:	f000 f82a 	bl	8002492 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243e:	230f      	movs	r3, #15
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002442:	2302      	movs	r3, #2
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800244a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002454:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fa7e 	bl	800595c <HAL_RCC_ClockConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002466:	f000 f814 	bl	8002492 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 800246a:	23a0      	movs	r3, #160	; 0xa0
 800246c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8002472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002476:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002478:	463b      	mov	r3, r7
 800247a:	4618      	mov	r0, r3
 800247c:	f003 fca4 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002486:	f000 f804 	bl	8002492 <Error_Handler>
  }
}
 800248a:	bf00      	nop
 800248c:	3770      	adds	r7, #112	; 0x70
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002496:	b672      	cpsid	i
}
 8002498:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
  while (1)
 800249a:	e7fe      	b.n	800249a <Error_Handler+0x8>

0800249c <write_byte>:
};



void write_byte (uint8_t byte)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e019      	b.n	80024e0 <write_byte+0x44>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 80024ac:	2200      	movs	r2, #0
 80024ae:	2120      	movs	r1, #32
 80024b0:	480f      	ldr	r0, [pc, #60]	; (80024f0 <write_byte+0x54>)
 80024b2:	f001 fdd1 	bl	8004058 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c4:	480a      	ldr	r0, [pc, #40]	; (80024f0 <write_byte+0x54>)
 80024c6:	f001 fdc7 	bl	8004058 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 80024d0:	2201      	movs	r2, #1
 80024d2:	2120      	movs	r1, #32
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <write_byte+0x54>)
 80024d6:	f001 fdbf 	bl	8004058 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b07      	cmp	r3, #7
 80024e4:	dde2      	ble.n	80024ac <write_byte+0x10>
	}
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	48000800 	.word	0x48000800

080024f4 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	460a      	mov	r2, r1
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	4613      	mov	r3, r2
 8002502:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8002504:	2200      	movs	r2, #0
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	4810      	ldr	r0, [pc, #64]	; (800254c <write_max_cmd+0x58>)
 800250a:	f001 fda5 	bl	8004058 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e00a      	b.n	800252a <write_max_cmd+0x36>
	{
		write_byte (address);
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffc0 	bl	800249c <write_byte>
		write_byte (cmd); 
 800251c:	79bb      	ldrb	r3, [r7, #6]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffbc 	bl	800249c <write_byte>
	for (int i=0;i<num; i++)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	ddf1      	ble.n	8002514 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8002530:	2200      	movs	r2, #0
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <write_max_cmd+0x58>)
 8002536:	f001 fd8f 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 800253a:	2201      	movs	r2, #1
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	4803      	ldr	r0, [pc, #12]	; (800254c <write_max_cmd+0x58>)
 8002540:	f001 fd8a 	bl	8004058 <HAL_GPIO_WritePin>
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	48000800 	.word	0x48000800

08002550 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	460b      	mov	r3, r1
 800255c:	71bb      	strb	r3, [r7, #6]
 800255e:	4613      	mov	r3, r2
 8002560:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8002562:	797b      	ldrb	r3, [r7, #5]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <setled+0x34>
 8002568:	79bb      	ldrb	r3, [r7, #6]
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <setled+0xcc>)
 800256c:	5cd1      	ldrb	r1, [r2, r3]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2201      	movs	r2, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	79bb      	ldrb	r3, [r7, #6]
 800257a:	430a      	orrs	r2, r1
 800257c:	b2d1      	uxtb	r1, r2
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <setled+0xcc>)
 8002580:	54d1      	strb	r1, [r2, r3]
 8002582:	e00e      	b.n	80025a2 <setled+0x52>
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	4a25      	ldr	r2, [pc, #148]	; (800261c <setled+0xcc>)
 8002588:	5cd1      	ldrb	r1, [r2, r3]
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2201      	movs	r2, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	b2da      	uxtb	r2, r3
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	400a      	ands	r2, r1
 800259c:	b2d1      	uxtb	r1, r2
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <setled+0xcc>)
 80025a0:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	08db      	lsrs	r3, r3, #3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 80025b2:	2200      	movs	r2, #0
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	481a      	ldr	r0, [pc, #104]	; (8002620 <setled+0xd0>)
 80025b8:	f001 fd4e 	bl	8004058 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e01b      	b.n	80025fa <setled+0xaa>
	{
		if (i == (num-(n+1)))
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	425b      	negs	r3, r3
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d10d      	bne.n	80025e8 <setled+0x98>
		{
			write_byte (((c+1)));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff61 	bl	800249c <write_byte>
			write_byte (buffer[col]);
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	4a0f      	ldr	r2, [pc, #60]	; (800261c <setled+0xcc>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff5b 	bl	800249c <write_byte>
 80025e6:	e005      	b.n	80025f4 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff ff57 	bl	800249c <write_byte>
			write_byte (0);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff ff54 	bl	800249c <write_byte>
	for (int i=0; i<num; i++) 
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dde0      	ble.n	80025c2 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <setled+0xd0>)
 8002606:	f001 fd27 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 800260a:	2201      	movs	r2, #1
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	4804      	ldr	r0, [pc, #16]	; (8002620 <setled+0xd0>)
 8002610:	f001 fd22 	bl	8004058 <HAL_GPIO_WritePin>
}
 8002614:	bf00      	nop
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20001180 	.word	0x20001180
 8002620:	48000800 	.word	0x48000800

08002624 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	460a      	mov	r2, r1
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	4613      	mov	r3, r2
 8002632:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	08db      	lsrs	r3, r3, #3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e02d      	b.n	80026aa <setrow+0x86>
	{
		if (i == ((n)))
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d120      	bne.n	8002698 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	3307      	adds	r3, #7
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e015      	b.n	800268c <setrow+0x68>
			{
				bool b = value&0x80;
 8002660:	79bb      	ldrb	r3, [r7, #6]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	b2d1      	uxtb	r1, r2
 8002678:	7bba      	ldrb	r2, [r7, #14]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff68 	bl	8002550 <setled>
				value<<=1;
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3b01      	subs	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	429a      	cmp	r2, r3
 8002694:	dae4      	bge.n	8002660 <setrow+0x3c>
 8002696:	e005      	b.n	80026a4 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff feff 	bl	800249c <write_byte>
			write_byte (0);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff fefc 	bl	800249c <write_byte>
	for (int i=0; i<num; i++) 
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	ddce      	ble.n	800264e <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	4903      	ldr	r1, [pc, #12]	; (80026c0 <setrow+0x9c>)
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	54ca      	strb	r2, [r1, r3]
}
 80026b8:	bf00      	nop
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200011d0 	.word	0x200011d0

080026c4 <max_clear>:
}



void max_clear(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	e008      	b.n	80026e2 <max_clear+0x1e>
		setrow(i,0);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffa4 	bl	8002624 <setrow>
	for (int i=0; i<num*8; i++) 
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3301      	adds	r3, #1
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b07      	cmp	r3, #7
 80026e6:	ddf3      	ble.n	80026d0 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	e00c      	b.n	8002708 <max_clear+0x44>
	{
		buffer[i] = 0;
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <max_clear+0x54>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <max_clear+0x58>)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b4f      	cmp	r3, #79	; 0x4f
 800270c:	ddef      	ble.n	80026ee <max_clear+0x2a>
	}
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20001180 	.word	0x20001180
 800271c:	200011d0 	.word	0x200011d0

08002720 <max_init>:
}



void max_init (uint8_t brightness)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 800272a:	2100      	movs	r1, #0
 800272c:	2009      	movs	r0, #9
 800272e:	f7ff fee1 	bl	80024f4 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8002732:	2107      	movs	r1, #7
 8002734:	200b      	movs	r0, #11
 8002736:	f7ff fedd 	bl	80024f4 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800273a:	2101      	movs	r1, #1
 800273c:	200c      	movs	r0, #12
 800273e:	f7ff fed9 	bl	80024f4 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8002742:	2100      	movs	r1, #0
 8002744:	200f      	movs	r0, #15
 8002746:	f7ff fed5 	bl	80024f4 <write_max_cmd>
	
	max_clear ();
 800274a:	f7ff ffbb 	bl	80026c4 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4619      	mov	r1, r3
 8002752:	200a      	movs	r0, #10
 8002754:	f7ff fece 	bl	80024f4 <write_max_cmd>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_MspInit+0x44>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_MspInit+0x44>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6193      	str	r3, [r2, #24]
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_MspInit+0x44>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_MspInit+0x44>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_MspInit+0x44>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_MspInit+0x44>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002796:	2007      	movs	r0, #7
 8002798:	f000 ffca 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <NMI_Handler+0x4>

080027ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <MemManage_Handler+0x4>

080027ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <BusFault_Handler+0x4>

080027c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <UsageFault_Handler+0x4>

080027c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f4:	f000 f9e6 	bl	8002bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA1_Channel1_IRQHandler+0x10>)
 8002802:	f001 f9ae 	bl	8003b62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200000dc 	.word	0x200000dc

08002810 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <DMA1_Channel3_IRQHandler+0x10>)
 8002816:	f001 f9a4 	bl	8003b62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000134 	.word	0x20000134

08002824 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM2_IRQHandler+0x10>)
 800282a:	f003 fddf 	bl	80063ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20001224 	.word	0x20001224

08002838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <_sbrk+0x5c>)
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <_sbrk+0x60>)
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <_sbrk+0x64>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <_sbrk+0x64>)
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <_sbrk+0x68>)
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	429a      	cmp	r2, r3
 8002866:	d207      	bcs.n	8002878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002868:	f004 fbc4 	bl	8006ff4 <__errno>
 800286c:	4603      	mov	r3, r0
 800286e:	220c      	movs	r2, #12
 8002870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	e009      	b.n	800288c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <_sbrk+0x64>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <_sbrk+0x64>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	4a05      	ldr	r2, [pc, #20]	; (800289c <_sbrk+0x64>)
 8002888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288a:	68fb      	ldr	r3, [r7, #12]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20004000 	.word	0x20004000
 8002898:	00000400 	.word	0x00000400
 800289c:	20001220 	.word	0x20001220
 80028a0:	20001310 	.word	0x20001310

080028a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <SystemInit+0x20>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <SystemInit+0x20>)
 80028b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fbb6 	bl	8007048 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028dc:	463b      	mov	r3, r7
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <MX_TIM2_Init+0xa4>)
 80028e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028ee:	4b1f      	ldr	r3, [pc, #124]	; (800296c <MX_TIM2_Init+0xa4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <MX_TIM2_Init+0xa4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <MX_TIM2_Init+0xa4>)
 80028fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <MX_TIM2_Init+0xa4>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <MX_TIM2_Init+0xa4>)
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800290e:	2303      	movs	r3, #3
 8002910:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002912:	2302      	movs	r3, #2
 8002914:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002916:	2301      	movs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800291e:	230a      	movs	r3, #10
 8002920:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002922:	2302      	movs	r3, #2
 8002924:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002926:	2301      	movs	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <MX_TIM2_Init+0xa4>)
 800293a:	f003 fc23 	bl	8006184 <HAL_TIM_Encoder_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002944:	f7ff fda5 	bl	8002492 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002950:	463b      	mov	r3, r7
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_TIM2_Init+0xa4>)
 8002956:	f003 ff2f 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002960:	f7ff fd97 	bl	8002492 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	3730      	adds	r7, #48	; 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20001224 	.word	0x20001224

08002970 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d130      	bne.n	80029f4 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	61d3      	str	r3, [r2, #28]
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	6153      	str	r3, [r2, #20]
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80029c2:	2322      	movs	r3, #34	; 0x22
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029d2:	2301      	movs	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e0:	f001 f9b0 	bl	8003d44 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	201c      	movs	r0, #28
 80029ea:	f000 feac 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ee:	201c      	movs	r0, #28
 80029f0:	f000 fec5 	bl	800377e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000

08002a00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a06:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <MX_USART2_UART_Init+0x5c>)
 8002a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a0c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a26:	220c      	movs	r2, #12
 8002a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_USART2_UART_Init+0x58>)
 8002a44:	f003 ff3c 	bl	80068c0 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a4e:	f7ff fd20 	bl	8002492 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20001270 	.word	0x20001270
 8002a5c:	40004400 	.word	0x40004400

08002a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_UART_MspInit+0x7c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d128      	bne.n	8002ad4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_UART_MspInit+0x80>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_UART_MspInit+0x80>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_UART_MspInit+0x80>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_UART_MspInit+0x80>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <HAL_UART_MspInit+0x80>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	6153      	str	r3, [r2, #20]
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_UART_MspInit+0x80>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac2:	2307      	movs	r3, #7
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4619      	mov	r1, r3
 8002acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad0:	f001 f938 	bl	8003d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40004400 	.word	0x40004400
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae8:	f7ff fedc 	bl	80028a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aee:	490d      	ldr	r1, [pc, #52]	; (8002b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <LoopForever+0xe>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af4:	e002      	b.n	8002afc <LoopCopyDataInit>

08002af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afa:	3304      	adds	r3, #4

08002afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b00:	d3f9      	bcc.n	8002af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b04:	4c0a      	ldr	r4, [pc, #40]	; (8002b30 <LoopForever+0x16>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b08:	e001      	b.n	8002b0e <LoopFillZerobss>

08002b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b0c:	3204      	adds	r2, #4

08002b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b10:	d3fb      	bcc.n	8002b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b12:	f004 fa75 	bl	8007000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b16:	f7fe fc9b 	bl	8001450 <main>

08002b1a <LoopForever>:

LoopForever:
    b LoopForever
 8002b1a:	e7fe      	b.n	8002b1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b1c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b28:	08009030 	.word	0x08009030
  ldr r2, =_sbss
 8002b2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b30:	2000130c 	.word	0x2000130c

08002b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b34:	e7fe      	b.n	8002b34 <ADC1_IRQHandler>
	...

08002b38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_Init+0x28>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_Init+0x28>)
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 fdf1 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f808 	bl	8002b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b54:	f7ff fe04 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000

08002b64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_InitTick+0x54>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x58>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fe09 	bl	800379a <HAL_SYSTICK_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00e      	b.n	8002bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b0f      	cmp	r3, #15
 8002b96:	d80a      	bhi.n	8002bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f000 fdd1 	bl	8003746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_InitTick+0x5c>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e000      	b.n	8002bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000008 	.word	0x20000008
 8002be8:	200012f8 	.word	0x200012f8

08002bec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return uwTick;  
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200012f8 	.word	0x200012f8

08002c04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff ffee 	bl	8002bec <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d005      	beq.n	8002c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_Delay+0x44>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c2a:	bf00      	nop
 8002c2c:	f7ff ffde 	bl	8002bec <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8f7      	bhi.n	8002c2c <HAL_Delay+0x28>
  {
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b09a      	sub	sp, #104	; 0x68
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e169      	b.n	8002f40 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d176      	bne.n	8002d6c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d152      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fd ffdf 	bl	8000c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d13b      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fc05 	bl	80034c4 <ADC_Disable>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12f      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
 8002ccc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12b      	bne.n	8002d2c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d06:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d08:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <HAL_ADC_Init+0x2fc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a8f      	ldr	r2, [pc, #572]	; (8002f4c <HAL_ADC_Init+0x300>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9a      	lsrs	r2, r3, #18
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d1e:	e002      	b.n	8002d26 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d48:	d110      	bne.n	8002d6c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f023 0312 	bic.w	r3, r3, #18
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 80d6 	bne.w	8002f26 <HAL_ADC_Init+0x2da>
 8002d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80d1 	bne.w	8002f26 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80c9 	bne.w	8002f26 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d9c:	f043 0202 	orr.w	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_ADC_Init+0x304>)
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_ADC_Init+0x180>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_Init+0x180>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_ADC_Init+0x182>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11c      	bne.n	8002e0c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_ADC_Init+0x1a8>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_Init+0x1a8>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_Init+0x1aa>
 8002df4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7e5b      	ldrb	r3, [r3, #25]
 8002e10:	035b      	lsls	r3, r3, #13
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e16:	2a01      	cmp	r2, #1
 8002e18:	d002      	beq.n	8002e20 <HAL_ADC_Init+0x1d4>
 8002e1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_Init+0x1d6>
 8002e20:	2200      	movs	r2, #0
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e32:	4313      	orrs	r3, r2
 8002e34:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d11b      	bne.n	8002e78 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e5b      	ldrb	r3, [r3, #25]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	045a      	lsls	r2, r3, #17
 8002e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5a:	e00d      	b.n	8002e78 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d114      	bne.n	8002ec8 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7e1b      	ldrb	r3, [r3, #24]
 8002eb6:	039a      	lsls	r2, r3, #14
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <HAL_ADC_Init+0x308>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f023 010f 	bic.w	r1, r3, #15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	1e5a      	subs	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
 8002efc:	e007      	b.n	8002f0e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 020f 	bic.w	r2, r2, #15
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f023 0303 	bic.w	r3, r3, #3
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
 8002f24:	e00a      	b.n	8002f3c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f023 0312 	bic.w	r3, r3, #18
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3768      	adds	r7, #104	; 0x68
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	50000300 	.word	0x50000300
 8002f54:	fff0c007 	.word	0xfff0c007

08002f58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b09b      	sub	sp, #108	; 0x6c
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x22>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e299      	b.n	80034ae <HAL_ADC_ConfigChannel+0x556>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 827d 	bne.w	800348c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d81c      	bhi.n	8002fd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	461a      	mov	r2, r3
 8002fae:	231f      	movs	r3, #31
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4019      	ands	r1, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd2:	e063      	b.n	800309c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	d81e      	bhi.n	800301a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	3b1e      	subs	r3, #30
 8002ff0:	221f      	movs	r2, #31
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	4019      	ands	r1, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	3b1e      	subs	r3, #30
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	635a      	str	r2, [r3, #52]	; 0x34
 8003018:	e040      	b.n	800309c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b0e      	cmp	r3, #14
 8003020:	d81e      	bhi.n	8003060 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	3b3c      	subs	r3, #60	; 0x3c
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	4019      	ands	r1, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	3b3c      	subs	r3, #60	; 0x3c
 8003052:	fa00 f203 	lsl.w	r2, r0, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
 800305e:	e01d      	b.n	800309c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	3b5a      	subs	r3, #90	; 0x5a
 8003074:	221f      	movs	r2, #31
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	4019      	ands	r1, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	3b5a      	subs	r3, #90	; 0x5a
 8003090:	fa00 f203 	lsl.w	r2, r0, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80e5 	bne.w	8003276 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d91c      	bls.n	80030ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6999      	ldr	r1, [r3, #24]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	2207      	movs	r2, #7
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4019      	ands	r1, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6898      	ldr	r0, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	3b1e      	subs	r3, #30
 80030e0:	fa00 f203 	lsl.w	r2, r0, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
 80030ec:	e019      	b.n	8003122 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6959      	ldr	r1, [r3, #20]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	2207      	movs	r2, #7
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	4019      	ands	r1, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6898      	ldr	r0, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	fa00 f203 	lsl.w	r2, r0, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	3b01      	subs	r3, #1
 8003140:	2b03      	cmp	r3, #3
 8003142:	d84f      	bhi.n	80031e4 <HAL_ADC_ConfigChannel+0x28c>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_ADC_ConfigChannel+0x1f4>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	0800315d 	.word	0x0800315d
 8003150:	0800317f 	.word	0x0800317f
 8003154:	080031a1 	.word	0x080031a1
 8003158:	080031c3 	.word	0x080031c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003162:	4b99      	ldr	r3, [pc, #612]	; (80033c8 <HAL_ADC_ConfigChannel+0x470>)
 8003164:	4013      	ands	r3, r2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	0691      	lsls	r1, r2, #26
 800316c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800316e:	430a      	orrs	r2, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800317a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800317c:	e07e      	b.n	800327c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003184:	4b90      	ldr	r3, [pc, #576]	; (80033c8 <HAL_ADC_ConfigChannel+0x470>)
 8003186:	4013      	ands	r3, r2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	0691      	lsls	r1, r2, #26
 800318e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003190:	430a      	orrs	r2, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800319c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800319e:	e06d      	b.n	800327c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_ADC_ConfigChannel+0x470>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	0691      	lsls	r1, r2, #26
 80031b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b2:	430a      	orrs	r2, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031c0:	e05c      	b.n	800327c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031c8:	4b7f      	ldr	r3, [pc, #508]	; (80033c8 <HAL_ADC_ConfigChannel+0x470>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	0691      	lsls	r1, r2, #26
 80031d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031d4:	430a      	orrs	r2, r1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031e2:	e04b      	b.n	800327c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	069b      	lsls	r3, r3, #26
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003206:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800322a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	429a      	cmp	r2, r3
 800323e:	d107      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800324e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	069b      	lsls	r3, r3, #26
 8003260:	429a      	cmp	r2, r3
 8003262:	d10a      	bne.n	800327a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003272:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003274:	e001      	b.n	800327a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_ADC_ConfigChannel+0x324>
      break;
 800327a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <HAL_ADC_ConfigChannel+0x344>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x344>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_ADC_ConfigChannel+0x346>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80ff 	bne.w	80034a2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d00f      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80032ca:	e049      	b.n	8003360 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d91c      	bls.n	8003328 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6999      	ldr	r1, [r3, #24]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	3b1b      	subs	r3, #27
 8003300:	2207      	movs	r2, #7
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	4019      	ands	r1, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6898      	ldr	r0, [r3, #8]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	3b1b      	subs	r3, #27
 800331a:	fa00 f203 	lsl.w	r2, r0, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	619a      	str	r2, [r3, #24]
 8003326:	e01b      	b.n	8003360 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6959      	ldr	r1, [r3, #20]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	2207      	movs	r2, #7
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	4019      	ands	r1, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6898      	ldr	r0, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	fa00 f203 	lsl.w	r2, r0, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_ADC_ConfigChannel+0x474>)
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d105      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800336c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d014      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800337c:	2b11      	cmp	r3, #17
 800337e:	d105      	bne.n	800338c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003390:	2b12      	cmp	r3, #18
 8003392:	f040 8086 	bne.w	80034a2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d17f      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x478>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x478>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e005      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x47a>
 80033c6:	bf00      	nop
 80033c8:	83fff000 	.word	0x83fff000
 80033cc:	50000300 	.word	0x50000300
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d150      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x4a0>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x4a0>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_ADC_ConfigChannel+0x4a2>
 80033f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d13c      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d11d      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x4ea>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340e:	d118      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_ADC_ConfigChannel+0x564>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <HAL_ADC_ConfigChannel+0x568>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0c9a      	lsrs	r2, r3, #18
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003432:	e002      	b.n	800343a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3b01      	subs	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f9      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003440:	e02e      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b11      	cmp	r3, #17
 8003448:	d10b      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x50a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003452:	d106      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800345c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003460:	e01e      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b12      	cmp	r3, #18
 8003468:	d11a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003476:	e013      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800348a:	e00a      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800349e:	e000      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	376c      	adds	r7, #108	; 0x6c
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d108      	bne.n	80034f0 <ADC_Disable+0x2c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <ADC_Disable+0x2c>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <ADC_Disable+0x2e>
 80034f0:	2300      	movs	r3, #0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d047      	beq.n	8003586 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030d 	and.w	r3, r3, #13
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10f      	bne.n	8003524 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0202 	orr.w	r2, r2, #2
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2203      	movs	r2, #3
 800351a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800351c:	f7ff fb66 	bl	8002bec <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003522:	e029      	b.n	8003578 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f043 0210 	orr.w	r2, r3, #16
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e023      	b.n	8003588 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003540:	f7ff fb54 	bl	8002bec <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d914      	bls.n	8003578 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10d      	bne.n	8003578 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0210 	orr.w	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d0dc      	beq.n	8003540 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ac:	4013      	ands	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <__NVIC_GetPriorityGrouping+0x18>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0307 	and.w	r3, r3, #7
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	2b00      	cmp	r3, #0
 8003604:	db0b      	blt.n	800361e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4907      	ldr	r1, [pc, #28]	; (800362c <__NVIC_EnableIRQ+0x38>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2001      	movs	r0, #1
 8003616:	fa00 f202 	lsl.w	r2, r0, r2
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fc:	d301      	bcc.n	8003702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <SysTick_Config+0x40>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370a:	210f      	movs	r1, #15
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f7ff ff8e 	bl	8003630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <SysTick_Config+0x40>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff29 	bl	8003590 <__NVIC_SetPriorityGrouping>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003758:	f7ff ff3e 	bl	80035d8 <__NVIC_GetPriorityGrouping>
 800375c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff8e 	bl	8003684 <NVIC_EncodePriority>
 8003768:	4602      	mov	r2, r0
 800376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff5d 	bl	8003630 <__NVIC_SetPriority>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff31 	bl	80035f4 <__NVIC_EnableIRQ>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ffa2 	bl	80036ec <SysTick_Config>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e014      	b.n	80037ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd fad7 	bl	8000d88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	795b      	ldrb	r3, [r3, #5]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_DAC_Start_DMA+0x1e>
 800384e:	2302      	movs	r3, #2
 8003850:	e053      	b.n	80038fa <HAL_DAC_Start_DMA+0xc6>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2202      	movs	r2, #2
 800385c:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4a28      	ldr	r2, [pc, #160]	; (8003904 <HAL_DAC_Start_DMA+0xd0>)
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4a27      	ldr	r2, [pc, #156]	; (8003908 <HAL_DAC_Start_DMA+0xd4>)
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <HAL_DAC_Start_DMA+0xd8>)
 8003874:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003884:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d013      	beq.n	80038b4 <HAL_DAC_Start_DMA+0x80>
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d815      	bhi.n	80038be <HAL_DAC_Start_DMA+0x8a>
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_DAC_Start_DMA+0x6c>
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d005      	beq.n	80038aa <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 800389e:	e00e      	b.n	80038be <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	617b      	str	r3, [r7, #20]
      break;
 80038a8:	e00a      	b.n	80038c0 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	617b      	str	r3, [r7, #20]
      break;
 80038b2:	e005      	b.n	80038c0 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3310      	adds	r3, #16
 80038ba:	617b      	str	r3, [r7, #20]
      break;
 80038bc:	e000      	b.n	80038c0 <HAL_DAC_Start_DMA+0x8c>
      break;
 80038be:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ce:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6898      	ldr	r0, [r3, #8]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	f000 f8e3 	bl	8003aa4 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	080039ab 	.word	0x080039ab
 8003908:	080039cd 	.word	0x080039cd
 800390c:	080039e9 	.word	0x080039e9

08003910 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	795b      	ldrb	r3, [r3, #5]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_DAC_ConfigChannel+0x20>
 800392c:	2302      	movs	r3, #2
 800392e:	e036      	b.n	800399e <HAL_DAC_ConfigChannel+0x8e>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2202      	movs	r2, #2
 800393a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003944:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	22c0      	movs	r2, #192	; 0xc0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	400a      	ands	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff ff1c 	bl	80037f6 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	711a      	strb	r2, [r3, #4]
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff15 	bl	800380a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ff0b 	bl	800381e <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	711a      	strb	r2, [r3, #4]
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e037      	b.n	8003a9c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f940 	bl	8003d04 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}  
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Start_IT+0x20>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e04a      	b.n	8003b5a <HAL_DMA_Start_IT+0xb6>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d13a      	bne.n	8003b4c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f8d4 	bl	8003ca8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 020e 	orr.w	r2, r2, #14
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e00f      	b.n	8003b3a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 020a 	orr.w	r2, r2, #10
 8003b28:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0204 	bic.w	r2, r2, #4
 8003b38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e005      	b.n	8003b58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2204      	movs	r2, #4
 8003b80:	409a      	lsls	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d024      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x72>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01f      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d107      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0204 	bic.w	r2, r2, #4
 8003bb0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2104      	movs	r1, #4
 8003bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d06a      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bd2:	e065      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2202      	movs	r2, #2
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02c      	beq.n	8003c3e <HAL_DMA_IRQHandler+0xdc>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d027      	beq.n	8003c3e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 020a 	bic.w	r2, r2, #10
 8003c0a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c22:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d035      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c3c:	e030      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2208      	movs	r2, #8
 8003c44:	409a      	lsls	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d028      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 020e 	bic.w	r2, r2, #14
 8003c66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f202 	lsl.w	r2, r1, r2
 8003c76:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
    }
  }
}  
 8003c9e:	e7ff      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x13e>
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d108      	bne.n	8003ce8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ce6:	e007      	b.n	8003cf8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <DMA_CalcBaseAndBitshift+0x34>)
 8003d14:	4413      	add	r3, r2
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <DMA_CalcBaseAndBitshift+0x38>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <DMA_CalcBaseAndBitshift+0x3c>)
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	bffdfff8 	.word	0xbffdfff8
 8003d3c:	cccccccd 	.word	0xcccccccd
 8003d40:	40020000 	.word	0x40020000

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d52:	e14e      	b.n	8003ff2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8140 	beq.w	8003fec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d005      	beq.n	8003d84 <HAL_GPIO_Init+0x40>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d130      	bne.n	8003de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dba:	2201      	movs	r2, #1
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0201 	and.w	r2, r3, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d017      	beq.n	8003e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d123      	bne.n	8003e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	08da      	lsrs	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3208      	adds	r2, #8
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 809a 	beq.w	8003fec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb8:	4b55      	ldr	r3, [pc, #340]	; (8004010 <HAL_GPIO_Init+0x2cc>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	4a54      	ldr	r2, [pc, #336]	; (8004010 <HAL_GPIO_Init+0x2cc>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6193      	str	r3, [r2, #24]
 8003ec4:	4b52      	ldr	r3, [pc, #328]	; (8004010 <HAL_GPIO_Init+0x2cc>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed0:	4a50      	ldr	r2, [pc, #320]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003efa:	d013      	beq.n	8003f24 <HAL_GPIO_Init+0x1e0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a46      	ldr	r2, [pc, #280]	; (8004018 <HAL_GPIO_Init+0x2d4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00d      	beq.n	8003f20 <HAL_GPIO_Init+0x1dc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a45      	ldr	r2, [pc, #276]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <HAL_GPIO_Init+0x1d8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a44      	ldr	r2, [pc, #272]	; (8004020 <HAL_GPIO_Init+0x2dc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_GPIO_Init+0x1d4>
 8003f14:	2303      	movs	r3, #3
 8003f16:	e006      	b.n	8003f26 <HAL_GPIO_Init+0x1e2>
 8003f18:	2305      	movs	r3, #5
 8003f1a:	e004      	b.n	8003f26 <HAL_GPIO_Init+0x1e2>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e002      	b.n	8003f26 <HAL_GPIO_Init+0x1e2>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_GPIO_Init+0x1e2>
 8003f24:	2300      	movs	r3, #0
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	f002 0203 	and.w	r2, r2, #3
 8003f2c:	0092      	lsls	r2, r2, #2
 8003f2e:	4093      	lsls	r3, r2
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f36:	4937      	ldr	r1, [pc, #220]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f44:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f68:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f92:	4a24      	ldr	r2, [pc, #144]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc2:	4b18      	ldr	r3, [pc, #96]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f47f aea9 	bne.w	8003d54 <HAL_GPIO_Init+0x10>
  }
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40021000 	.word	0x40021000
 8004014:	40010000 	.word	0x40010000
 8004018:	48000400 	.word	0x48000400
 800401c:	48000800 	.word	0x48000800
 8004020:	48000c00 	.word	0x48000c00
 8004024:	40010400 	.word	0x40010400

08004028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e001      	b.n	800404a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
 8004064:	4613      	mov	r3, r2
 8004066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004068:	787b      	ldrb	r3, [r7, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004074:	e002      	b.n	800407c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e081      	b.n	800419e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd f8b6 	bl	8001220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	; 0x24
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	e006      	b.n	8004110 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800410e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d104      	bne.n	8004122 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004120:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004134:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004144:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69d9      	ldr	r1, [r3, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	461a      	mov	r2, r3
 80041b4:	460b      	mov	r3, r1
 80041b6:	817b      	strh	r3, [r7, #10]
 80041b8:	4613      	mov	r3, r2
 80041ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	f040 80da 	bne.w	800437e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_I2C_Master_Transmit+0x30>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0d3      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1d8>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041e0:	f7fe fd04 	bl	8002bec <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	2319      	movs	r3, #25
 80041ec:	2201      	movs	r2, #1
 80041ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f8f0 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0be      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2221      	movs	r2, #33	; 0x21
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2210      	movs	r2, #16
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	893a      	ldrh	r2, [r7, #8]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2bff      	cmp	r3, #255	; 0xff
 8004232:	d90e      	bls.n	8004252 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	22ff      	movs	r2, #255	; 0xff
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	b2da      	uxtb	r2, r3
 8004240:	8979      	ldrh	r1, [r7, #10]
 8004242:	4b51      	ldr	r3, [pc, #324]	; (8004388 <HAL_I2C_Master_Transmit+0x1e0>)
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa7e 	bl	800474c <I2C_TransferConfig>
 8004250:	e06c      	b.n	800432c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	b2da      	uxtb	r2, r3
 8004262:	8979      	ldrh	r1, [r7, #10]
 8004264:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_I2C_Master_Transmit+0x1e0>)
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fa6d 	bl	800474c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004272:	e05b      	b.n	800432c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	6a39      	ldr	r1, [r7, #32]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8fc 	bl	8004476 <I2C_WaitOnTXISFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e07b      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d034      	beq.n	800432c <HAL_I2C_Master_Transmit+0x184>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d130      	bne.n	800432c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f87f 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04d      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	d90e      	bls.n	800430c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	8979      	ldrh	r1, [r7, #10]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fa21 	bl	800474c <I2C_TransferConfig>
 800430a:	e00f      	b.n	800432c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	b2da      	uxtb	r2, r3
 800431c:	8979      	ldrh	r1, [r7, #10]
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa10 	bl	800474c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d19e      	bne.n	8004274 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	6a39      	ldr	r1, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8e2 	bl	8004504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e01a      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2220      	movs	r2, #32
 8004350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_I2C_Master_Transmit+0x1e4>)
 800435e:	400b      	ands	r3, r1
 8004360:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	80002000 	.word	0x80002000
 800438c:	fe00e800 	.word	0xfe00e800

08004390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d103      	bne.n	80043ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d007      	beq.n	80043cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	619a      	str	r2, [r3, #24]
  }
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e8:	e031      	b.n	800444e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d02d      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe fbfb 	bl	8002bec <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d122      	bne.n	800444e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	429a      	cmp	r2, r3
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	429a      	cmp	r2, r3
 8004424:	d113      	bne.n	800444e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00f      	b.n	800446e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	429a      	cmp	r2, r3
 800446a:	d0be      	beq.n	80043ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004482:	e033      	b.n	80044ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f87f 	bl	800458c <I2C_IsErrorOccurred>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e031      	b.n	80044fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d025      	beq.n	80044ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe fba4 	bl	8002bec <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11a      	bne.n	80044ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d013      	beq.n	80044ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d1c4      	bne.n	8004484 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004510:	e02f      	b.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f838 	bl	800458c <I2C_IsErrorOccurred>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e02d      	b.n	8004582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fe fb61 	bl	8002bec <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11a      	bne.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	d013      	beq.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e007      	b.n	8004582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b20      	cmp	r3, #32
 800457e:	d1c8      	bne.n	8004512 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d068      	beq.n	800468a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2210      	movs	r2, #16
 80045be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045c0:	e049      	b.n	8004656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d045      	beq.n	8004656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fe fb0f 	bl	8002bec <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <I2C_IsErrorOccurred+0x54>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d13a      	bne.n	8004656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004602:	d121      	bne.n	8004648 <I2C_IsErrorOccurred+0xbc>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460a:	d01d      	beq.n	8004648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	2b20      	cmp	r3, #32
 8004610:	d01a      	beq.n	8004648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004622:	f7fe fae3 	bl	8002bec <HAL_GetTick>
 8004626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004628:	e00e      	b.n	8004648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800462a:	f7fe fadf 	bl	8002bec <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b19      	cmp	r3, #25
 8004636:	d907      	bls.n	8004648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	f043 0320 	orr.w	r3, r3, #32
 800463e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004646:	e006      	b.n	8004656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b20      	cmp	r3, #32
 8004654:	d1e9      	bne.n	800462a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b20      	cmp	r3, #32
 8004662:	d003      	beq.n	800466c <I2C_IsErrorOccurred+0xe0>
 8004664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0aa      	beq.n	80045c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800466c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f043 0304 	orr.w	r3, r3, #4
 8004682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00b      	beq.n	80046b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f043 0308 	orr.w	r3, r3, #8
 80046c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80046f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01c      	beq.n	800473a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fe45 	bl	8004390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <I2C_IsErrorOccurred+0x1bc>)
 8004712:	400b      	ands	r3, r1
 8004714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	431a      	orrs	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800473a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	fe00e800 	.word	0xfe00e800

0800474c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	817b      	strh	r3, [r7, #10]
 800475a:	4613      	mov	r3, r2
 800475c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004764:	7a7b      	ldrb	r3, [r7, #9]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800476c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	4313      	orrs	r3, r2
 8004776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800477a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	0d5b      	lsrs	r3, r3, #21
 8004786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800478a:	4b08      	ldr	r3, [pc, #32]	; (80047ac <I2C_TransferConfig+0x60>)
 800478c:	430b      	orrs	r3, r1
 800478e:	43db      	mvns	r3, r3
 8004790:	ea02 0103 	and.w	r1, r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	03ff63ff 	.word	0x03ff63ff

080047b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d138      	bne.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e032      	b.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b20      	cmp	r3, #32
 800485a:	d139      	bne.n	80048d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004866:	2302      	movs	r3, #2
 8004868:	e033      	b.n	80048d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2224      	movs	r2, #36	; 0x24
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f001 b823 	b.w	800594c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 817d 	beq.w	8004c16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800491c:	4bbc      	ldr	r3, [pc, #752]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b04      	cmp	r3, #4
 8004926:	d00c      	beq.n	8004942 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004928:	4bb9      	ldr	r3, [pc, #740]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	d15c      	bne.n	80049ee <HAL_RCC_OscConfig+0x10e>
 8004934:	4bb6      	ldr	r3, [pc, #728]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004940:	d155      	bne.n	80049ee <HAL_RCC_OscConfig+0x10e>
 8004942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004946:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004956:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <HAL_RCC_OscConfig+0x94>
 800496e:	4ba8      	ldr	r3, [pc, #672]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e015      	b.n	80049a0 <HAL_RCC_OscConfig+0xc0>
 8004974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004978:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800498c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004990:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800499c:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80049ac:	fa92 f2a2 	rbit	r2, r2
 80049b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80049b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80049b8:	fab2 f282 	clz	r2, r2
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	f042 0220 	orr.w	r2, r2, #32
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f002 021f 	and.w	r2, r2, #31
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f202 	lsl.w	r2, r1, r2
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 811f 	beq.w	8004c14 <HAL_RCC_OscConfig+0x334>
 80049d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 8116 	bne.w	8004c14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f000 bfaf 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fe:	d106      	bne.n	8004a0e <HAL_RCC_OscConfig+0x12e>
 8004a00:	4b83      	ldr	r3, [pc, #524]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a82      	ldr	r2, [pc, #520]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e036      	b.n	8004a7c <HAL_RCC_OscConfig+0x19c>
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x158>
 8004a1e:	4b7c      	ldr	r3, [pc, #496]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7b      	ldr	r2, [pc, #492]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b79      	ldr	r3, [pc, #484]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a78      	ldr	r2, [pc, #480]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e021      	b.n	8004a7c <HAL_RCC_OscConfig+0x19c>
 8004a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x184>
 8004a4a:	4b71      	ldr	r3, [pc, #452]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a6d      	ldr	r2, [pc, #436]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0x19c>
 8004a64:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a69      	ldr	r2, [pc, #420]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a66      	ldr	r2, [pc, #408]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a7c:	4b64      	ldr	r3, [pc, #400]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f023 020f 	bic.w	r2, r3, #15
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	495f      	ldr	r1, [pc, #380]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d059      	beq.n	8004b5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fe f8a1 	bl	8002bec <HAL_GetTick>
 8004aaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe f89c 	bl	8002bec <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	; 0x64
 8004abe:	d902      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	f000 bf43 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
 8004ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004ada:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d102      	bne.n	8004af8 <HAL_RCC_OscConfig+0x218>
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	e015      	b.n	8004b24 <HAL_RCC_OscConfig+0x244>
 8004af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004afc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b04:	fa93 f3a3 	rbit	r3, r3
 8004b08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b20:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b30:	fa92 f2a2 	rbit	r2, r2
 8004b34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b3c:	fab2 f282 	clz	r2, r2
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	f042 0220 	orr.w	r2, r2, #32
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	f002 021f 	and.w	r2, r2, #31
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ab      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1d0>
 8004b58:	e05d      	b.n	8004c16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5a:	f7fe f847 	bl	8002bec <HAL_GetTick>
 8004b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fe f842 	bl	8002bec <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	; 0x64
 8004b72:	d902      	bls.n	8004b7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	f000 bee9 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
 8004b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004b8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x2cc>
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	e015      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2f8>
 8004bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004bc8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_OscConfig+0x330>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bdc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004be0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004be4:	fa92 f2a2 	rbit	r2, r2
 8004be8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004bec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f042 0220 	orr.w	r2, r2, #32
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	f002 021f 	and.w	r2, r2, #31
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ab      	bne.n	8004b64 <HAL_RCC_OscConfig+0x284>
 8004c0c:	e003      	b.n	8004c16 <HAL_RCC_OscConfig+0x336>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 817d 	beq.w	8004f26 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c2c:	4ba6      	ldr	r3, [pc, #664]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c38:	4ba3      	ldr	r3, [pc, #652]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d172      	bne.n	8004d2a <HAL_RCC_OscConfig+0x44a>
 8004c44:	4ba0      	ldr	r3, [pc, #640]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d16c      	bne.n	8004d2a <HAL_RCC_OscConfig+0x44a>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	fab3 f383 	clz	r3, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d102      	bne.n	8004c80 <HAL_RCC_OscConfig+0x3a0>
 8004c7a:	4b93      	ldr	r3, [pc, #588]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	e013      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3c8>
 8004c80:	2302      	movs	r3, #2
 8004c82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c92:	2302      	movs	r3, #2
 8004c94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ca4:	4b88      	ldr	r3, [pc, #544]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004cae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004cb2:	fa92 f2a2 	rbit	r2, r2
 8004cb6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004cba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004cbe:	fab2 f282 	clz	r2, r2
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	f042 0220 	orr.w	r2, r2, #32
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	f002 021f 	and.w	r2, r2, #31
 8004cce:	2101      	movs	r1, #1
 8004cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x410>
 8004cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d002      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f000 be2e 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b75      	ldr	r3, [pc, #468]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	21f8      	movs	r1, #248	; 0xf8
 8004d06:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d0e:	fa91 f1a1 	rbit	r1, r1
 8004d12:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d1a:	fab1 f181 	clz	r1, r1
 8004d1e:	b2c9      	uxtb	r1, r1
 8004d20:	408b      	lsls	r3, r1
 8004d22:	4969      	ldr	r1, [pc, #420]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d28:	e0fd      	b.n	8004f26 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8088 	beq.w	8004e4c <HAL_RCC_OscConfig+0x56c>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	461a      	mov	r2, r3
 8004d64:	2301      	movs	r3, #1
 8004d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd ff40 	bl	8002bec <HAL_GetTick>
 8004d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d72:	f7fd ff3b 	bl	8002bec <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d902      	bls.n	8004d88 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	f000 bde2 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004d9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_RCC_OscConfig+0x4d8>
 8004db2:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	e013      	b.n	8004de0 <HAL_RCC_OscConfig+0x500>
 8004db8:	2302      	movs	r3, #2
 8004dba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004dca:	2302      	movs	r3, #2
 8004dcc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004dd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2202      	movs	r2, #2
 8004de2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004de6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004dea:	fa92 f2a2 	rbit	r2, r2
 8004dee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004df2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004df6:	fab2 f282 	clz	r2, r2
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	f042 0220 	orr.w	r2, r2, #32
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	f002 021f 	and.w	r2, r2, #31
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0af      	beq.n	8004d72 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	21f8      	movs	r1, #248	; 0xf8
 8004e28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e30:	fa91 f1a1 	rbit	r1, r1
 8004e34:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e38:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e3c:	fab1 f181 	clz	r1, r1
 8004e40:	b2c9      	uxtb	r1, r1
 8004e42:	408b      	lsls	r3, r1
 8004e44:	4920      	ldr	r1, [pc, #128]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]
 8004e4a:	e06c      	b.n	8004f26 <HAL_RCC_OscConfig+0x646>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e56:	fa93 f3a3 	rbit	r3, r3
 8004e5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd feb8 	bl	8002bec <HAL_GetTick>
 8004e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fd feb3 	bl	8002bec <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d902      	bls.n	8004e98 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	f000 bd5a 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d104      	bne.n	8004ecc <HAL_RCC_OscConfig+0x5ec>
 8004ec2:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <HAL_RCC_OscConfig+0x5e8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	e015      	b.n	8004ef4 <HAL_RCC_OscConfig+0x614>
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ee4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ef0:	4bc8      	ldr	r3, [pc, #800]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004efa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004efe:	fa92 f2a2 	rbit	r2, r2
 8004f02:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f06:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f0a:	fab2 f282 	clz	r2, r2
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	f042 0220 	orr.w	r2, r2, #32
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	f002 021f 	and.w	r2, r2, #31
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1ad      	bne.n	8004e82 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8110 	beq.w	800515c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d079      	beq.n	8005040 <HAL_RCC_OscConfig+0x760>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4bab      	ldr	r3, [pc, #684]	; (8005218 <HAL_RCC_OscConfig+0x938>)
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	461a      	mov	r2, r3
 8004f72:	2301      	movs	r3, #1
 8004f74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f76:	f7fd fe39 	bl	8002bec <HAL_GetTick>
 8004f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f80:	f7fd fe34 	bl	8002bec <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d902      	bls.n	8004f96 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	f000 bcdb 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
 8004f96:	2302      	movs	r3, #2
 8004f98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	fa93 f2a3 	rbit	r2, r3
 8004fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	fa93 f2a3 	rbit	r2, r3
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff0:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 8004ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005004:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	fa93 f1a3 	rbit	r1, r3
 800500e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005012:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005016:	6019      	str	r1, [r3, #0]
  return result;
 8005018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	fab3 f383 	clz	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	2101      	movs	r1, #1
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	4013      	ands	r3, r2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0a0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x6a0>
 800503e:	e08d      	b.n	800515c <HAL_RCC_OscConfig+0x87c>
 8005040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005044:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	fa93 f2a3 	rbit	r2, r3
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005062:	601a      	str	r2, [r3, #0]
  return result;
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800506c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	4b68      	ldr	r3, [pc, #416]	; (8005218 <HAL_RCC_OscConfig+0x938>)
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	461a      	mov	r2, r3
 800507e:	2300      	movs	r3, #0
 8005080:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005082:	f7fd fdb3 	bl	8002bec <HAL_GetTick>
 8005086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508c:	f7fd fdae 	bl	8002bec <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d902      	bls.n	80050a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	f000 bc55 	b.w	800594c <HAL_RCC_OscConfig+0x106c>
 80050a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050aa:	2202      	movs	r2, #2
 80050ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	fa93 f2a3 	rbit	r2, r3
 80050bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050ce:	2202      	movs	r2, #2
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	fa93 f2a3 	rbit	r2, r3
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f2:	2202      	movs	r2, #2
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	fa93 f2a3 	rbit	r2, r3
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800510c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 8005110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005116:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800511a:	2102      	movs	r1, #2
 800511c:	6019      	str	r1, [r3, #0]
 800511e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005122:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	fa93 f1a3 	rbit	r1, r3
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005134:	6019      	str	r1, [r3, #0]
  return result;
 8005136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fab3 f383 	clz	r3, r3
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2101      	movs	r1, #1
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d197      	bne.n	800508c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 81a1 	beq.w	80054b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005178:	4b26      	ldr	r3, [pc, #152]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d116      	bne.n	80051b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4a22      	ldr	r2, [pc, #136]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518e:	61d3      	str	r3, [r2, #28]
 8005190:	4b20      	ldr	r3, [pc, #128]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_OscConfig+0x93c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11a      	bne.n	80051f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051be:	4b17      	ldr	r3, [pc, #92]	; (800521c <HAL_RCC_OscConfig+0x93c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_RCC_OscConfig+0x93c>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7fd fd0f 	bl	8002bec <HAL_GetTick>
 80051ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	e009      	b.n	80051e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d4:	f7fd fd0a 	bl	8002bec <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b64      	cmp	r3, #100	; 0x64
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e3b1      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <HAL_RCC_OscConfig+0x93c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ef      	beq.n	80051d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10d      	bne.n	8005220 <HAL_RCC_OscConfig+0x940>
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a02      	ldr	r2, [pc, #8]	; (8005214 <HAL_RCC_OscConfig+0x934>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6213      	str	r3, [r2, #32]
 8005210:	e03c      	b.n	800528c <HAL_RCC_OscConfig+0x9ac>
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	10908120 	.word	0x10908120
 800521c:	40007000 	.word	0x40007000
 8005220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005224:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10c      	bne.n	800524a <HAL_RCC_OscConfig+0x96a>
 8005230:	4bc1      	ldr	r3, [pc, #772]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	4ac0      	ldr	r2, [pc, #768]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	6213      	str	r3, [r2, #32]
 800523c:	4bbe      	ldr	r3, [pc, #760]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4abd      	ldr	r2, [pc, #756]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005242:	f023 0304 	bic.w	r3, r3, #4
 8005246:	6213      	str	r3, [r2, #32]
 8005248:	e020      	b.n	800528c <HAL_RCC_OscConfig+0x9ac>
 800524a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x994>
 800525a:	4bb7      	ldr	r3, [pc, #732]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4ab6      	ldr	r2, [pc, #728]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	6213      	str	r3, [r2, #32]
 8005266:	4bb4      	ldr	r3, [pc, #720]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4ab3      	ldr	r2, [pc, #716]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6213      	str	r3, [r2, #32]
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0x9ac>
 8005274:	4bb0      	ldr	r3, [pc, #704]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	4aaf      	ldr	r2, [pc, #700]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	6213      	str	r3, [r2, #32]
 8005280:	4bad      	ldr	r3, [pc, #692]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	4aac      	ldr	r2, [pc, #688]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800528c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005290:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8081 	beq.w	80053a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529e:	f7fd fca5 	bl	8002bec <HAL_GetTick>
 80052a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a6:	e00b      	b.n	80052c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a8:	f7fd fca0 	bl	8002bec <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e345      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
 80052c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052c8:	2202      	movs	r2, #2
 80052ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	fa93 f2a3 	rbit	r2, r3
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052ec:	2202      	movs	r2, #2
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	fa93 f2a3 	rbit	r2, r3
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005306:	601a      	str	r2, [r3, #0]
  return result;
 8005308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005310:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005312:	fab3 f383 	clz	r3, r3
 8005316:	b2db      	uxtb	r3, r3
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f043 0302 	orr.w	r3, r3, #2
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d102      	bne.n	800532c <HAL_RCC_OscConfig+0xa4c>
 8005326:	4b84      	ldr	r3, [pc, #528]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	e013      	b.n	8005354 <HAL_RCC_OscConfig+0xa74>
 800532c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005330:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005334:	2202      	movs	r2, #2
 8005336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	fa93 f2a3 	rbit	r2, r3
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	4b79      	ldr	r3, [pc, #484]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005358:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800535c:	2102      	movs	r1, #2
 800535e:	6011      	str	r1, [r2, #0]
 8005360:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005364:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	fa92 f1a2 	rbit	r1, r2
 800536e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005372:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005376:	6011      	str	r1, [r2, #0]
  return result;
 8005378:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800537c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	fab2 f282 	clz	r2, r2
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f002 021f 	and.w	r2, r2, #31
 8005392:	2101      	movs	r1, #1
 8005394:	fa01 f202 	lsl.w	r2, r1, r2
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d084      	beq.n	80052a8 <HAL_RCC_OscConfig+0x9c8>
 800539e:	e07f      	b.n	80054a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a0:	f7fd fc24 	bl	8002bec <HAL_GetTick>
 80053a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fd fc1f 	bl	8002bec <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e2c4      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053ca:	2202      	movs	r2, #2
 80053cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	fa93 f2a3 	rbit	r2, r3
 80053dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053ee:	2202      	movs	r2, #2
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005404:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005408:	601a      	str	r2, [r3, #0]
  return result;
 800540a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005412:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005414:	fab3 f383 	clz	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d102      	bne.n	800542e <HAL_RCC_OscConfig+0xb4e>
 8005428:	4b43      	ldr	r3, [pc, #268]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	e013      	b.n	8005456 <HAL_RCC_OscConfig+0xb76>
 800542e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005432:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005436:	2202      	movs	r2, #2
 8005438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	fa93 f2a3 	rbit	r2, r3
 8005448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800545a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800545e:	2102      	movs	r1, #2
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005466:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	fa92 f1a2 	rbit	r1, r2
 8005470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005474:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005478:	6011      	str	r1, [r2, #0]
  return result;
 800547a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800547e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	fab2 f282 	clz	r2, r2
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	f002 021f 	and.w	r2, r2, #31
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f202 	lsl.w	r2, r1, r2
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d184      	bne.n	80053aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d105      	bne.n	80054b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 80054ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8242 	beq.w	800594a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_RCC_OscConfig+0xc58>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	f000 8213 	beq.w	80058fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f040 8162 	bne.w	80057aa <HAL_RCC_OscConfig+0xeca>
 80054e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80054ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	fa93 f2a3 	rbit	r2, r3
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800550a:	601a      	str	r2, [r3, #0]
  return result;
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005514:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fd fb5e 	bl	8002bec <HAL_GetTick>
 8005530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005534:	e00c      	b.n	8005550 <HAL_RCC_OscConfig+0xc70>
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800553c:	f7fd fb56 	bl	8002bec <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e1fd      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
 8005550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005554:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800555c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005562:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	fa93 f2a3 	rbit	r2, r3
 800556c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005570:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005574:	601a      	str	r2, [r3, #0]
  return result;
 8005576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800557e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005580:	fab3 f383 	clz	r3, r3
 8005584:	b2db      	uxtb	r3, r3
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d102      	bne.n	800559a <HAL_RCC_OscConfig+0xcba>
 8005594:	4bb0      	ldr	r3, [pc, #704]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	e027      	b.n	80055ea <HAL_RCC_OscConfig+0xd0a>
 800559a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	fa93 f2a3 	rbit	r2, r3
 80055b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	fa93 f2a3 	rbit	r2, r3
 80055dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	4b9c      	ldr	r3, [pc, #624]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80055f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055f6:	6011      	str	r1, [r2, #0]
 80055f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	fa92 f1a2 	rbit	r1, r2
 8005606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800560a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800560e:	6011      	str	r1, [r2, #0]
  return result;
 8005610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005614:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	fab2 f282 	clz	r2, r2
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	f042 0220 	orr.w	r2, r2, #32
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	f002 021f 	and.w	r2, r2, #31
 800562a:	2101      	movs	r1, #1
 800562c:	fa01 f202 	lsl.w	r2, r1, r2
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d182      	bne.n	800553c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005636:	4b88      	ldr	r3, [pc, #544]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800563e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800564a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	430b      	orrs	r3, r1
 8005658:	497f      	ldr	r1, [pc, #508]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
 800565e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005662:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005666:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800566a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005670:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	fa93 f2a3 	rbit	r2, r3
 800567a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005682:	601a      	str	r2, [r3, #0]
  return result;
 8005684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005688:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800568c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800568e:	fab3 f383 	clz	r3, r3
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005698:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	461a      	mov	r2, r3
 80056a0:	2301      	movs	r3, #1
 80056a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fd faa2 	bl	8002bec <HAL_GetTick>
 80056a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056ac:	e009      	b.n	80056c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fd fa9d 	bl	8002bec <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e144      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
 80056c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	fa93 f2a3 	rbit	r2, r3
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056e6:	601a      	str	r2, [r3, #0]
  return result;
 80056e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056f2:	fab3 f383 	clz	r3, r3
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d102      	bne.n	800570c <HAL_RCC_OscConfig+0xe2c>
 8005706:	4b54      	ldr	r3, [pc, #336]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	e027      	b.n	800575c <HAL_RCC_OscConfig+0xe7c>
 800570c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005710:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	fa93 f2a3 	rbit	r2, r3
 8005728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005736:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800573a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005744:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	fa93 f2a3 	rbit	r2, r3
 800574e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005752:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005760:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005764:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800576e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	fa92 f1a2 	rbit	r1, r2
 8005778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800577c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005780:	6011      	str	r1, [r2, #0]
  return result;
 8005782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005786:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	fab2 f282 	clz	r2, r2
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	f042 0220 	orr.w	r2, r2, #32
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	f002 021f 	and.w	r2, r2, #31
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f202 	lsl.w	r2, r1, r2
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d082      	beq.n	80056ae <HAL_RCC_OscConfig+0xdce>
 80057a8:	e0cf      	b.n	800594a <HAL_RCC_OscConfig+0x106a>
 80057aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	fa93 f2a3 	rbit	r2, r3
 80057c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057ce:	601a      	str	r2, [r3, #0]
  return result;
 80057d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	461a      	mov	r2, r3
 80057ec:	2300      	movs	r3, #0
 80057ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fd f9fc 	bl	8002bec <HAL_GetTick>
 80057f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f8:	e009      	b.n	800580e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fa:	f7fd f9f7 	bl	8002bec <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e09e      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
 800580e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005812:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800581a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005820:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	fa93 f2a3 	rbit	r2, r3
 800582a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005832:	601a      	str	r2, [r3, #0]
  return result;
 8005834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005838:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800583c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800583e:	fab3 f383 	clz	r3, r3
 8005842:	b2db      	uxtb	r3, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d104      	bne.n	800585c <HAL_RCC_OscConfig+0xf7c>
 8005852:	4b01      	ldr	r3, [pc, #4]	; (8005858 <HAL_RCC_OscConfig+0xf78>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	e029      	b.n	80058ac <HAL_RCC_OscConfig+0xfcc>
 8005858:	40021000 	.word	0x40021000
 800585c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005860:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	fa93 f2a3 	rbit	r2, r3
 8005878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005886:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800588a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005894:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	fa93 f2a3 	rbit	r2, r3
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_RCC_OscConfig+0x1078>)
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058b8:	6011      	str	r1, [r2, #0]
 80058ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	fa92 f1a2 	rbit	r1, r2
 80058c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058d0:	6011      	str	r1, [r2, #0]
  return result;
 80058d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	fab2 f282 	clz	r2, r2
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f042 0220 	orr.w	r2, r2, #32
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	f002 021f 	and.w	r2, r2, #31
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f202 	lsl.w	r2, r1, r2
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d180      	bne.n	80057fa <HAL_RCC_OscConfig+0xf1a>
 80058f8:	e027      	b.n	800594a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e01e      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <HAL_RCC_OscConfig+0x1078>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005916:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800591a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	429a      	cmp	r2, r3
 800592c:	d10b      	bne.n	8005946 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800592e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005942:	429a      	cmp	r2, r3
 8005944:	d001      	beq.n	800594a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40021000 	.word	0x40021000

0800595c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b09e      	sub	sp, #120	; 0x78
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e162      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b90      	ldr	r3, [pc, #576]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d910      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 0207 	bic.w	r2, r3, #7
 800598a:	498b      	ldr	r1, [pc, #556]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b89      	ldr	r3, [pc, #548]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e14a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b0:	4b82      	ldr	r3, [pc, #520]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	497f      	ldr	r1, [pc, #508]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80dc 	beq.w	8005b88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d13c      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xf6>
 80059d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xa6>
 80059fc:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	e00f      	b.n	8005a22 <HAL_RCC_ClockConfig+0xc6>
 8005a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a14:	663b      	str	r3, [r7, #96]	; 0x60
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a18:	fa93 f3a3 	rbit	r3, r3
 8005a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a1e:	4b67      	ldr	r3, [pc, #412]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a2a:	fa92 f2a2 	rbit	r2, r2
 8005a2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a32:	fab2 f282 	clz	r2, r2
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	f042 0220 	orr.w	r2, r2, #32
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	f002 021f 	and.w	r2, r2, #31
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f202 	lsl.w	r2, r1, r2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d17b      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0f3      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d13c      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x178>
 8005a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6a:	fab3 f383 	clz	r3, r3
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d102      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x128>
 8005a7e:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	e00f      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
 8005a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8c:	fa93 f3a3 	rbit	r3, r3
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
 8005a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	fa93 f3a3 	rbit	r3, r3
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa0:	4b46      	ldr	r3, [pc, #280]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aac:	fa92 f2a2 	rbit	r2, r2
 8005ab0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab4:	fab2 f282 	clz	r2, r2
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	f042 0220 	orr.w	r2, r2, #32
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	f002 021f 	and.w	r2, r2, #31
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d13a      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0b2      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	fa93 f3a3 	rbit	r3, r3
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d102      	bne.n	8005afc <HAL_RCC_ClockConfig+0x1a0>
 8005af6:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	e00d      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1bc>
 8005afc:	2302      	movs	r3, #2
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	fa93 f3a3 	rbit	r3, r3
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
 8005b08:	2302      	movs	r3, #2
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2202      	movs	r2, #2
 8005b1a:	61ba      	str	r2, [r7, #24]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	fa92 f2a2 	rbit	r2, r2
 8005b22:	617a      	str	r2, [r7, #20]
  return result;
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	fab2 f282 	clz	r2, r2
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	f042 0220 	orr.w	r2, r2, #32
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	f002 021f 	and.w	r2, r2, #31
 8005b36:	2101      	movs	r1, #1
 8005b38:	fa01 f202 	lsl.w	r2, r1, r2
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e079      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	491a      	ldr	r1, [pc, #104]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b58:	f7fd f848 	bl	8002bec <HAL_GetTick>
 8005b5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fd f844 	bl	8002bec <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e061      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 020c 	and.w	r2, r3, #12
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1eb      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d214      	bcs.n	8005bc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b96:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f023 0207 	bic.w	r2, r3, #7
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e040      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	491a      	ldr	r1, [pc, #104]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bea:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4912      	ldr	r1, [pc, #72]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bfe:	f000 f829 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005c02:	4601      	mov	r1, r0
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0c:	22f0      	movs	r2, #240	; 0xf0
 8005c0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	fa92 f2a2 	rbit	r2, r2
 8005c16:	60fa      	str	r2, [r7, #12]
  return result;
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	fab2 f282 	clz	r2, r2
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	40d3      	lsrs	r3, r2
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <HAL_RCC_ClockConfig+0x2ec>)
 8005c24:	5cd3      	ldrb	r3, [r2, r3]
 8005c26:	fa21 f303 	lsr.w	r3, r1, r3
 8005c2a:	4a08      	ldr	r2, [pc, #32]	; (8005c4c <HAL_RCC_ClockConfig+0x2f0>)
 8005c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCC_ClockConfig+0x2f4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fc ff96 	bl	8002b64 <HAL_InitTick>
  
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3778      	adds	r7, #120	; 0x78
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	08008de0 	.word	0x08008de0
 8005c4c:	20000000 	.word	0x20000000
 8005c50:	20000004 	.word	0x20000004

08005c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b08b      	sub	sp, #44	; 0x2c
 8005c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	2300      	movs	r3, #0
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d002      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x30>
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d003      	beq.n	8005c8a <HAL_RCC_GetSysClockFreq+0x36>
 8005c82:	e03c      	b.n	8005cfe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c84:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c86:	623b      	str	r3, [r7, #32]
      break;
 8005c88:	e03c      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	fa92 f2a2 	rbit	r2, r2
 8005c9c:	607a      	str	r2, [r7, #4]
  return result;
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	fab2 f282 	clz	r2, r2
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	40d3      	lsrs	r3, r2
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005caa:	5cd3      	ldrb	r3, [r2, r3]
 8005cac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	220f      	movs	r2, #15
 8005cb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	fa92 f2a2 	rbit	r2, r2
 8005cc0:	60fa      	str	r2, [r7, #12]
  return result;
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	fab2 f282 	clz	r2, r2
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	40d3      	lsrs	r3, r2
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cce:	5cd3      	ldrb	r3, [r2, r3]
 8005cd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cdc:	4a0e      	ldr	r2, [pc, #56]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	e004      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4a0c      	ldr	r2, [pc, #48]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	623b      	str	r3, [r7, #32]
      break;
 8005cfc:	e002      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d00:	623b      	str	r3, [r7, #32]
      break;
 8005d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	372c      	adds	r7, #44	; 0x2c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000
 8005d18:	007a1200 	.word	0x007a1200
 8005d1c:	08008df8 	.word	0x08008df8
 8005d20:	08008e08 	.word	0x08008e08
 8005d24:	003d0900 	.word	0x003d0900

08005d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000000 	.word	0x20000000

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d46:	f7ff ffef 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	fa92 f2a2 	rbit	r2, r2
 8005d60:	603a      	str	r2, [r7, #0]
  return result;
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	fab2 f282 	clz	r2, r2
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	40d3      	lsrs	r3, r2
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	08008df0 	.word	0x08008df0

08005d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005d8a:	f7ff ffcd 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d8e:	4601      	mov	r1, r0
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	fa92 f2a2 	rbit	r2, r2
 8005da4:	603a      	str	r2, [r7, #0]
  return result;
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	fab2 f282 	clz	r2, r2
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	40d3      	lsrs	r3, r2
 8005db0:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	08008df0 	.word	0x08008df0

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b092      	sub	sp, #72	; 0x48
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80d4 	beq.w	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dec:	4b4e      	ldr	r3, [pc, #312]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10e      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df8:	4b4b      	ldr	r3, [pc, #300]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	4a4a      	ldr	r2, [pc, #296]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e02:	61d3      	str	r3, [r2, #28]
 8005e04:	4b48      	ldr	r3, [pc, #288]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e16:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d118      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e22:	4b42      	ldr	r3, [pc, #264]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e2e:	f7fc fedd 	bl	8002bec <HAL_GetTick>
 8005e32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e34:	e008      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e36:	f7fc fed9 	bl	8002bec <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b64      	cmp	r3, #100	; 0x64
 8005e42:	d901      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e14b      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e54:	4b34      	ldr	r3, [pc, #208]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8084 	beq.w	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d07c      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	fa93 f3a3 	rbit	r3, r3
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e8e:	fab3 f383 	clz	r3, r3
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	fa93 f3a3 	rbit	r3, r3
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb2:	fab3 f383 	clz	r3, r3
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04b      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fc fe89 	bl	8002bec <HAL_GetTick>
 8005eda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fc fe85 	bl	8002bec <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0f5      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	fa93 f3a3 	rbit	r3, r3
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	2302      	movs	r3, #2
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	fa93 f3a3 	rbit	r3, r3
 8005f0a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d108      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f22:	4b01      	ldr	r3, [pc, #4]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	e00d      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40007000 	.word	0x40007000
 8005f30:	10908100 	.word	0x10908100
 8005f34:	2302      	movs	r3, #2
 8005f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	fa93 f3a3 	rbit	r3, r3
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	4b69      	ldr	r3, [pc, #420]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2202      	movs	r2, #2
 8005f46:	613a      	str	r2, [r7, #16]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	fa92 f2a2 	rbit	r2, r2
 8005f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	fab2 f282 	clz	r2, r2
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	f002 021f 	and.w	r2, r2, #31
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f202 	lsl.w	r2, r1, r2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0b7      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f6e:	4b5e      	ldr	r3, [pc, #376]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	495b      	ldr	r1, [pc, #364]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b57      	ldr	r3, [pc, #348]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4a56      	ldr	r2, [pc, #344]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fa0:	4b51      	ldr	r3, [pc, #324]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	f023 0203 	bic.w	r2, r3, #3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	494e      	ldr	r1, [pc, #312]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f023 0210 	bic.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4947      	ldr	r1, [pc, #284]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005fdc:	4b42      	ldr	r3, [pc, #264]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	493f      	ldr	r1, [pc, #252]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ffa:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f023 0220 	bic.w	r2, r3, #32
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	4938      	ldr	r1, [pc, #224]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006008:	4313      	orrs	r3, r2
 800600a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006018:	4b33      	ldr	r3, [pc, #204]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	4930      	ldr	r1, [pc, #192]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006026:	4313      	orrs	r3, r2
 8006028:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006036:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4929      	ldr	r1, [pc, #164]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	4921      	ldr	r1, [pc, #132]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006062:	4313      	orrs	r3, r2
 8006064:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006072:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	491a      	ldr	r1, [pc, #104]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006080:	4313      	orrs	r3, r2
 8006082:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006090:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	4912      	ldr	r1, [pc, #72]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	490b      	ldr	r1, [pc, #44]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4903      	ldr	r1, [pc, #12]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3748      	adds	r7, #72	; 0x48
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000

080060ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d001      	beq.n	8006104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e033      	b.n	800616c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <HAL_TIM_Base_Start+0x8c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIM_Base_Start+0x3e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d004      	beq.n	800612a <HAL_TIM_Base_Start+0x3e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_TIM_Base_Start+0x90>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d115      	bne.n	8006156 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <HAL_TIM_Base_Start+0x94>)
 8006132:	4013      	ands	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b06      	cmp	r3, #6
 800613a:	d015      	beq.n	8006168 <HAL_TIM_Base_Start+0x7c>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006142:	d011      	beq.n	8006168 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	e008      	b.n	8006168 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e000      	b.n	800616a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40014000 	.word	0x40014000
 8006180:	00010007 	.word	0x00010007

08006184 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e097      	b.n	80062c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fc fbdf 	bl	8002970 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80061c8:	f023 0307 	bic.w	r3, r3, #7
 80061cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f000 fa59 	bl	8006690 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	4313      	orrs	r3, r2
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006224:	f023 030c 	bic.w	r3, r3, #12
 8006228:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	4313      	orrs	r3, r2
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	031b      	lsls	r3, r3, #12
 8006254:	4313      	orrs	r3, r2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	4313      	orrs	r3, r2
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d110      	bne.n	8006322 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d102      	bne.n	800630c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006306:	7b7b      	ldrb	r3, [r7, #13]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d001      	beq.n	8006310 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e069      	b.n	80063e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006320:	e031      	b.n	8006386 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d110      	bne.n	800634a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d102      	bne.n	8006334 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800632e:	7b3b      	ldrb	r3, [r7, #12]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d001      	beq.n	8006338 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e055      	b.n	80063e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006348:	e01d      	b.n	8006386 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d108      	bne.n	8006362 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006356:	7b7b      	ldrb	r3, [r7, #13]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d102      	bne.n	8006362 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800635c:	7b3b      	ldrb	r3, [r7, #12]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d001      	beq.n	8006366 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e03e      	b.n	80063e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_TIM_Encoder_Start+0xc4>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b04      	cmp	r3, #4
 8006390:	d008      	beq.n	80063a4 <HAL_TIM_Encoder_Start+0xd4>
 8006392:	e00f      	b.n	80063b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2201      	movs	r2, #1
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f000 f9e5 	bl	800676c <TIM_CCxChannelCmd>
      break;
 80063a2:	e016      	b.n	80063d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2201      	movs	r2, #1
 80063aa:	2104      	movs	r1, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f9dd 	bl	800676c <TIM_CCxChannelCmd>
      break;
 80063b2:	e00e      	b.n	80063d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 f9d5 	bl	800676c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	2104      	movs	r1, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f9ce 	bl	800676c <TIM_CCxChannelCmd>
      break;
 80063d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b02      	cmp	r3, #2
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0202 	mvn.w	r2, #2
 8006418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f90f 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f901 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f912 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b04      	cmp	r3, #4
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0204 	mvn.w	r2, #4
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8e5 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f8d7 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8e8 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0208 	mvn.w	r2, #8
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2204      	movs	r2, #4
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8bb 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8ad 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8be 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0310 	and.w	r3, r3, #16
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d122      	bne.n	8006544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b10      	cmp	r3, #16
 800650a:	d11b      	bne.n	8006544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0210 	mvn.w	r2, #16
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2208      	movs	r2, #8
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f891 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f883 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f894 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0201 	mvn.w	r2, #1
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f85d 	bl	800662a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d10e      	bne.n	800659c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b80      	cmp	r3, #128	; 0x80
 800658a:	d107      	bne.n	800659c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f97e 	bl	8006898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d10e      	bne.n	80065ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b6:	2b80      	cmp	r3, #128	; 0x80
 80065b8:	d107      	bne.n	80065ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f971 	bl	80068ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d10e      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d107      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f842 	bl	800667a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b20      	cmp	r3, #32
 8006602:	d10e      	bne.n	8006622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b20      	cmp	r3, #32
 8006610:	d107      	bne.n	8006622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0220 	mvn.w	r2, #32
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f931 	bl	8006884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a2e      	ldr	r2, [pc, #184]	; (800675c <TIM_Base_SetConfig+0xcc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_Base_SetConfig+0x20>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ae:	d108      	bne.n	80066c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a25      	ldr	r2, [pc, #148]	; (800675c <TIM_Base_SetConfig+0xcc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_Base_SetConfig+0x5a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d00b      	beq.n	80066ea <TIM_Base_SetConfig+0x5a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a22      	ldr	r2, [pc, #136]	; (8006760 <TIM_Base_SetConfig+0xd0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0x5a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a21      	ldr	r2, [pc, #132]	; (8006764 <TIM_Base_SetConfig+0xd4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0x5a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a20      	ldr	r2, [pc, #128]	; (8006768 <TIM_Base_SetConfig+0xd8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a0e      	ldr	r2, [pc, #56]	; (800675c <TIM_Base_SetConfig+0xcc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0xb0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <TIM_Base_SetConfig+0xd0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0xb0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <TIM_Base_SetConfig+0xd4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0xb0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <TIM_Base_SetConfig+0xd8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	615a      	str	r2, [r3, #20]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800

0800676c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2201      	movs	r2, #1
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	43db      	mvns	r3, r3
 800678e:	401a      	ands	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	fa01 f303 	lsl.w	r3, r1, r3
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e04f      	b.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a21      	ldr	r2, [pc, #132]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d108      	bne.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006800:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a14      	ldr	r2, [pc, #80]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006838:	d004      	beq.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a10      	ldr	r2, [pc, #64]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d10c      	bne.n	800685e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40012c00 	.word	0x40012c00
 8006880:	40014000 	.word	0x40014000

08006884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e040      	b.n	8006954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fc f8bc 	bl	8002a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f82c 	bl	800695c <UART_SetConfig>
 8006904:	4603      	mov	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e022      	b.n	8006954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f956 	bl	8006bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800692a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800693a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f9dd 	bl	8006d0c <UART_CheckIdleState>
 8006952:	4603      	mov	r3, r0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b8a      	ldr	r3, [pc, #552]	; (8006bb0 <UART_SetConfig+0x254>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	6979      	ldr	r1, [r7, #20]
 8006990:	430b      	orrs	r3, r1
 8006992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a78      	ldr	r2, [pc, #480]	; (8006bb4 <UART_SetConfig+0x258>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d120      	bne.n	8006a1a <UART_SetConfig+0xbe>
 80069d8:	4b77      	ldr	r3, [pc, #476]	; (8006bb8 <UART_SetConfig+0x25c>)
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d817      	bhi.n	8006a14 <UART_SetConfig+0xb8>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <UART_SetConfig+0x90>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a09 	.word	0x08006a09
 80069f4:	08006a0f 	.word	0x08006a0f
 80069f8:	08006a03 	.word	0x08006a03
 80069fc:	2300      	movs	r3, #0
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e01d      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a02:	2302      	movs	r3, #2
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e01a      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e017      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a0e:	2308      	movs	r3, #8
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e014      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a14:	2310      	movs	r3, #16
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e011      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a67      	ldr	r2, [pc, #412]	; (8006bbc <UART_SetConfig+0x260>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d102      	bne.n	8006a2a <UART_SetConfig+0xce>
 8006a24:	2300      	movs	r3, #0
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e009      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a64      	ldr	r2, [pc, #400]	; (8006bc0 <UART_SetConfig+0x264>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d102      	bne.n	8006a3a <UART_SetConfig+0xde>
 8006a34:	2300      	movs	r3, #0
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e001      	b.n	8006a3e <UART_SetConfig+0xe2>
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a46:	d15a      	bne.n	8006afe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006a48:	7ffb      	ldrb	r3, [r7, #31]
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d827      	bhi.n	8006a9e <UART_SetConfig+0x142>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0xf8>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a81 	.word	0x08006a81
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	08006a9f 	.word	0x08006a9f
 8006a64:	08006a8f 	.word	0x08006a8f
 8006a68:	08006a9f 	.word	0x08006a9f
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006a9f 	.word	0x08006a9f
 8006a74:	08006a97 	.word	0x08006a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7ff f962 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	61b8      	str	r0, [r7, #24]
        break;
 8006a7e:	e013      	b.n	8006aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a80:	f7ff f980 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 8006a84:	61b8      	str	r0, [r7, #24]
        break;
 8006a86:	e00f      	b.n	8006aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a88:	4b4e      	ldr	r3, [pc, #312]	; (8006bc4 <UART_SetConfig+0x268>)
 8006a8a:	61bb      	str	r3, [r7, #24]
        break;
 8006a8c:	e00c      	b.n	8006aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8e:	f7ff f8e1 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8006a92:	61b8      	str	r0, [r7, #24]
        break;
 8006a94:	e008      	b.n	8006aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9a:	61bb      	str	r3, [r7, #24]
        break;
 8006a9c:	e004      	b.n	8006aa8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8006aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d074      	beq.n	8006b98 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	005a      	lsls	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	441a      	add	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d916      	bls.n	8006af8 <UART_SetConfig+0x19c>
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad0:	d212      	bcs.n	8006af8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f023 030f 	bic.w	r3, r3, #15
 8006ada:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	89fa      	ldrh	r2, [r7, #14]
 8006af4:	60da      	str	r2, [r3, #12]
 8006af6:	e04f      	b.n	8006b98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	77bb      	strb	r3, [r7, #30]
 8006afc:	e04c      	b.n	8006b98 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006afe:	7ffb      	ldrb	r3, [r7, #31]
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d828      	bhi.n	8006b56 <UART_SetConfig+0x1fa>
 8006b04:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x1b0>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b41 	.word	0x08006b41
 8006b18:	08006b57 	.word	0x08006b57
 8006b1c:	08006b47 	.word	0x08006b47
 8006b20:	08006b57 	.word	0x08006b57
 8006b24:	08006b57 	.word	0x08006b57
 8006b28:	08006b57 	.word	0x08006b57
 8006b2c:	08006b4f 	.word	0x08006b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b30:	f7ff f906 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8006b34:	61b8      	str	r0, [r7, #24]
        break;
 8006b36:	e013      	b.n	8006b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b38:	f7ff f924 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 8006b3c:	61b8      	str	r0, [r7, #24]
        break;
 8006b3e:	e00f      	b.n	8006b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b40:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <UART_SetConfig+0x268>)
 8006b42:	61bb      	str	r3, [r7, #24]
        break;
 8006b44:	e00c      	b.n	8006b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b46:	f7ff f885 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8006b4a:	61b8      	str	r0, [r7, #24]
        break;
 8006b4c:	e008      	b.n	8006b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b52:	61bb      	str	r3, [r7, #24]
        break;
 8006b54:	e004      	b.n	8006b60 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d018      	beq.n	8006b98 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	085a      	lsrs	r2, r3, #1
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	441a      	add	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b0f      	cmp	r3, #15
 8006b7e:	d909      	bls.n	8006b94 <UART_SetConfig+0x238>
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b86:	d205      	bcs.n	8006b94 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60da      	str	r2, [r3, #12]
 8006b92:	e001      	b.n	8006b98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	efff69f3 	.word	0xefff69f3
 8006bb4:	40013800 	.word	0x40013800
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40004400 	.word	0x40004400
 8006bc0:	40004800 	.word	0x40004800
 8006bc4:	007a1200 	.word	0x007a1200

08006bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01a      	beq.n	8006cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc6:	d10a      	bne.n	8006cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b098      	sub	sp, #96	; 0x60
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d1c:	f7fb ff66 	bl	8002bec <HAL_GetTick>
 8006d20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d12e      	bne.n	8006d8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f88c 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d021      	beq.n	8006d8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d68:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e062      	b.n	8006e54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d149      	bne.n	8006e30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f856 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d03c      	beq.n	8006e30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e6      	bne.n	8006db6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e08:	61fa      	str	r2, [r7, #28]
 8006e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	69b9      	ldr	r1, [r7, #24]
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	617b      	str	r3, [r7, #20]
   return(result);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e5      	bne.n	8006de8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e011      	b.n	8006e54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3758      	adds	r7, #88	; 0x58
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6c:	e049      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d045      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e76:	f7fb feb9 	bl	8002bec <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e048      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d031      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d110      	bne.n	8006ece <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f838 	bl	8006f2a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e029      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006edc:	d111      	bne.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f81e 	bl	8006f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e00f      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	bf0c      	ite	eq
 8006f12:	2301      	moveq	r3, #1
 8006f14:	2300      	movne	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d0a6      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b095      	sub	sp, #84	; 0x54
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f50:	643b      	str	r3, [r7, #64]	; 0x40
 8006f52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d118      	bne.n	8006fd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 0310 	bic.w	r3, r3, #16
 8006fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	613b      	str	r3, [r7, #16]
   return(result);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e6      	bne.n	8006fa0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fe6:	bf00      	nop
 8006fe8:	3754      	adds	r7, #84	; 0x54
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <__errno>:
 8006ff4:	4b01      	ldr	r3, [pc, #4]	; (8006ffc <__errno+0x8>)
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	2000000c 	.word	0x2000000c

08007000 <__libc_init_array>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4d0d      	ldr	r5, [pc, #52]	; (8007038 <__libc_init_array+0x38>)
 8007004:	4c0d      	ldr	r4, [pc, #52]	; (800703c <__libc_init_array+0x3c>)
 8007006:	1b64      	subs	r4, r4, r5
 8007008:	10a4      	asrs	r4, r4, #2
 800700a:	2600      	movs	r6, #0
 800700c:	42a6      	cmp	r6, r4
 800700e:	d109      	bne.n	8007024 <__libc_init_array+0x24>
 8007010:	4d0b      	ldr	r5, [pc, #44]	; (8007040 <__libc_init_array+0x40>)
 8007012:	4c0c      	ldr	r4, [pc, #48]	; (8007044 <__libc_init_array+0x44>)
 8007014:	f001 fcda 	bl	80089cc <_init>
 8007018:	1b64      	subs	r4, r4, r5
 800701a:	10a4      	asrs	r4, r4, #2
 800701c:	2600      	movs	r6, #0
 800701e:	42a6      	cmp	r6, r4
 8007020:	d105      	bne.n	800702e <__libc_init_array+0x2e>
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	f855 3b04 	ldr.w	r3, [r5], #4
 8007028:	4798      	blx	r3
 800702a:	3601      	adds	r6, #1
 800702c:	e7ee      	b.n	800700c <__libc_init_array+0xc>
 800702e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007032:	4798      	blx	r3
 8007034:	3601      	adds	r6, #1
 8007036:	e7f2      	b.n	800701e <__libc_init_array+0x1e>
 8007038:	08009028 	.word	0x08009028
 800703c:	08009028 	.word	0x08009028
 8007040:	08009028 	.word	0x08009028
 8007044:	0800902c 	.word	0x0800902c

08007048 <memset>:
 8007048:	4402      	add	r2, r0
 800704a:	4603      	mov	r3, r0
 800704c:	4293      	cmp	r3, r2
 800704e:	d100      	bne.n	8007052 <memset+0xa>
 8007050:	4770      	bx	lr
 8007052:	f803 1b01 	strb.w	r1, [r3], #1
 8007056:	e7f9      	b.n	800704c <memset+0x4>

08007058 <siprintf>:
 8007058:	b40e      	push	{r1, r2, r3}
 800705a:	b500      	push	{lr}
 800705c:	b09c      	sub	sp, #112	; 0x70
 800705e:	ab1d      	add	r3, sp, #116	; 0x74
 8007060:	9002      	str	r0, [sp, #8]
 8007062:	9006      	str	r0, [sp, #24]
 8007064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <siprintf+0x38>)
 800706a:	9107      	str	r1, [sp, #28]
 800706c:	9104      	str	r1, [sp, #16]
 800706e:	4909      	ldr	r1, [pc, #36]	; (8007094 <siprintf+0x3c>)
 8007070:	f853 2b04 	ldr.w	r2, [r3], #4
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	6800      	ldr	r0, [r0, #0]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	a902      	add	r1, sp, #8
 800707c:	f000 f868 	bl	8007150 <_svfiprintf_r>
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	b01c      	add	sp, #112	; 0x70
 8007088:	f85d eb04 	ldr.w	lr, [sp], #4
 800708c:	b003      	add	sp, #12
 800708e:	4770      	bx	lr
 8007090:	2000000c 	.word	0x2000000c
 8007094:	ffff0208 	.word	0xffff0208

08007098 <__ssputs_r>:
 8007098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	688e      	ldr	r6, [r1, #8]
 800709e:	429e      	cmp	r6, r3
 80070a0:	4682      	mov	sl, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	4690      	mov	r8, r2
 80070a6:	461f      	mov	r7, r3
 80070a8:	d838      	bhi.n	800711c <__ssputs_r+0x84>
 80070aa:	898a      	ldrh	r2, [r1, #12]
 80070ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070b0:	d032      	beq.n	8007118 <__ssputs_r+0x80>
 80070b2:	6825      	ldr	r5, [r4, #0]
 80070b4:	6909      	ldr	r1, [r1, #16]
 80070b6:	eba5 0901 	sub.w	r9, r5, r1
 80070ba:	6965      	ldr	r5, [r4, #20]
 80070bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c4:	3301      	adds	r3, #1
 80070c6:	444b      	add	r3, r9
 80070c8:	106d      	asrs	r5, r5, #1
 80070ca:	429d      	cmp	r5, r3
 80070cc:	bf38      	it	cc
 80070ce:	461d      	movcc	r5, r3
 80070d0:	0553      	lsls	r3, r2, #21
 80070d2:	d531      	bpl.n	8007138 <__ssputs_r+0xa0>
 80070d4:	4629      	mov	r1, r5
 80070d6:	f000 fb63 	bl	80077a0 <_malloc_r>
 80070da:	4606      	mov	r6, r0
 80070dc:	b950      	cbnz	r0, 80070f4 <__ssputs_r+0x5c>
 80070de:	230c      	movs	r3, #12
 80070e0:	f8ca 3000 	str.w	r3, [sl]
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f4:	6921      	ldr	r1, [r4, #16]
 80070f6:	464a      	mov	r2, r9
 80070f8:	f000 fabe 	bl	8007678 <memcpy>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	6126      	str	r6, [r4, #16]
 800710a:	6165      	str	r5, [r4, #20]
 800710c:	444e      	add	r6, r9
 800710e:	eba5 0509 	sub.w	r5, r5, r9
 8007112:	6026      	str	r6, [r4, #0]
 8007114:	60a5      	str	r5, [r4, #8]
 8007116:	463e      	mov	r6, r7
 8007118:	42be      	cmp	r6, r7
 800711a:	d900      	bls.n	800711e <__ssputs_r+0x86>
 800711c:	463e      	mov	r6, r7
 800711e:	6820      	ldr	r0, [r4, #0]
 8007120:	4632      	mov	r2, r6
 8007122:	4641      	mov	r1, r8
 8007124:	f000 fab6 	bl	8007694 <memmove>
 8007128:	68a3      	ldr	r3, [r4, #8]
 800712a:	1b9b      	subs	r3, r3, r6
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	4433      	add	r3, r6
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	2000      	movs	r0, #0
 8007136:	e7db      	b.n	80070f0 <__ssputs_r+0x58>
 8007138:	462a      	mov	r2, r5
 800713a:	f000 fba5 	bl	8007888 <_realloc_r>
 800713e:	4606      	mov	r6, r0
 8007140:	2800      	cmp	r0, #0
 8007142:	d1e1      	bne.n	8007108 <__ssputs_r+0x70>
 8007144:	6921      	ldr	r1, [r4, #16]
 8007146:	4650      	mov	r0, sl
 8007148:	f000 fabe 	bl	80076c8 <_free_r>
 800714c:	e7c7      	b.n	80070de <__ssputs_r+0x46>
	...

08007150 <_svfiprintf_r>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4698      	mov	r8, r3
 8007156:	898b      	ldrh	r3, [r1, #12]
 8007158:	061b      	lsls	r3, r3, #24
 800715a:	b09d      	sub	sp, #116	; 0x74
 800715c:	4607      	mov	r7, r0
 800715e:	460d      	mov	r5, r1
 8007160:	4614      	mov	r4, r2
 8007162:	d50e      	bpl.n	8007182 <_svfiprintf_r+0x32>
 8007164:	690b      	ldr	r3, [r1, #16]
 8007166:	b963      	cbnz	r3, 8007182 <_svfiprintf_r+0x32>
 8007168:	2140      	movs	r1, #64	; 0x40
 800716a:	f000 fb19 	bl	80077a0 <_malloc_r>
 800716e:	6028      	str	r0, [r5, #0]
 8007170:	6128      	str	r0, [r5, #16]
 8007172:	b920      	cbnz	r0, 800717e <_svfiprintf_r+0x2e>
 8007174:	230c      	movs	r3, #12
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	e0d1      	b.n	8007322 <_svfiprintf_r+0x1d2>
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	616b      	str	r3, [r5, #20]
 8007182:	2300      	movs	r3, #0
 8007184:	9309      	str	r3, [sp, #36]	; 0x24
 8007186:	2320      	movs	r3, #32
 8007188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007190:	2330      	movs	r3, #48	; 0x30
 8007192:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800733c <_svfiprintf_r+0x1ec>
 8007196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800719a:	f04f 0901 	mov.w	r9, #1
 800719e:	4623      	mov	r3, r4
 80071a0:	469a      	mov	sl, r3
 80071a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a6:	b10a      	cbz	r2, 80071ac <_svfiprintf_r+0x5c>
 80071a8:	2a25      	cmp	r2, #37	; 0x25
 80071aa:	d1f9      	bne.n	80071a0 <_svfiprintf_r+0x50>
 80071ac:	ebba 0b04 	subs.w	fp, sl, r4
 80071b0:	d00b      	beq.n	80071ca <_svfiprintf_r+0x7a>
 80071b2:	465b      	mov	r3, fp
 80071b4:	4622      	mov	r2, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ff6d 	bl	8007098 <__ssputs_r>
 80071be:	3001      	adds	r0, #1
 80071c0:	f000 80aa 	beq.w	8007318 <_svfiprintf_r+0x1c8>
 80071c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c6:	445a      	add	r2, fp
 80071c8:	9209      	str	r2, [sp, #36]	; 0x24
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 80a2 	beq.w	8007318 <_svfiprintf_r+0x1c8>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071de:	f10a 0a01 	add.w	sl, sl, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	9307      	str	r3, [sp, #28]
 80071e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ea:	931a      	str	r3, [sp, #104]	; 0x68
 80071ec:	4654      	mov	r4, sl
 80071ee:	2205      	movs	r2, #5
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	4851      	ldr	r0, [pc, #324]	; (800733c <_svfiprintf_r+0x1ec>)
 80071f6:	f7f8 ffeb 	bl	80001d0 <memchr>
 80071fa:	9a04      	ldr	r2, [sp, #16]
 80071fc:	b9d8      	cbnz	r0, 8007236 <_svfiprintf_r+0xe6>
 80071fe:	06d0      	lsls	r0, r2, #27
 8007200:	bf44      	itt	mi
 8007202:	2320      	movmi	r3, #32
 8007204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007208:	0711      	lsls	r1, r2, #28
 800720a:	bf44      	itt	mi
 800720c:	232b      	movmi	r3, #43	; 0x2b
 800720e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b2a      	cmp	r3, #42	; 0x2a
 8007218:	d015      	beq.n	8007246 <_svfiprintf_r+0xf6>
 800721a:	9a07      	ldr	r2, [sp, #28]
 800721c:	4654      	mov	r4, sl
 800721e:	2000      	movs	r0, #0
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4621      	mov	r1, r4
 8007226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722a:	3b30      	subs	r3, #48	; 0x30
 800722c:	2b09      	cmp	r3, #9
 800722e:	d94e      	bls.n	80072ce <_svfiprintf_r+0x17e>
 8007230:	b1b0      	cbz	r0, 8007260 <_svfiprintf_r+0x110>
 8007232:	9207      	str	r2, [sp, #28]
 8007234:	e014      	b.n	8007260 <_svfiprintf_r+0x110>
 8007236:	eba0 0308 	sub.w	r3, r0, r8
 800723a:	fa09 f303 	lsl.w	r3, r9, r3
 800723e:	4313      	orrs	r3, r2
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	46a2      	mov	sl, r4
 8007244:	e7d2      	b.n	80071ec <_svfiprintf_r+0x9c>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	1d19      	adds	r1, r3, #4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	9103      	str	r1, [sp, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bfbb      	ittet	lt
 8007252:	425b      	neglt	r3, r3
 8007254:	f042 0202 	orrlt.w	r2, r2, #2
 8007258:	9307      	strge	r3, [sp, #28]
 800725a:	9307      	strlt	r3, [sp, #28]
 800725c:	bfb8      	it	lt
 800725e:	9204      	strlt	r2, [sp, #16]
 8007260:	7823      	ldrb	r3, [r4, #0]
 8007262:	2b2e      	cmp	r3, #46	; 0x2e
 8007264:	d10c      	bne.n	8007280 <_svfiprintf_r+0x130>
 8007266:	7863      	ldrb	r3, [r4, #1]
 8007268:	2b2a      	cmp	r3, #42	; 0x2a
 800726a:	d135      	bne.n	80072d8 <_svfiprintf_r+0x188>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9203      	str	r2, [sp, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfb8      	it	lt
 8007278:	f04f 33ff 	movlt.w	r3, #4294967295
 800727c:	3402      	adds	r4, #2
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800734c <_svfiprintf_r+0x1fc>
 8007284:	7821      	ldrb	r1, [r4, #0]
 8007286:	2203      	movs	r2, #3
 8007288:	4650      	mov	r0, sl
 800728a:	f7f8 ffa1 	bl	80001d0 <memchr>
 800728e:	b140      	cbz	r0, 80072a2 <_svfiprintf_r+0x152>
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	eba0 000a 	sub.w	r0, r0, sl
 8007296:	fa03 f000 	lsl.w	r0, r3, r0
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	4303      	orrs	r3, r0
 800729e:	3401      	adds	r4, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a6:	4826      	ldr	r0, [pc, #152]	; (8007340 <_svfiprintf_r+0x1f0>)
 80072a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ac:	2206      	movs	r2, #6
 80072ae:	f7f8 ff8f 	bl	80001d0 <memchr>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d038      	beq.n	8007328 <_svfiprintf_r+0x1d8>
 80072b6:	4b23      	ldr	r3, [pc, #140]	; (8007344 <_svfiprintf_r+0x1f4>)
 80072b8:	bb1b      	cbnz	r3, 8007302 <_svfiprintf_r+0x1b2>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	3307      	adds	r3, #7
 80072be:	f023 0307 	bic.w	r3, r3, #7
 80072c2:	3308      	adds	r3, #8
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c8:	4433      	add	r3, r6
 80072ca:	9309      	str	r3, [sp, #36]	; 0x24
 80072cc:	e767      	b.n	800719e <_svfiprintf_r+0x4e>
 80072ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d2:	460c      	mov	r4, r1
 80072d4:	2001      	movs	r0, #1
 80072d6:	e7a5      	b.n	8007224 <_svfiprintf_r+0xd4>
 80072d8:	2300      	movs	r3, #0
 80072da:	3401      	adds	r4, #1
 80072dc:	9305      	str	r3, [sp, #20]
 80072de:	4619      	mov	r1, r3
 80072e0:	f04f 0c0a 	mov.w	ip, #10
 80072e4:	4620      	mov	r0, r4
 80072e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ea:	3a30      	subs	r2, #48	; 0x30
 80072ec:	2a09      	cmp	r2, #9
 80072ee:	d903      	bls.n	80072f8 <_svfiprintf_r+0x1a8>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0c5      	beq.n	8007280 <_svfiprintf_r+0x130>
 80072f4:	9105      	str	r1, [sp, #20]
 80072f6:	e7c3      	b.n	8007280 <_svfiprintf_r+0x130>
 80072f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fc:	4604      	mov	r4, r0
 80072fe:	2301      	movs	r3, #1
 8007300:	e7f0      	b.n	80072e4 <_svfiprintf_r+0x194>
 8007302:	ab03      	add	r3, sp, #12
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	462a      	mov	r2, r5
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <_svfiprintf_r+0x1f8>)
 800730a:	a904      	add	r1, sp, #16
 800730c:	4638      	mov	r0, r7
 800730e:	f3af 8000 	nop.w
 8007312:	1c42      	adds	r2, r0, #1
 8007314:	4606      	mov	r6, r0
 8007316:	d1d6      	bne.n	80072c6 <_svfiprintf_r+0x176>
 8007318:	89ab      	ldrh	r3, [r5, #12]
 800731a:	065b      	lsls	r3, r3, #25
 800731c:	f53f af2c 	bmi.w	8007178 <_svfiprintf_r+0x28>
 8007320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007322:	b01d      	add	sp, #116	; 0x74
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	ab03      	add	r3, sp, #12
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	462a      	mov	r2, r5
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <_svfiprintf_r+0x1f8>)
 8007330:	a904      	add	r1, sp, #16
 8007332:	4638      	mov	r0, r7
 8007334:	f000 f87a 	bl	800742c <_printf_i>
 8007338:	e7eb      	b.n	8007312 <_svfiprintf_r+0x1c2>
 800733a:	bf00      	nop
 800733c:	08008e18 	.word	0x08008e18
 8007340:	08008e22 	.word	0x08008e22
 8007344:	00000000 	.word	0x00000000
 8007348:	08007099 	.word	0x08007099
 800734c:	08008e1e 	.word	0x08008e1e

08007350 <_printf_common>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	4616      	mov	r6, r2
 8007356:	4699      	mov	r9, r3
 8007358:	688a      	ldr	r2, [r1, #8]
 800735a:	690b      	ldr	r3, [r1, #16]
 800735c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007360:	4293      	cmp	r3, r2
 8007362:	bfb8      	it	lt
 8007364:	4613      	movlt	r3, r2
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800736c:	4607      	mov	r7, r0
 800736e:	460c      	mov	r4, r1
 8007370:	b10a      	cbz	r2, 8007376 <_printf_common+0x26>
 8007372:	3301      	adds	r3, #1
 8007374:	6033      	str	r3, [r6, #0]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	0699      	lsls	r1, r3, #26
 800737a:	bf42      	ittt	mi
 800737c:	6833      	ldrmi	r3, [r6, #0]
 800737e:	3302      	addmi	r3, #2
 8007380:	6033      	strmi	r3, [r6, #0]
 8007382:	6825      	ldr	r5, [r4, #0]
 8007384:	f015 0506 	ands.w	r5, r5, #6
 8007388:	d106      	bne.n	8007398 <_printf_common+0x48>
 800738a:	f104 0a19 	add.w	sl, r4, #25
 800738e:	68e3      	ldr	r3, [r4, #12]
 8007390:	6832      	ldr	r2, [r6, #0]
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	42ab      	cmp	r3, r5
 8007396:	dc26      	bgt.n	80073e6 <_printf_common+0x96>
 8007398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800739c:	1e13      	subs	r3, r2, #0
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	bf18      	it	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	0692      	lsls	r2, r2, #26
 80073a6:	d42b      	bmi.n	8007400 <_printf_common+0xb0>
 80073a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ac:	4649      	mov	r1, r9
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c0      	blx	r8
 80073b2:	3001      	adds	r0, #1
 80073b4:	d01e      	beq.n	80073f4 <_printf_common+0xa4>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	68e5      	ldr	r5, [r4, #12]
 80073ba:	6832      	ldr	r2, [r6, #0]
 80073bc:	f003 0306 	and.w	r3, r3, #6
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	bf08      	it	eq
 80073c4:	1aad      	subeq	r5, r5, r2
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	6922      	ldr	r2, [r4, #16]
 80073ca:	bf0c      	ite	eq
 80073cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d0:	2500      	movne	r5, #0
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bfc4      	itt	gt
 80073d6:	1a9b      	subgt	r3, r3, r2
 80073d8:	18ed      	addgt	r5, r5, r3
 80073da:	2600      	movs	r6, #0
 80073dc:	341a      	adds	r4, #26
 80073de:	42b5      	cmp	r5, r6
 80073e0:	d11a      	bne.n	8007418 <_printf_common+0xc8>
 80073e2:	2000      	movs	r0, #0
 80073e4:	e008      	b.n	80073f8 <_printf_common+0xa8>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4652      	mov	r2, sl
 80073ea:	4649      	mov	r1, r9
 80073ec:	4638      	mov	r0, r7
 80073ee:	47c0      	blx	r8
 80073f0:	3001      	adds	r0, #1
 80073f2:	d103      	bne.n	80073fc <_printf_common+0xac>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fc:	3501      	adds	r5, #1
 80073fe:	e7c6      	b.n	800738e <_printf_common+0x3e>
 8007400:	18e1      	adds	r1, r4, r3
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	2030      	movs	r0, #48	; 0x30
 8007406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800740a:	4422      	add	r2, r4
 800740c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007414:	3302      	adds	r3, #2
 8007416:	e7c7      	b.n	80073a8 <_printf_common+0x58>
 8007418:	2301      	movs	r3, #1
 800741a:	4622      	mov	r2, r4
 800741c:	4649      	mov	r1, r9
 800741e:	4638      	mov	r0, r7
 8007420:	47c0      	blx	r8
 8007422:	3001      	adds	r0, #1
 8007424:	d0e6      	beq.n	80073f4 <_printf_common+0xa4>
 8007426:	3601      	adds	r6, #1
 8007428:	e7d9      	b.n	80073de <_printf_common+0x8e>
	...

0800742c <_printf_i>:
 800742c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	7e0f      	ldrb	r7, [r1, #24]
 8007432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007434:	2f78      	cmp	r7, #120	; 0x78
 8007436:	4691      	mov	r9, r2
 8007438:	4680      	mov	r8, r0
 800743a:	460c      	mov	r4, r1
 800743c:	469a      	mov	sl, r3
 800743e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007442:	d807      	bhi.n	8007454 <_printf_i+0x28>
 8007444:	2f62      	cmp	r7, #98	; 0x62
 8007446:	d80a      	bhi.n	800745e <_printf_i+0x32>
 8007448:	2f00      	cmp	r7, #0
 800744a:	f000 80d8 	beq.w	80075fe <_printf_i+0x1d2>
 800744e:	2f58      	cmp	r7, #88	; 0x58
 8007450:	f000 80a3 	beq.w	800759a <_printf_i+0x16e>
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800745c:	e03a      	b.n	80074d4 <_printf_i+0xa8>
 800745e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007462:	2b15      	cmp	r3, #21
 8007464:	d8f6      	bhi.n	8007454 <_printf_i+0x28>
 8007466:	a101      	add	r1, pc, #4	; (adr r1, 800746c <_printf_i+0x40>)
 8007468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800746c:	080074c5 	.word	0x080074c5
 8007470:	080074d9 	.word	0x080074d9
 8007474:	08007455 	.word	0x08007455
 8007478:	08007455 	.word	0x08007455
 800747c:	08007455 	.word	0x08007455
 8007480:	08007455 	.word	0x08007455
 8007484:	080074d9 	.word	0x080074d9
 8007488:	08007455 	.word	0x08007455
 800748c:	08007455 	.word	0x08007455
 8007490:	08007455 	.word	0x08007455
 8007494:	08007455 	.word	0x08007455
 8007498:	080075e5 	.word	0x080075e5
 800749c:	08007509 	.word	0x08007509
 80074a0:	080075c7 	.word	0x080075c7
 80074a4:	08007455 	.word	0x08007455
 80074a8:	08007455 	.word	0x08007455
 80074ac:	08007607 	.word	0x08007607
 80074b0:	08007455 	.word	0x08007455
 80074b4:	08007509 	.word	0x08007509
 80074b8:	08007455 	.word	0x08007455
 80074bc:	08007455 	.word	0x08007455
 80074c0:	080075cf 	.word	0x080075cf
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	602a      	str	r2, [r5, #0]
 80074cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0a3      	b.n	8007620 <_printf_i+0x1f4>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	6829      	ldr	r1, [r5, #0]
 80074dc:	0606      	lsls	r6, r0, #24
 80074de:	f101 0304 	add.w	r3, r1, #4
 80074e2:	d50a      	bpl.n	80074fa <_printf_i+0xce>
 80074e4:	680e      	ldr	r6, [r1, #0]
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	2e00      	cmp	r6, #0
 80074ea:	da03      	bge.n	80074f4 <_printf_i+0xc8>
 80074ec:	232d      	movs	r3, #45	; 0x2d
 80074ee:	4276      	negs	r6, r6
 80074f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f4:	485e      	ldr	r0, [pc, #376]	; (8007670 <_printf_i+0x244>)
 80074f6:	230a      	movs	r3, #10
 80074f8:	e019      	b.n	800752e <_printf_i+0x102>
 80074fa:	680e      	ldr	r6, [r1, #0]
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007502:	bf18      	it	ne
 8007504:	b236      	sxthne	r6, r6
 8007506:	e7ef      	b.n	80074e8 <_printf_i+0xbc>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	6820      	ldr	r0, [r4, #0]
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	6029      	str	r1, [r5, #0]
 8007510:	0601      	lsls	r1, r0, #24
 8007512:	d501      	bpl.n	8007518 <_printf_i+0xec>
 8007514:	681e      	ldr	r6, [r3, #0]
 8007516:	e002      	b.n	800751e <_printf_i+0xf2>
 8007518:	0646      	lsls	r6, r0, #25
 800751a:	d5fb      	bpl.n	8007514 <_printf_i+0xe8>
 800751c:	881e      	ldrh	r6, [r3, #0]
 800751e:	4854      	ldr	r0, [pc, #336]	; (8007670 <_printf_i+0x244>)
 8007520:	2f6f      	cmp	r7, #111	; 0x6f
 8007522:	bf0c      	ite	eq
 8007524:	2308      	moveq	r3, #8
 8007526:	230a      	movne	r3, #10
 8007528:	2100      	movs	r1, #0
 800752a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800752e:	6865      	ldr	r5, [r4, #4]
 8007530:	60a5      	str	r5, [r4, #8]
 8007532:	2d00      	cmp	r5, #0
 8007534:	bfa2      	ittt	ge
 8007536:	6821      	ldrge	r1, [r4, #0]
 8007538:	f021 0104 	bicge.w	r1, r1, #4
 800753c:	6021      	strge	r1, [r4, #0]
 800753e:	b90e      	cbnz	r6, 8007544 <_printf_i+0x118>
 8007540:	2d00      	cmp	r5, #0
 8007542:	d04d      	beq.n	80075e0 <_printf_i+0x1b4>
 8007544:	4615      	mov	r5, r2
 8007546:	fbb6 f1f3 	udiv	r1, r6, r3
 800754a:	fb03 6711 	mls	r7, r3, r1, r6
 800754e:	5dc7      	ldrb	r7, [r0, r7]
 8007550:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007554:	4637      	mov	r7, r6
 8007556:	42bb      	cmp	r3, r7
 8007558:	460e      	mov	r6, r1
 800755a:	d9f4      	bls.n	8007546 <_printf_i+0x11a>
 800755c:	2b08      	cmp	r3, #8
 800755e:	d10b      	bne.n	8007578 <_printf_i+0x14c>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	07de      	lsls	r6, r3, #31
 8007564:	d508      	bpl.n	8007578 <_printf_i+0x14c>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6861      	ldr	r1, [r4, #4]
 800756a:	4299      	cmp	r1, r3
 800756c:	bfde      	ittt	le
 800756e:	2330      	movle	r3, #48	; 0x30
 8007570:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007574:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007578:	1b52      	subs	r2, r2, r5
 800757a:	6122      	str	r2, [r4, #16]
 800757c:	f8cd a000 	str.w	sl, [sp]
 8007580:	464b      	mov	r3, r9
 8007582:	aa03      	add	r2, sp, #12
 8007584:	4621      	mov	r1, r4
 8007586:	4640      	mov	r0, r8
 8007588:	f7ff fee2 	bl	8007350 <_printf_common>
 800758c:	3001      	adds	r0, #1
 800758e:	d14c      	bne.n	800762a <_printf_i+0x1fe>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b004      	add	sp, #16
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	4835      	ldr	r0, [pc, #212]	; (8007670 <_printf_i+0x244>)
 800759c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075a0:	6829      	ldr	r1, [r5, #0]
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a8:	6029      	str	r1, [r5, #0]
 80075aa:	061d      	lsls	r5, r3, #24
 80075ac:	d514      	bpl.n	80075d8 <_printf_i+0x1ac>
 80075ae:	07df      	lsls	r7, r3, #31
 80075b0:	bf44      	itt	mi
 80075b2:	f043 0320 	orrmi.w	r3, r3, #32
 80075b6:	6023      	strmi	r3, [r4, #0]
 80075b8:	b91e      	cbnz	r6, 80075c2 <_printf_i+0x196>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	f023 0320 	bic.w	r3, r3, #32
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	2310      	movs	r3, #16
 80075c4:	e7b0      	b.n	8007528 <_printf_i+0xfc>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f043 0320 	orr.w	r3, r3, #32
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	2378      	movs	r3, #120	; 0x78
 80075d0:	4828      	ldr	r0, [pc, #160]	; (8007674 <_printf_i+0x248>)
 80075d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075d6:	e7e3      	b.n	80075a0 <_printf_i+0x174>
 80075d8:	0659      	lsls	r1, r3, #25
 80075da:	bf48      	it	mi
 80075dc:	b2b6      	uxthmi	r6, r6
 80075de:	e7e6      	b.n	80075ae <_printf_i+0x182>
 80075e0:	4615      	mov	r5, r2
 80075e2:	e7bb      	b.n	800755c <_printf_i+0x130>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	6826      	ldr	r6, [r4, #0]
 80075e8:	6961      	ldr	r1, [r4, #20]
 80075ea:	1d18      	adds	r0, r3, #4
 80075ec:	6028      	str	r0, [r5, #0]
 80075ee:	0635      	lsls	r5, r6, #24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	d501      	bpl.n	80075f8 <_printf_i+0x1cc>
 80075f4:	6019      	str	r1, [r3, #0]
 80075f6:	e002      	b.n	80075fe <_printf_i+0x1d2>
 80075f8:	0670      	lsls	r0, r6, #25
 80075fa:	d5fb      	bpl.n	80075f4 <_printf_i+0x1c8>
 80075fc:	8019      	strh	r1, [r3, #0]
 80075fe:	2300      	movs	r3, #0
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	4615      	mov	r5, r2
 8007604:	e7ba      	b.n	800757c <_printf_i+0x150>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	1d1a      	adds	r2, r3, #4
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	6862      	ldr	r2, [r4, #4]
 8007610:	2100      	movs	r1, #0
 8007612:	4628      	mov	r0, r5
 8007614:	f7f8 fddc 	bl	80001d0 <memchr>
 8007618:	b108      	cbz	r0, 800761e <_printf_i+0x1f2>
 800761a:	1b40      	subs	r0, r0, r5
 800761c:	6060      	str	r0, [r4, #4]
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	2300      	movs	r3, #0
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	e7a8      	b.n	800757c <_printf_i+0x150>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	462a      	mov	r2, r5
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d0ab      	beq.n	8007590 <_printf_i+0x164>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	079b      	lsls	r3, r3, #30
 800763c:	d413      	bmi.n	8007666 <_printf_i+0x23a>
 800763e:	68e0      	ldr	r0, [r4, #12]
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	4298      	cmp	r0, r3
 8007644:	bfb8      	it	lt
 8007646:	4618      	movlt	r0, r3
 8007648:	e7a4      	b.n	8007594 <_printf_i+0x168>
 800764a:	2301      	movs	r3, #1
 800764c:	4632      	mov	r2, r6
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d09b      	beq.n	8007590 <_printf_i+0x164>
 8007658:	3501      	adds	r5, #1
 800765a:	68e3      	ldr	r3, [r4, #12]
 800765c:	9903      	ldr	r1, [sp, #12]
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	42ab      	cmp	r3, r5
 8007662:	dcf2      	bgt.n	800764a <_printf_i+0x21e>
 8007664:	e7eb      	b.n	800763e <_printf_i+0x212>
 8007666:	2500      	movs	r5, #0
 8007668:	f104 0619 	add.w	r6, r4, #25
 800766c:	e7f5      	b.n	800765a <_printf_i+0x22e>
 800766e:	bf00      	nop
 8007670:	08008e29 	.word	0x08008e29
 8007674:	08008e3a 	.word	0x08008e3a

08007678 <memcpy>:
 8007678:	440a      	add	r2, r1
 800767a:	4291      	cmp	r1, r2
 800767c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007680:	d100      	bne.n	8007684 <memcpy+0xc>
 8007682:	4770      	bx	lr
 8007684:	b510      	push	{r4, lr}
 8007686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800768a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800768e:	4291      	cmp	r1, r2
 8007690:	d1f9      	bne.n	8007686 <memcpy+0xe>
 8007692:	bd10      	pop	{r4, pc}

08007694 <memmove>:
 8007694:	4288      	cmp	r0, r1
 8007696:	b510      	push	{r4, lr}
 8007698:	eb01 0402 	add.w	r4, r1, r2
 800769c:	d902      	bls.n	80076a4 <memmove+0x10>
 800769e:	4284      	cmp	r4, r0
 80076a0:	4623      	mov	r3, r4
 80076a2:	d807      	bhi.n	80076b4 <memmove+0x20>
 80076a4:	1e43      	subs	r3, r0, #1
 80076a6:	42a1      	cmp	r1, r4
 80076a8:	d008      	beq.n	80076bc <memmove+0x28>
 80076aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076b2:	e7f8      	b.n	80076a6 <memmove+0x12>
 80076b4:	4402      	add	r2, r0
 80076b6:	4601      	mov	r1, r0
 80076b8:	428a      	cmp	r2, r1
 80076ba:	d100      	bne.n	80076be <memmove+0x2a>
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076c6:	e7f7      	b.n	80076b8 <memmove+0x24>

080076c8 <_free_r>:
 80076c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ca:	2900      	cmp	r1, #0
 80076cc:	d044      	beq.n	8007758 <_free_r+0x90>
 80076ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d2:	9001      	str	r0, [sp, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f1a1 0404 	sub.w	r4, r1, #4
 80076da:	bfb8      	it	lt
 80076dc:	18e4      	addlt	r4, r4, r3
 80076de:	f000 f913 	bl	8007908 <__malloc_lock>
 80076e2:	4a1e      	ldr	r2, [pc, #120]	; (800775c <_free_r+0x94>)
 80076e4:	9801      	ldr	r0, [sp, #4]
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	b933      	cbnz	r3, 80076f8 <_free_r+0x30>
 80076ea:	6063      	str	r3, [r4, #4]
 80076ec:	6014      	str	r4, [r2, #0]
 80076ee:	b003      	add	sp, #12
 80076f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076f4:	f000 b90e 	b.w	8007914 <__malloc_unlock>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d908      	bls.n	800770e <_free_r+0x46>
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	1961      	adds	r1, r4, r5
 8007700:	428b      	cmp	r3, r1
 8007702:	bf01      	itttt	eq
 8007704:	6819      	ldreq	r1, [r3, #0]
 8007706:	685b      	ldreq	r3, [r3, #4]
 8007708:	1949      	addeq	r1, r1, r5
 800770a:	6021      	streq	r1, [r4, #0]
 800770c:	e7ed      	b.n	80076ea <_free_r+0x22>
 800770e:	461a      	mov	r2, r3
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b10b      	cbz	r3, 8007718 <_free_r+0x50>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d9fa      	bls.n	800770e <_free_r+0x46>
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	1855      	adds	r5, r2, r1
 800771c:	42a5      	cmp	r5, r4
 800771e:	d10b      	bne.n	8007738 <_free_r+0x70>
 8007720:	6824      	ldr	r4, [r4, #0]
 8007722:	4421      	add	r1, r4
 8007724:	1854      	adds	r4, r2, r1
 8007726:	42a3      	cmp	r3, r4
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	d1e0      	bne.n	80076ee <_free_r+0x26>
 800772c:	681c      	ldr	r4, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	6053      	str	r3, [r2, #4]
 8007732:	4421      	add	r1, r4
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	e7da      	b.n	80076ee <_free_r+0x26>
 8007738:	d902      	bls.n	8007740 <_free_r+0x78>
 800773a:	230c      	movs	r3, #12
 800773c:	6003      	str	r3, [r0, #0]
 800773e:	e7d6      	b.n	80076ee <_free_r+0x26>
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	1961      	adds	r1, r4, r5
 8007744:	428b      	cmp	r3, r1
 8007746:	bf04      	itt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	6063      	str	r3, [r4, #4]
 800774e:	bf04      	itt	eq
 8007750:	1949      	addeq	r1, r1, r5
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	6054      	str	r4, [r2, #4]
 8007756:	e7ca      	b.n	80076ee <_free_r+0x26>
 8007758:	b003      	add	sp, #12
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	200012fc 	.word	0x200012fc

08007760 <sbrk_aligned>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	4e0e      	ldr	r6, [pc, #56]	; (800779c <sbrk_aligned+0x3c>)
 8007764:	460c      	mov	r4, r1
 8007766:	6831      	ldr	r1, [r6, #0]
 8007768:	4605      	mov	r5, r0
 800776a:	b911      	cbnz	r1, 8007772 <sbrk_aligned+0x12>
 800776c:	f000 f8bc 	bl	80078e8 <_sbrk_r>
 8007770:	6030      	str	r0, [r6, #0]
 8007772:	4621      	mov	r1, r4
 8007774:	4628      	mov	r0, r5
 8007776:	f000 f8b7 	bl	80078e8 <_sbrk_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d00a      	beq.n	8007794 <sbrk_aligned+0x34>
 800777e:	1cc4      	adds	r4, r0, #3
 8007780:	f024 0403 	bic.w	r4, r4, #3
 8007784:	42a0      	cmp	r0, r4
 8007786:	d007      	beq.n	8007798 <sbrk_aligned+0x38>
 8007788:	1a21      	subs	r1, r4, r0
 800778a:	4628      	mov	r0, r5
 800778c:	f000 f8ac 	bl	80078e8 <_sbrk_r>
 8007790:	3001      	adds	r0, #1
 8007792:	d101      	bne.n	8007798 <sbrk_aligned+0x38>
 8007794:	f04f 34ff 	mov.w	r4, #4294967295
 8007798:	4620      	mov	r0, r4
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	20001300 	.word	0x20001300

080077a0 <_malloc_r>:
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	1ccd      	adds	r5, r1, #3
 80077a6:	f025 0503 	bic.w	r5, r5, #3
 80077aa:	3508      	adds	r5, #8
 80077ac:	2d0c      	cmp	r5, #12
 80077ae:	bf38      	it	cc
 80077b0:	250c      	movcc	r5, #12
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	4607      	mov	r7, r0
 80077b6:	db01      	blt.n	80077bc <_malloc_r+0x1c>
 80077b8:	42a9      	cmp	r1, r5
 80077ba:	d905      	bls.n	80077c8 <_malloc_r+0x28>
 80077bc:	230c      	movs	r3, #12
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	2600      	movs	r6, #0
 80077c2:	4630      	mov	r0, r6
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	4e2e      	ldr	r6, [pc, #184]	; (8007884 <_malloc_r+0xe4>)
 80077ca:	f000 f89d 	bl	8007908 <__malloc_lock>
 80077ce:	6833      	ldr	r3, [r6, #0]
 80077d0:	461c      	mov	r4, r3
 80077d2:	bb34      	cbnz	r4, 8007822 <_malloc_r+0x82>
 80077d4:	4629      	mov	r1, r5
 80077d6:	4638      	mov	r0, r7
 80077d8:	f7ff ffc2 	bl	8007760 <sbrk_aligned>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	4604      	mov	r4, r0
 80077e0:	d14d      	bne.n	800787e <_malloc_r+0xde>
 80077e2:	6834      	ldr	r4, [r6, #0]
 80077e4:	4626      	mov	r6, r4
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	d140      	bne.n	800786c <_malloc_r+0xcc>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	4631      	mov	r1, r6
 80077ee:	4638      	mov	r0, r7
 80077f0:	eb04 0803 	add.w	r8, r4, r3
 80077f4:	f000 f878 	bl	80078e8 <_sbrk_r>
 80077f8:	4580      	cmp	r8, r0
 80077fa:	d13a      	bne.n	8007872 <_malloc_r+0xd2>
 80077fc:	6821      	ldr	r1, [r4, #0]
 80077fe:	3503      	adds	r5, #3
 8007800:	1a6d      	subs	r5, r5, r1
 8007802:	f025 0503 	bic.w	r5, r5, #3
 8007806:	3508      	adds	r5, #8
 8007808:	2d0c      	cmp	r5, #12
 800780a:	bf38      	it	cc
 800780c:	250c      	movcc	r5, #12
 800780e:	4629      	mov	r1, r5
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff ffa5 	bl	8007760 <sbrk_aligned>
 8007816:	3001      	adds	r0, #1
 8007818:	d02b      	beq.n	8007872 <_malloc_r+0xd2>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	442b      	add	r3, r5
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	e00e      	b.n	8007840 <_malloc_r+0xa0>
 8007822:	6822      	ldr	r2, [r4, #0]
 8007824:	1b52      	subs	r2, r2, r5
 8007826:	d41e      	bmi.n	8007866 <_malloc_r+0xc6>
 8007828:	2a0b      	cmp	r2, #11
 800782a:	d916      	bls.n	800785a <_malloc_r+0xba>
 800782c:	1961      	adds	r1, r4, r5
 800782e:	42a3      	cmp	r3, r4
 8007830:	6025      	str	r5, [r4, #0]
 8007832:	bf18      	it	ne
 8007834:	6059      	strne	r1, [r3, #4]
 8007836:	6863      	ldr	r3, [r4, #4]
 8007838:	bf08      	it	eq
 800783a:	6031      	streq	r1, [r6, #0]
 800783c:	5162      	str	r2, [r4, r5]
 800783e:	604b      	str	r3, [r1, #4]
 8007840:	4638      	mov	r0, r7
 8007842:	f104 060b 	add.w	r6, r4, #11
 8007846:	f000 f865 	bl	8007914 <__malloc_unlock>
 800784a:	f026 0607 	bic.w	r6, r6, #7
 800784e:	1d23      	adds	r3, r4, #4
 8007850:	1af2      	subs	r2, r6, r3
 8007852:	d0b6      	beq.n	80077c2 <_malloc_r+0x22>
 8007854:	1b9b      	subs	r3, r3, r6
 8007856:	50a3      	str	r3, [r4, r2]
 8007858:	e7b3      	b.n	80077c2 <_malloc_r+0x22>
 800785a:	6862      	ldr	r2, [r4, #4]
 800785c:	42a3      	cmp	r3, r4
 800785e:	bf0c      	ite	eq
 8007860:	6032      	streq	r2, [r6, #0]
 8007862:	605a      	strne	r2, [r3, #4]
 8007864:	e7ec      	b.n	8007840 <_malloc_r+0xa0>
 8007866:	4623      	mov	r3, r4
 8007868:	6864      	ldr	r4, [r4, #4]
 800786a:	e7b2      	b.n	80077d2 <_malloc_r+0x32>
 800786c:	4634      	mov	r4, r6
 800786e:	6876      	ldr	r6, [r6, #4]
 8007870:	e7b9      	b.n	80077e6 <_malloc_r+0x46>
 8007872:	230c      	movs	r3, #12
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	4638      	mov	r0, r7
 8007878:	f000 f84c 	bl	8007914 <__malloc_unlock>
 800787c:	e7a1      	b.n	80077c2 <_malloc_r+0x22>
 800787e:	6025      	str	r5, [r4, #0]
 8007880:	e7de      	b.n	8007840 <_malloc_r+0xa0>
 8007882:	bf00      	nop
 8007884:	200012fc 	.word	0x200012fc

08007888 <_realloc_r>:
 8007888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800788c:	4680      	mov	r8, r0
 800788e:	4614      	mov	r4, r2
 8007890:	460e      	mov	r6, r1
 8007892:	b921      	cbnz	r1, 800789e <_realloc_r+0x16>
 8007894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	4611      	mov	r1, r2
 800789a:	f7ff bf81 	b.w	80077a0 <_malloc_r>
 800789e:	b92a      	cbnz	r2, 80078ac <_realloc_r+0x24>
 80078a0:	f7ff ff12 	bl	80076c8 <_free_r>
 80078a4:	4625      	mov	r5, r4
 80078a6:	4628      	mov	r0, r5
 80078a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ac:	f000 f838 	bl	8007920 <_malloc_usable_size_r>
 80078b0:	4284      	cmp	r4, r0
 80078b2:	4607      	mov	r7, r0
 80078b4:	d802      	bhi.n	80078bc <_realloc_r+0x34>
 80078b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ba:	d812      	bhi.n	80078e2 <_realloc_r+0x5a>
 80078bc:	4621      	mov	r1, r4
 80078be:	4640      	mov	r0, r8
 80078c0:	f7ff ff6e 	bl	80077a0 <_malloc_r>
 80078c4:	4605      	mov	r5, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d0ed      	beq.n	80078a6 <_realloc_r+0x1e>
 80078ca:	42bc      	cmp	r4, r7
 80078cc:	4622      	mov	r2, r4
 80078ce:	4631      	mov	r1, r6
 80078d0:	bf28      	it	cs
 80078d2:	463a      	movcs	r2, r7
 80078d4:	f7ff fed0 	bl	8007678 <memcpy>
 80078d8:	4631      	mov	r1, r6
 80078da:	4640      	mov	r0, r8
 80078dc:	f7ff fef4 	bl	80076c8 <_free_r>
 80078e0:	e7e1      	b.n	80078a6 <_realloc_r+0x1e>
 80078e2:	4635      	mov	r5, r6
 80078e4:	e7df      	b.n	80078a6 <_realloc_r+0x1e>
	...

080078e8 <_sbrk_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	; (8007904 <_sbrk_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7fa ffa0 	bl	8002838 <_sbrk>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_sbrk_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_sbrk_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20001304 	.word	0x20001304

08007908 <__malloc_lock>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__malloc_lock+0x8>)
 800790a:	f000 b811 	b.w	8007930 <__retarget_lock_acquire_recursive>
 800790e:	bf00      	nop
 8007910:	20001308 	.word	0x20001308

08007914 <__malloc_unlock>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__malloc_unlock+0x8>)
 8007916:	f000 b80c 	b.w	8007932 <__retarget_lock_release_recursive>
 800791a:	bf00      	nop
 800791c:	20001308 	.word	0x20001308

08007920 <_malloc_usable_size_r>:
 8007920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007924:	1f18      	subs	r0, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfbc      	itt	lt
 800792a:	580b      	ldrlt	r3, [r1, r0]
 800792c:	18c0      	addlt	r0, r0, r3
 800792e:	4770      	bx	lr

08007930 <__retarget_lock_acquire_recursive>:
 8007930:	4770      	bx	lr

08007932 <__retarget_lock_release_recursive>:
 8007932:	4770      	bx	lr
 8007934:	0000      	movs	r0, r0
	...

08007938 <sin>:
 8007938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800793a:	ec53 2b10 	vmov	r2, r3, d0
 800793e:	4828      	ldr	r0, [pc, #160]	; (80079e0 <sin+0xa8>)
 8007940:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007944:	4281      	cmp	r1, r0
 8007946:	dc07      	bgt.n	8007958 <sin+0x20>
 8007948:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80079d8 <sin+0xa0>
 800794c:	2000      	movs	r0, #0
 800794e:	b005      	add	sp, #20
 8007950:	f85d eb04 	ldr.w	lr, [sp], #4
 8007954:	f000 be6c 	b.w	8008630 <__kernel_sin>
 8007958:	4822      	ldr	r0, [pc, #136]	; (80079e4 <sin+0xac>)
 800795a:	4281      	cmp	r1, r0
 800795c:	dd09      	ble.n	8007972 <sin+0x3a>
 800795e:	ee10 0a10 	vmov	r0, s0
 8007962:	4619      	mov	r1, r3
 8007964:	f7f8 fc88 	bl	8000278 <__aeabi_dsub>
 8007968:	ec41 0b10 	vmov	d0, r0, r1
 800796c:	b005      	add	sp, #20
 800796e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007972:	4668      	mov	r0, sp
 8007974:	f000 f838 	bl	80079e8 <__ieee754_rem_pio2>
 8007978:	f000 0003 	and.w	r0, r0, #3
 800797c:	2801      	cmp	r0, #1
 800797e:	d00c      	beq.n	800799a <sin+0x62>
 8007980:	2802      	cmp	r0, #2
 8007982:	d011      	beq.n	80079a8 <sin+0x70>
 8007984:	b9f0      	cbnz	r0, 80079c4 <sin+0x8c>
 8007986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800798a:	ed9d 0b00 	vldr	d0, [sp]
 800798e:	2001      	movs	r0, #1
 8007990:	f000 fe4e 	bl	8008630 <__kernel_sin>
 8007994:	ec51 0b10 	vmov	r0, r1, d0
 8007998:	e7e6      	b.n	8007968 <sin+0x30>
 800799a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800799e:	ed9d 0b00 	vldr	d0, [sp]
 80079a2:	f000 fa2d 	bl	8007e00 <__kernel_cos>
 80079a6:	e7f5      	b.n	8007994 <sin+0x5c>
 80079a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079ac:	ed9d 0b00 	vldr	d0, [sp]
 80079b0:	2001      	movs	r0, #1
 80079b2:	f000 fe3d 	bl	8008630 <__kernel_sin>
 80079b6:	ec53 2b10 	vmov	r2, r3, d0
 80079ba:	ee10 0a10 	vmov	r0, s0
 80079be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80079c2:	e7d1      	b.n	8007968 <sin+0x30>
 80079c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079c8:	ed9d 0b00 	vldr	d0, [sp]
 80079cc:	f000 fa18 	bl	8007e00 <__kernel_cos>
 80079d0:	e7f1      	b.n	80079b6 <sin+0x7e>
 80079d2:	bf00      	nop
 80079d4:	f3af 8000 	nop.w
	...
 80079e0:	3fe921fb 	.word	0x3fe921fb
 80079e4:	7fefffff 	.word	0x7fefffff

080079e8 <__ieee754_rem_pio2>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	ed2d 8b02 	vpush	{d8}
 80079f0:	ec55 4b10 	vmov	r4, r5, d0
 80079f4:	4bca      	ldr	r3, [pc, #808]	; (8007d20 <__ieee754_rem_pio2+0x338>)
 80079f6:	b08b      	sub	sp, #44	; 0x2c
 80079f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80079fc:	4598      	cmp	r8, r3
 80079fe:	4682      	mov	sl, r0
 8007a00:	9502      	str	r5, [sp, #8]
 8007a02:	dc08      	bgt.n	8007a16 <__ieee754_rem_pio2+0x2e>
 8007a04:	2200      	movs	r2, #0
 8007a06:	2300      	movs	r3, #0
 8007a08:	ed80 0b00 	vstr	d0, [r0]
 8007a0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007a10:	f04f 0b00 	mov.w	fp, #0
 8007a14:	e028      	b.n	8007a68 <__ieee754_rem_pio2+0x80>
 8007a16:	4bc3      	ldr	r3, [pc, #780]	; (8007d24 <__ieee754_rem_pio2+0x33c>)
 8007a18:	4598      	cmp	r8, r3
 8007a1a:	dc78      	bgt.n	8007b0e <__ieee754_rem_pio2+0x126>
 8007a1c:	9b02      	ldr	r3, [sp, #8]
 8007a1e:	4ec2      	ldr	r6, [pc, #776]	; (8007d28 <__ieee754_rem_pio2+0x340>)
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	ee10 0a10 	vmov	r0, s0
 8007a26:	a3b0      	add	r3, pc, #704	; (adr r3, 8007ce8 <__ieee754_rem_pio2+0x300>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	dd39      	ble.n	8007aa4 <__ieee754_rem_pio2+0xbc>
 8007a30:	f7f8 fc22 	bl	8000278 <__aeabi_dsub>
 8007a34:	45b0      	cmp	r8, r6
 8007a36:	4604      	mov	r4, r0
 8007a38:	460d      	mov	r5, r1
 8007a3a:	d01b      	beq.n	8007a74 <__ieee754_rem_pio2+0x8c>
 8007a3c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007cf0 <__ieee754_rem_pio2+0x308>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc19 	bl	8000278 <__aeabi_dsub>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	e9ca 2300 	strd	r2, r3, [sl]
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 fc11 	bl	8000278 <__aeabi_dsub>
 8007a56:	a3a6      	add	r3, pc, #664	; (adr r3, 8007cf0 <__ieee754_rem_pio2+0x308>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f7f8 fc0c 	bl	8000278 <__aeabi_dsub>
 8007a60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a64:	f04f 0b01 	mov.w	fp, #1
 8007a68:	4658      	mov	r0, fp
 8007a6a:	b00b      	add	sp, #44	; 0x2c
 8007a6c:	ecbd 8b02 	vpop	{d8}
 8007a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	a3a0      	add	r3, pc, #640	; (adr r3, 8007cf8 <__ieee754_rem_pio2+0x310>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fbfd 	bl	8000278 <__aeabi_dsub>
 8007a7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007d00 <__ieee754_rem_pio2+0x318>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	4604      	mov	r4, r0
 8007a86:	460d      	mov	r5, r1
 8007a88:	f7f8 fbf6 	bl	8000278 <__aeabi_dsub>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	e9ca 2300 	strd	r2, r3, [sl]
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 fbee 	bl	8000278 <__aeabi_dsub>
 8007a9c:	a398      	add	r3, pc, #608	; (adr r3, 8007d00 <__ieee754_rem_pio2+0x318>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	e7db      	b.n	8007a5c <__ieee754_rem_pio2+0x74>
 8007aa4:	f7f8 fbea 	bl	800027c <__adddf3>
 8007aa8:	45b0      	cmp	r8, r6
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	d016      	beq.n	8007ade <__ieee754_rem_pio2+0xf6>
 8007ab0:	a38f      	add	r3, pc, #572	; (adr r3, 8007cf0 <__ieee754_rem_pio2+0x308>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f7f8 fbe1 	bl	800027c <__adddf3>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	e9ca 2300 	strd	r2, r3, [sl]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f7f8 fbd7 	bl	8000278 <__aeabi_dsub>
 8007aca:	a389      	add	r3, pc, #548	; (adr r3, 8007cf0 <__ieee754_rem_pio2+0x308>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f7f8 fbd4 	bl	800027c <__adddf3>
 8007ad4:	f04f 3bff 	mov.w	fp, #4294967295
 8007ad8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007adc:	e7c4      	b.n	8007a68 <__ieee754_rem_pio2+0x80>
 8007ade:	a386      	add	r3, pc, #536	; (adr r3, 8007cf8 <__ieee754_rem_pio2+0x310>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fbca 	bl	800027c <__adddf3>
 8007ae8:	a385      	add	r3, pc, #532	; (adr r3, 8007d00 <__ieee754_rem_pio2+0x318>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	4604      	mov	r4, r0
 8007af0:	460d      	mov	r5, r1
 8007af2:	f7f8 fbc3 	bl	800027c <__adddf3>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	e9ca 2300 	strd	r2, r3, [sl]
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fbb9 	bl	8000278 <__aeabi_dsub>
 8007b06:	a37e      	add	r3, pc, #504	; (adr r3, 8007d00 <__ieee754_rem_pio2+0x318>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	e7e0      	b.n	8007ad0 <__ieee754_rem_pio2+0xe8>
 8007b0e:	4b87      	ldr	r3, [pc, #540]	; (8007d2c <__ieee754_rem_pio2+0x344>)
 8007b10:	4598      	cmp	r8, r3
 8007b12:	f300 80d9 	bgt.w	8007cc8 <__ieee754_rem_pio2+0x2e0>
 8007b16:	f000 fe49 	bl	80087ac <fabs>
 8007b1a:	ec55 4b10 	vmov	r4, r5, d0
 8007b1e:	ee10 0a10 	vmov	r0, s0
 8007b22:	a379      	add	r3, pc, #484	; (adr r3, 8007d08 <__ieee754_rem_pio2+0x320>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fd5d 	bl	80005e8 <__aeabi_dmul>
 8007b2e:	4b80      	ldr	r3, [pc, #512]	; (8007d30 <__ieee754_rem_pio2+0x348>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fba3 	bl	800027c <__adddf3>
 8007b36:	f7f8 fff1 	bl	8000b1c <__aeabi_d2iz>
 8007b3a:	4683      	mov	fp, r0
 8007b3c:	f7f8 fcea 	bl	8000514 <__aeabi_i2d>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	ec43 2b18 	vmov	d8, r2, r3
 8007b48:	a367      	add	r3, pc, #412	; (adr r3, 8007ce8 <__ieee754_rem_pio2+0x300>)
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	f7f8 fd4b 	bl	80005e8 <__aeabi_dmul>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 fb8d 	bl	8000278 <__aeabi_dsub>
 8007b5e:	a364      	add	r3, pc, #400	; (adr r3, 8007cf0 <__ieee754_rem_pio2+0x308>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	ec51 0b18 	vmov	r0, r1, d8
 8007b6c:	f7f8 fd3c 	bl	80005e8 <__aeabi_dmul>
 8007b70:	f1bb 0f1f 	cmp.w	fp, #31
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	dc0d      	bgt.n	8007b96 <__ieee754_rem_pio2+0x1ae>
 8007b7a:	4b6e      	ldr	r3, [pc, #440]	; (8007d34 <__ieee754_rem_pio2+0x34c>)
 8007b7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b84:	4543      	cmp	r3, r8
 8007b86:	d006      	beq.n	8007b96 <__ieee754_rem_pio2+0x1ae>
 8007b88:	4622      	mov	r2, r4
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	f7f8 fb72 	bl	8000278 <__aeabi_dsub>
 8007b94:	e00f      	b.n	8007bb6 <__ieee754_rem_pio2+0x1ce>
 8007b96:	462b      	mov	r3, r5
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 fb6b 	bl	8000278 <__aeabi_dsub>
 8007ba2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007bac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007bb0:	f1b8 0f10 	cmp.w	r8, #16
 8007bb4:	dc02      	bgt.n	8007bbc <__ieee754_rem_pio2+0x1d4>
 8007bb6:	e9ca 0100 	strd	r0, r1, [sl]
 8007bba:	e039      	b.n	8007c30 <__ieee754_rem_pio2+0x248>
 8007bbc:	a34e      	add	r3, pc, #312	; (adr r3, 8007cf8 <__ieee754_rem_pio2+0x310>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	ec51 0b18 	vmov	r0, r1, d8
 8007bc6:	f7f8 fd0f 	bl	80005e8 <__aeabi_dmul>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 fb4f 	bl	8000278 <__aeabi_dsub>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4680      	mov	r8, r0
 8007be0:	4689      	mov	r9, r1
 8007be2:	4630      	mov	r0, r6
 8007be4:	4639      	mov	r1, r7
 8007be6:	f7f8 fb47 	bl	8000278 <__aeabi_dsub>
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	f7f8 fb43 	bl	8000278 <__aeabi_dsub>
 8007bf2:	a343      	add	r3, pc, #268	; (adr r3, 8007d00 <__ieee754_rem_pio2+0x318>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	ec51 0b18 	vmov	r0, r1, d8
 8007c00:	f7f8 fcf2 	bl	80005e8 <__aeabi_dmul>
 8007c04:	4622      	mov	r2, r4
 8007c06:	462b      	mov	r3, r5
 8007c08:	f7f8 fb36 	bl	8000278 <__aeabi_dsub>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4604      	mov	r4, r0
 8007c12:	460d      	mov	r5, r1
 8007c14:	4640      	mov	r0, r8
 8007c16:	4649      	mov	r1, r9
 8007c18:	f7f8 fb2e 	bl	8000278 <__aeabi_dsub>
 8007c1c:	9a03      	ldr	r2, [sp, #12]
 8007c1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b31      	cmp	r3, #49	; 0x31
 8007c26:	dc24      	bgt.n	8007c72 <__ieee754_rem_pio2+0x28a>
 8007c28:	e9ca 0100 	strd	r0, r1, [sl]
 8007c2c:	4646      	mov	r6, r8
 8007c2e:	464f      	mov	r7, r9
 8007c30:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c34:	4630      	mov	r0, r6
 8007c36:	4642      	mov	r2, r8
 8007c38:	464b      	mov	r3, r9
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 fb1c 	bl	8000278 <__aeabi_dsub>
 8007c40:	462b      	mov	r3, r5
 8007c42:	4622      	mov	r2, r4
 8007c44:	f7f8 fb18 	bl	8000278 <__aeabi_dsub>
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c50:	f6bf af0a 	bge.w	8007a68 <__ieee754_rem_pio2+0x80>
 8007c54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c58:	f8ca 3004 	str.w	r3, [sl, #4]
 8007c5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c60:	f8ca 8000 	str.w	r8, [sl]
 8007c64:	f8ca 0008 	str.w	r0, [sl, #8]
 8007c68:	f8ca 300c 	str.w	r3, [sl, #12]
 8007c6c:	f1cb 0b00 	rsb	fp, fp, #0
 8007c70:	e6fa      	b.n	8007a68 <__ieee754_rem_pio2+0x80>
 8007c72:	a327      	add	r3, pc, #156	; (adr r3, 8007d10 <__ieee754_rem_pio2+0x328>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	ec51 0b18 	vmov	r0, r1, d8
 8007c7c:	f7f8 fcb4 	bl	80005e8 <__aeabi_dmul>
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 faf4 	bl	8000278 <__aeabi_dsub>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4606      	mov	r6, r0
 8007c96:	460f      	mov	r7, r1
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 faec 	bl	8000278 <__aeabi_dsub>
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	462b      	mov	r3, r5
 8007ca4:	f7f8 fae8 	bl	8000278 <__aeabi_dsub>
 8007ca8:	a31b      	add	r3, pc, #108	; (adr r3, 8007d18 <__ieee754_rem_pio2+0x330>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	4604      	mov	r4, r0
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	ec51 0b18 	vmov	r0, r1, d8
 8007cb6:	f7f8 fc97 	bl	80005e8 <__aeabi_dmul>
 8007cba:	4622      	mov	r2, r4
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	f7f8 fadb 	bl	8000278 <__aeabi_dsub>
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	e75f      	b.n	8007b88 <__ieee754_rem_pio2+0x1a0>
 8007cc8:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <__ieee754_rem_pio2+0x350>)
 8007cca:	4598      	cmp	r8, r3
 8007ccc:	dd36      	ble.n	8007d3c <__ieee754_rem_pio2+0x354>
 8007cce:	ee10 2a10 	vmov	r2, s0
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 face 	bl	8000278 <__aeabi_dsub>
 8007cdc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ce0:	e9ca 0100 	strd	r0, r1, [sl]
 8007ce4:	e694      	b.n	8007a10 <__ieee754_rem_pio2+0x28>
 8007ce6:	bf00      	nop
 8007ce8:	54400000 	.word	0x54400000
 8007cec:	3ff921fb 	.word	0x3ff921fb
 8007cf0:	1a626331 	.word	0x1a626331
 8007cf4:	3dd0b461 	.word	0x3dd0b461
 8007cf8:	1a600000 	.word	0x1a600000
 8007cfc:	3dd0b461 	.word	0x3dd0b461
 8007d00:	2e037073 	.word	0x2e037073
 8007d04:	3ba3198a 	.word	0x3ba3198a
 8007d08:	6dc9c883 	.word	0x6dc9c883
 8007d0c:	3fe45f30 	.word	0x3fe45f30
 8007d10:	2e000000 	.word	0x2e000000
 8007d14:	3ba3198a 	.word	0x3ba3198a
 8007d18:	252049c1 	.word	0x252049c1
 8007d1c:	397b839a 	.word	0x397b839a
 8007d20:	3fe921fb 	.word	0x3fe921fb
 8007d24:	4002d97b 	.word	0x4002d97b
 8007d28:	3ff921fb 	.word	0x3ff921fb
 8007d2c:	413921fb 	.word	0x413921fb
 8007d30:	3fe00000 	.word	0x3fe00000
 8007d34:	08008e4c 	.word	0x08008e4c
 8007d38:	7fefffff 	.word	0x7fefffff
 8007d3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007d40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007d44:	ee10 0a10 	vmov	r0, s0
 8007d48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007d4c:	ee10 6a10 	vmov	r6, s0
 8007d50:	460f      	mov	r7, r1
 8007d52:	f7f8 fee3 	bl	8000b1c <__aeabi_d2iz>
 8007d56:	f7f8 fbdd 	bl	8000514 <__aeabi_i2d>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4630      	mov	r0, r6
 8007d60:	4639      	mov	r1, r7
 8007d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d66:	f7f8 fa87 	bl	8000278 <__aeabi_dsub>
 8007d6a:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <__ieee754_rem_pio2+0x410>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f7f8 fc3b 	bl	80005e8 <__aeabi_dmul>
 8007d72:	460f      	mov	r7, r1
 8007d74:	4606      	mov	r6, r0
 8007d76:	f7f8 fed1 	bl	8000b1c <__aeabi_d2iz>
 8007d7a:	f7f8 fbcb 	bl	8000514 <__aeabi_i2d>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4630      	mov	r0, r6
 8007d84:	4639      	mov	r1, r7
 8007d86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d8a:	f7f8 fa75 	bl	8000278 <__aeabi_dsub>
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <__ieee754_rem_pio2+0x410>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	f7f8 fc29 	bl	80005e8 <__aeabi_dmul>
 8007d96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d9a:	ad04      	add	r5, sp, #16
 8007d9c:	f04f 0803 	mov.w	r8, #3
 8007da0:	46a9      	mov	r9, r5
 8007da2:	2600      	movs	r6, #0
 8007da4:	2700      	movs	r7, #0
 8007da6:	4632      	mov	r2, r6
 8007da8:	463b      	mov	r3, r7
 8007daa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007dae:	46c3      	mov	fp, r8
 8007db0:	3d08      	subs	r5, #8
 8007db2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007db6:	f7f8 fe7f 	bl	8000ab8 <__aeabi_dcmpeq>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d1f3      	bne.n	8007da6 <__ieee754_rem_pio2+0x3be>
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <__ieee754_rem_pio2+0x414>)
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	465b      	mov	r3, fp
 8007dca:	4651      	mov	r1, sl
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f000 f8df 	bl	8007f90 <__kernel_rem_pio2>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	4683      	mov	fp, r0
 8007dd8:	f6bf ae46 	bge.w	8007a68 <__ieee754_rem_pio2+0x80>
 8007ddc:	e9da 2100 	ldrd	r2, r1, [sl]
 8007de0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007de4:	e9ca 2300 	strd	r2, r3, [sl]
 8007de8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007df0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007df4:	e73a      	b.n	8007c6c <__ieee754_rem_pio2+0x284>
 8007df6:	bf00      	nop
 8007df8:	41700000 	.word	0x41700000
 8007dfc:	08008ecc 	.word	0x08008ecc

08007e00 <__kernel_cos>:
 8007e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	ec57 6b10 	vmov	r6, r7, d0
 8007e08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007e0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007e10:	ed8d 1b00 	vstr	d1, [sp]
 8007e14:	da07      	bge.n	8007e26 <__kernel_cos+0x26>
 8007e16:	ee10 0a10 	vmov	r0, s0
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe7e 	bl	8000b1c <__aeabi_d2iz>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f000 8088 	beq.w	8007f36 <__kernel_cos+0x136>
 8007e26:	4632      	mov	r2, r6
 8007e28:	463b      	mov	r3, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	f7f8 fbdb 	bl	80005e8 <__aeabi_dmul>
 8007e32:	4b51      	ldr	r3, [pc, #324]	; (8007f78 <__kernel_cos+0x178>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	f7f8 fbd5 	bl	80005e8 <__aeabi_dmul>
 8007e3e:	a340      	add	r3, pc, #256	; (adr r3, 8007f40 <__kernel_cos+0x140>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	4682      	mov	sl, r0
 8007e46:	468b      	mov	fp, r1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	f7f8 fbcc 	bl	80005e8 <__aeabi_dmul>
 8007e50:	a33d      	add	r3, pc, #244	; (adr r3, 8007f48 <__kernel_cos+0x148>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fa11 	bl	800027c <__adddf3>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	f7f8 fbc3 	bl	80005e8 <__aeabi_dmul>
 8007e62:	a33b      	add	r3, pc, #236	; (adr r3, 8007f50 <__kernel_cos+0x150>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f7f8 fa06 	bl	8000278 <__aeabi_dsub>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f7f8 fbba 	bl	80005e8 <__aeabi_dmul>
 8007e74:	a338      	add	r3, pc, #224	; (adr r3, 8007f58 <__kernel_cos+0x158>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 f9ff 	bl	800027c <__adddf3>
 8007e7e:	4622      	mov	r2, r4
 8007e80:	462b      	mov	r3, r5
 8007e82:	f7f8 fbb1 	bl	80005e8 <__aeabi_dmul>
 8007e86:	a336      	add	r3, pc, #216	; (adr r3, 8007f60 <__kernel_cos+0x160>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f7f8 f9f4 	bl	8000278 <__aeabi_dsub>
 8007e90:	4622      	mov	r2, r4
 8007e92:	462b      	mov	r3, r5
 8007e94:	f7f8 fba8 	bl	80005e8 <__aeabi_dmul>
 8007e98:	a333      	add	r3, pc, #204	; (adr r3, 8007f68 <__kernel_cos+0x168>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f7f8 f9ed 	bl	800027c <__adddf3>
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	f7f8 fb9f 	bl	80005e8 <__aeabi_dmul>
 8007eaa:	4622      	mov	r2, r4
 8007eac:	462b      	mov	r3, r5
 8007eae:	f7f8 fb9b 	bl	80005e8 <__aeabi_dmul>
 8007eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 fb93 	bl	80005e8 <__aeabi_dmul>
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7f8 f9d5 	bl	8000278 <__aeabi_dsub>
 8007ece:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <__kernel_cos+0x17c>)
 8007ed0:	4598      	cmp	r8, r3
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	dc10      	bgt.n	8007efa <__kernel_cos+0xfa>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 f9ca 	bl	8000278 <__aeabi_dsub>
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4926      	ldr	r1, [pc, #152]	; (8007f80 <__kernel_cos+0x180>)
 8007ee8:	4602      	mov	r2, r0
 8007eea:	2000      	movs	r0, #0
 8007eec:	f7f8 f9c4 	bl	8000278 <__aeabi_dsub>
 8007ef0:	ec41 0b10 	vmov	d0, r0, r1
 8007ef4:	b003      	add	sp, #12
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	4b22      	ldr	r3, [pc, #136]	; (8007f84 <__kernel_cos+0x184>)
 8007efc:	4920      	ldr	r1, [pc, #128]	; (8007f80 <__kernel_cos+0x180>)
 8007efe:	4598      	cmp	r8, r3
 8007f00:	bfcc      	ite	gt
 8007f02:	4d21      	ldrgt	r5, [pc, #132]	; (8007f88 <__kernel_cos+0x188>)
 8007f04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007f08:	2400      	movs	r4, #0
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f7f8 f9b2 	bl	8000278 <__aeabi_dsub>
 8007f14:	4622      	mov	r2, r4
 8007f16:	4680      	mov	r8, r0
 8007f18:	4689      	mov	r9, r1
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	4659      	mov	r1, fp
 8007f20:	f7f8 f9aa 	bl	8000278 <__aeabi_dsub>
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	f7f8 f9a6 	bl	8000278 <__aeabi_dsub>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	e7da      	b.n	8007eec <__kernel_cos+0xec>
 8007f36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007f70 <__kernel_cos+0x170>
 8007f3a:	e7db      	b.n	8007ef4 <__kernel_cos+0xf4>
 8007f3c:	f3af 8000 	nop.w
 8007f40:	be8838d4 	.word	0xbe8838d4
 8007f44:	bda8fae9 	.word	0xbda8fae9
 8007f48:	bdb4b1c4 	.word	0xbdb4b1c4
 8007f4c:	3e21ee9e 	.word	0x3e21ee9e
 8007f50:	809c52ad 	.word	0x809c52ad
 8007f54:	3e927e4f 	.word	0x3e927e4f
 8007f58:	19cb1590 	.word	0x19cb1590
 8007f5c:	3efa01a0 	.word	0x3efa01a0
 8007f60:	16c15177 	.word	0x16c15177
 8007f64:	3f56c16c 	.word	0x3f56c16c
 8007f68:	5555554c 	.word	0x5555554c
 8007f6c:	3fa55555 	.word	0x3fa55555
 8007f70:	00000000 	.word	0x00000000
 8007f74:	3ff00000 	.word	0x3ff00000
 8007f78:	3fe00000 	.word	0x3fe00000
 8007f7c:	3fd33332 	.word	0x3fd33332
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	3fe90000 	.word	0x3fe90000
 8007f88:	3fd20000 	.word	0x3fd20000
 8007f8c:	00000000 	.word	0x00000000

08007f90 <__kernel_rem_pio2>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	ed2d 8b02 	vpush	{d8}
 8007f98:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007f9c:	f112 0f14 	cmn.w	r2, #20
 8007fa0:	9308      	str	r3, [sp, #32]
 8007fa2:	9101      	str	r1, [sp, #4]
 8007fa4:	4bc4      	ldr	r3, [pc, #784]	; (80082b8 <__kernel_rem_pio2+0x328>)
 8007fa6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007fa8:	900b      	str	r0, [sp, #44]	; 0x2c
 8007faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	9b08      	ldr	r3, [sp, #32]
 8007fb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fb6:	bfa8      	it	ge
 8007fb8:	1ed4      	subge	r4, r2, #3
 8007fba:	9306      	str	r3, [sp, #24]
 8007fbc:	bfb2      	itee	lt
 8007fbe:	2400      	movlt	r4, #0
 8007fc0:	2318      	movge	r3, #24
 8007fc2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007fc6:	f06f 0317 	mvn.w	r3, #23
 8007fca:	fb04 3303 	mla	r3, r4, r3, r3
 8007fce:	eb03 0a02 	add.w	sl, r3, r2
 8007fd2:	9b02      	ldr	r3, [sp, #8]
 8007fd4:	9a06      	ldr	r2, [sp, #24]
 8007fd6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80082a8 <__kernel_rem_pio2+0x318>
 8007fda:	eb03 0802 	add.w	r8, r3, r2
 8007fde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007fe0:	1aa7      	subs	r7, r4, r2
 8007fe2:	ae22      	add	r6, sp, #136	; 0x88
 8007fe4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007fe8:	2500      	movs	r5, #0
 8007fea:	4545      	cmp	r5, r8
 8007fec:	dd13      	ble.n	8008016 <__kernel_rem_pio2+0x86>
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80082a8 <__kernel_rem_pio2+0x318>
 8007ff4:	aa22      	add	r2, sp, #136	; 0x88
 8007ff6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007ffa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	4598      	cmp	r8, r3
 8008006:	dc2f      	bgt.n	8008068 <__kernel_rem_pio2+0xd8>
 8008008:	ed8d 8b04 	vstr	d8, [sp, #16]
 800800c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008010:	462f      	mov	r7, r5
 8008012:	2600      	movs	r6, #0
 8008014:	e01b      	b.n	800804e <__kernel_rem_pio2+0xbe>
 8008016:	42ef      	cmn	r7, r5
 8008018:	d407      	bmi.n	800802a <__kernel_rem_pio2+0x9a>
 800801a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800801e:	f7f8 fa79 	bl	8000514 <__aeabi_i2d>
 8008022:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008026:	3501      	adds	r5, #1
 8008028:	e7df      	b.n	8007fea <__kernel_rem_pio2+0x5a>
 800802a:	ec51 0b18 	vmov	r0, r1, d8
 800802e:	e7f8      	b.n	8008022 <__kernel_rem_pio2+0x92>
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008038:	f7f8 fad6 	bl	80005e8 <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008044:	f7f8 f91a 	bl	800027c <__adddf3>
 8008048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800804c:	3601      	adds	r6, #1
 800804e:	9b06      	ldr	r3, [sp, #24]
 8008050:	429e      	cmp	r6, r3
 8008052:	f1a7 0708 	sub.w	r7, r7, #8
 8008056:	ddeb      	ble.n	8008030 <__kernel_rem_pio2+0xa0>
 8008058:	ed9d 7b04 	vldr	d7, [sp, #16]
 800805c:	f108 0801 	add.w	r8, r8, #1
 8008060:	ecab 7b02 	vstmia	fp!, {d7}
 8008064:	3508      	adds	r5, #8
 8008066:	e7cc      	b.n	8008002 <__kernel_rem_pio2+0x72>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	aa0e      	add	r2, sp, #56	; 0x38
 800806c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008070:	930d      	str	r3, [sp, #52]	; 0x34
 8008072:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008074:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008078:	9c02      	ldr	r4, [sp, #8]
 800807a:	930c      	str	r3, [sp, #48]	; 0x30
 800807c:	00e3      	lsls	r3, r4, #3
 800807e:	930a      	str	r3, [sp, #40]	; 0x28
 8008080:	ab9a      	add	r3, sp, #616	; 0x268
 8008082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008086:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800808a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800808e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008090:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008094:	46c3      	mov	fp, r8
 8008096:	46a1      	mov	r9, r4
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	f1a5 0508 	sub.w	r5, r5, #8
 80080a0:	dc77      	bgt.n	8008192 <__kernel_rem_pio2+0x202>
 80080a2:	ec47 6b10 	vmov	d0, r6, r7
 80080a6:	4650      	mov	r0, sl
 80080a8:	f000 fc0a 	bl	80088c0 <scalbn>
 80080ac:	ec57 6b10 	vmov	r6, r7, d0
 80080b0:	2200      	movs	r2, #0
 80080b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80080b6:	ee10 0a10 	vmov	r0, s0
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fa94 	bl	80005e8 <__aeabi_dmul>
 80080c0:	ec41 0b10 	vmov	d0, r0, r1
 80080c4:	f000 fb7c 	bl	80087c0 <floor>
 80080c8:	4b7c      	ldr	r3, [pc, #496]	; (80082bc <__kernel_rem_pio2+0x32c>)
 80080ca:	ec51 0b10 	vmov	r0, r1, d0
 80080ce:	2200      	movs	r2, #0
 80080d0:	f7f8 fa8a 	bl	80005e8 <__aeabi_dmul>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 f8cc 	bl	8000278 <__aeabi_dsub>
 80080e0:	460f      	mov	r7, r1
 80080e2:	4606      	mov	r6, r0
 80080e4:	f7f8 fd1a 	bl	8000b1c <__aeabi_d2iz>
 80080e8:	9004      	str	r0, [sp, #16]
 80080ea:	f7f8 fa13 	bl	8000514 <__aeabi_i2d>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 f8bf 	bl	8000278 <__aeabi_dsub>
 80080fa:	f1ba 0f00 	cmp.w	sl, #0
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	dd6d      	ble.n	80081e0 <__kernel_rem_pio2+0x250>
 8008104:	1e62      	subs	r2, r4, #1
 8008106:	ab0e      	add	r3, sp, #56	; 0x38
 8008108:	9d04      	ldr	r5, [sp, #16]
 800810a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800810e:	f1ca 0118 	rsb	r1, sl, #24
 8008112:	fa40 f301 	asr.w	r3, r0, r1
 8008116:	441d      	add	r5, r3
 8008118:	408b      	lsls	r3, r1
 800811a:	1ac0      	subs	r0, r0, r3
 800811c:	ab0e      	add	r3, sp, #56	; 0x38
 800811e:	9504      	str	r5, [sp, #16]
 8008120:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008124:	f1ca 0317 	rsb	r3, sl, #23
 8008128:	fa40 fb03 	asr.w	fp, r0, r3
 800812c:	f1bb 0f00 	cmp.w	fp, #0
 8008130:	dd65      	ble.n	80081fe <__kernel_rem_pio2+0x26e>
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	2200      	movs	r2, #0
 8008136:	3301      	adds	r3, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	4615      	mov	r5, r2
 800813c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008140:	4294      	cmp	r4, r2
 8008142:	f300 809c 	bgt.w	800827e <__kernel_rem_pio2+0x2ee>
 8008146:	f1ba 0f00 	cmp.w	sl, #0
 800814a:	dd07      	ble.n	800815c <__kernel_rem_pio2+0x1cc>
 800814c:	f1ba 0f01 	cmp.w	sl, #1
 8008150:	f000 80c0 	beq.w	80082d4 <__kernel_rem_pio2+0x344>
 8008154:	f1ba 0f02 	cmp.w	sl, #2
 8008158:	f000 80c6 	beq.w	80082e8 <__kernel_rem_pio2+0x358>
 800815c:	f1bb 0f02 	cmp.w	fp, #2
 8008160:	d14d      	bne.n	80081fe <__kernel_rem_pio2+0x26e>
 8008162:	4632      	mov	r2, r6
 8008164:	463b      	mov	r3, r7
 8008166:	4956      	ldr	r1, [pc, #344]	; (80082c0 <__kernel_rem_pio2+0x330>)
 8008168:	2000      	movs	r0, #0
 800816a:	f7f8 f885 	bl	8000278 <__aeabi_dsub>
 800816e:	4606      	mov	r6, r0
 8008170:	460f      	mov	r7, r1
 8008172:	2d00      	cmp	r5, #0
 8008174:	d043      	beq.n	80081fe <__kernel_rem_pio2+0x26e>
 8008176:	4650      	mov	r0, sl
 8008178:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80082b0 <__kernel_rem_pio2+0x320>
 800817c:	f000 fba0 	bl	80088c0 <scalbn>
 8008180:	4630      	mov	r0, r6
 8008182:	4639      	mov	r1, r7
 8008184:	ec53 2b10 	vmov	r2, r3, d0
 8008188:	f7f8 f876 	bl	8000278 <__aeabi_dsub>
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	e035      	b.n	80081fe <__kernel_rem_pio2+0x26e>
 8008192:	4b4c      	ldr	r3, [pc, #304]	; (80082c4 <__kernel_rem_pio2+0x334>)
 8008194:	2200      	movs	r2, #0
 8008196:	4630      	mov	r0, r6
 8008198:	4639      	mov	r1, r7
 800819a:	f7f8 fa25 	bl	80005e8 <__aeabi_dmul>
 800819e:	f7f8 fcbd 	bl	8000b1c <__aeabi_d2iz>
 80081a2:	f7f8 f9b7 	bl	8000514 <__aeabi_i2d>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	ec43 2b18 	vmov	d8, r2, r3
 80081ae:	4b46      	ldr	r3, [pc, #280]	; (80082c8 <__kernel_rem_pio2+0x338>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	f7f8 fa19 	bl	80005e8 <__aeabi_dmul>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 f85b 	bl	8000278 <__aeabi_dsub>
 80081c2:	f7f8 fcab 	bl	8000b1c <__aeabi_d2iz>
 80081c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081ca:	f84b 0b04 	str.w	r0, [fp], #4
 80081ce:	ec51 0b18 	vmov	r0, r1, d8
 80081d2:	f7f8 f853 	bl	800027c <__adddf3>
 80081d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	e75b      	b.n	8008098 <__kernel_rem_pio2+0x108>
 80081e0:	d106      	bne.n	80081f0 <__kernel_rem_pio2+0x260>
 80081e2:	1e63      	subs	r3, r4, #1
 80081e4:	aa0e      	add	r2, sp, #56	; 0x38
 80081e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80081ea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80081ee:	e79d      	b.n	800812c <__kernel_rem_pio2+0x19c>
 80081f0:	4b36      	ldr	r3, [pc, #216]	; (80082cc <__kernel_rem_pio2+0x33c>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	f7f8 fc7e 	bl	8000af4 <__aeabi_dcmpge>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d13d      	bne.n	8008278 <__kernel_rem_pio2+0x2e8>
 80081fc:	4683      	mov	fp, r0
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	4630      	mov	r0, r6
 8008204:	4639      	mov	r1, r7
 8008206:	f7f8 fc57 	bl	8000ab8 <__aeabi_dcmpeq>
 800820a:	2800      	cmp	r0, #0
 800820c:	f000 80c0 	beq.w	8008390 <__kernel_rem_pio2+0x400>
 8008210:	1e65      	subs	r5, r4, #1
 8008212:	462b      	mov	r3, r5
 8008214:	2200      	movs	r2, #0
 8008216:	9902      	ldr	r1, [sp, #8]
 8008218:	428b      	cmp	r3, r1
 800821a:	da6c      	bge.n	80082f6 <__kernel_rem_pio2+0x366>
 800821c:	2a00      	cmp	r2, #0
 800821e:	f000 8089 	beq.w	8008334 <__kernel_rem_pio2+0x3a4>
 8008222:	ab0e      	add	r3, sp, #56	; 0x38
 8008224:	f1aa 0a18 	sub.w	sl, sl, #24
 8008228:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 80ad 	beq.w	800838c <__kernel_rem_pio2+0x3fc>
 8008232:	4650      	mov	r0, sl
 8008234:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80082b0 <__kernel_rem_pio2+0x320>
 8008238:	f000 fb42 	bl	80088c0 <scalbn>
 800823c:	ab9a      	add	r3, sp, #616	; 0x268
 800823e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008242:	ec57 6b10 	vmov	r6, r7, d0
 8008246:	00ec      	lsls	r4, r5, #3
 8008248:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800824c:	46aa      	mov	sl, r5
 800824e:	f1ba 0f00 	cmp.w	sl, #0
 8008252:	f280 80d6 	bge.w	8008402 <__kernel_rem_pio2+0x472>
 8008256:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80082a8 <__kernel_rem_pio2+0x318>
 800825a:	462e      	mov	r6, r5
 800825c:	2e00      	cmp	r6, #0
 800825e:	f2c0 8104 	blt.w	800846a <__kernel_rem_pio2+0x4da>
 8008262:	ab72      	add	r3, sp, #456	; 0x1c8
 8008264:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008268:	f8df a064 	ldr.w	sl, [pc, #100]	; 80082d0 <__kernel_rem_pio2+0x340>
 800826c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008270:	f04f 0800 	mov.w	r8, #0
 8008274:	1baf      	subs	r7, r5, r6
 8008276:	e0ea      	b.n	800844e <__kernel_rem_pio2+0x4be>
 8008278:	f04f 0b02 	mov.w	fp, #2
 800827c:	e759      	b.n	8008132 <__kernel_rem_pio2+0x1a2>
 800827e:	f8d8 3000 	ldr.w	r3, [r8]
 8008282:	b955      	cbnz	r5, 800829a <__kernel_rem_pio2+0x30a>
 8008284:	b123      	cbz	r3, 8008290 <__kernel_rem_pio2+0x300>
 8008286:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800828a:	f8c8 3000 	str.w	r3, [r8]
 800828e:	2301      	movs	r3, #1
 8008290:	3201      	adds	r2, #1
 8008292:	f108 0804 	add.w	r8, r8, #4
 8008296:	461d      	mov	r5, r3
 8008298:	e752      	b.n	8008140 <__kernel_rem_pio2+0x1b0>
 800829a:	1acb      	subs	r3, r1, r3
 800829c:	f8c8 3000 	str.w	r3, [r8]
 80082a0:	462b      	mov	r3, r5
 80082a2:	e7f5      	b.n	8008290 <__kernel_rem_pio2+0x300>
 80082a4:	f3af 8000 	nop.w
	...
 80082b4:	3ff00000 	.word	0x3ff00000
 80082b8:	08009018 	.word	0x08009018
 80082bc:	40200000 	.word	0x40200000
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	3e700000 	.word	0x3e700000
 80082c8:	41700000 	.word	0x41700000
 80082cc:	3fe00000 	.word	0x3fe00000
 80082d0:	08008fd8 	.word	0x08008fd8
 80082d4:	1e62      	subs	r2, r4, #1
 80082d6:	ab0e      	add	r3, sp, #56	; 0x38
 80082d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80082e0:	a90e      	add	r1, sp, #56	; 0x38
 80082e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80082e6:	e739      	b.n	800815c <__kernel_rem_pio2+0x1cc>
 80082e8:	1e62      	subs	r2, r4, #1
 80082ea:	ab0e      	add	r3, sp, #56	; 0x38
 80082ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80082f4:	e7f4      	b.n	80082e0 <__kernel_rem_pio2+0x350>
 80082f6:	a90e      	add	r1, sp, #56	; 0x38
 80082f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	430a      	orrs	r2, r1
 8008300:	e789      	b.n	8008216 <__kernel_rem_pio2+0x286>
 8008302:	3301      	adds	r3, #1
 8008304:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008308:	2900      	cmp	r1, #0
 800830a:	d0fa      	beq.n	8008302 <__kernel_rem_pio2+0x372>
 800830c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800830e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008312:	446a      	add	r2, sp
 8008314:	3a98      	subs	r2, #152	; 0x98
 8008316:	920a      	str	r2, [sp, #40]	; 0x28
 8008318:	9a08      	ldr	r2, [sp, #32]
 800831a:	18e3      	adds	r3, r4, r3
 800831c:	18a5      	adds	r5, r4, r2
 800831e:	aa22      	add	r2, sp, #136	; 0x88
 8008320:	f104 0801 	add.w	r8, r4, #1
 8008324:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	4543      	cmp	r3, r8
 800832e:	da04      	bge.n	800833a <__kernel_rem_pio2+0x3aa>
 8008330:	461c      	mov	r4, r3
 8008332:	e6a3      	b.n	800807c <__kernel_rem_pio2+0xec>
 8008334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008336:	2301      	movs	r3, #1
 8008338:	e7e4      	b.n	8008304 <__kernel_rem_pio2+0x374>
 800833a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800833c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008340:	f7f8 f8e8 	bl	8000514 <__aeabi_i2d>
 8008344:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834a:	46ab      	mov	fp, r5
 800834c:	461c      	mov	r4, r3
 800834e:	f04f 0900 	mov.w	r9, #0
 8008352:	2600      	movs	r6, #0
 8008354:	2700      	movs	r7, #0
 8008356:	9b06      	ldr	r3, [sp, #24]
 8008358:	4599      	cmp	r9, r3
 800835a:	dd06      	ble.n	800836a <__kernel_rem_pio2+0x3da>
 800835c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008362:	f108 0801 	add.w	r8, r8, #1
 8008366:	930a      	str	r3, [sp, #40]	; 0x28
 8008368:	e7df      	b.n	800832a <__kernel_rem_pio2+0x39a>
 800836a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800836e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008372:	f7f8 f939 	bl	80005e8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f7 ff7d 	bl	800027c <__adddf3>
 8008382:	f109 0901 	add.w	r9, r9, #1
 8008386:	4606      	mov	r6, r0
 8008388:	460f      	mov	r7, r1
 800838a:	e7e4      	b.n	8008356 <__kernel_rem_pio2+0x3c6>
 800838c:	3d01      	subs	r5, #1
 800838e:	e748      	b.n	8008222 <__kernel_rem_pio2+0x292>
 8008390:	ec47 6b10 	vmov	d0, r6, r7
 8008394:	f1ca 0000 	rsb	r0, sl, #0
 8008398:	f000 fa92 	bl	80088c0 <scalbn>
 800839c:	ec57 6b10 	vmov	r6, r7, d0
 80083a0:	4ba0      	ldr	r3, [pc, #640]	; (8008624 <__kernel_rem_pio2+0x694>)
 80083a2:	ee10 0a10 	vmov	r0, s0
 80083a6:	2200      	movs	r2, #0
 80083a8:	4639      	mov	r1, r7
 80083aa:	f7f8 fba3 	bl	8000af4 <__aeabi_dcmpge>
 80083ae:	b1f8      	cbz	r0, 80083f0 <__kernel_rem_pio2+0x460>
 80083b0:	4b9d      	ldr	r3, [pc, #628]	; (8008628 <__kernel_rem_pio2+0x698>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f8 f916 	bl	80005e8 <__aeabi_dmul>
 80083bc:	f7f8 fbae 	bl	8000b1c <__aeabi_d2iz>
 80083c0:	4680      	mov	r8, r0
 80083c2:	f7f8 f8a7 	bl	8000514 <__aeabi_i2d>
 80083c6:	4b97      	ldr	r3, [pc, #604]	; (8008624 <__kernel_rem_pio2+0x694>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	f7f8 f90d 	bl	80005e8 <__aeabi_dmul>
 80083ce:	460b      	mov	r3, r1
 80083d0:	4602      	mov	r2, r0
 80083d2:	4639      	mov	r1, r7
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7f7 ff4f 	bl	8000278 <__aeabi_dsub>
 80083da:	f7f8 fb9f 	bl	8000b1c <__aeabi_d2iz>
 80083de:	1c65      	adds	r5, r4, #1
 80083e0:	ab0e      	add	r3, sp, #56	; 0x38
 80083e2:	f10a 0a18 	add.w	sl, sl, #24
 80083e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80083ea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80083ee:	e720      	b.n	8008232 <__kernel_rem_pio2+0x2a2>
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f8 fb92 	bl	8000b1c <__aeabi_d2iz>
 80083f8:	ab0e      	add	r3, sp, #56	; 0x38
 80083fa:	4625      	mov	r5, r4
 80083fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008400:	e717      	b.n	8008232 <__kernel_rem_pio2+0x2a2>
 8008402:	ab0e      	add	r3, sp, #56	; 0x38
 8008404:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008408:	f7f8 f884 	bl	8000514 <__aeabi_i2d>
 800840c:	4632      	mov	r2, r6
 800840e:	463b      	mov	r3, r7
 8008410:	f7f8 f8ea 	bl	80005e8 <__aeabi_dmul>
 8008414:	4b84      	ldr	r3, [pc, #528]	; (8008628 <__kernel_rem_pio2+0x698>)
 8008416:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800841a:	2200      	movs	r2, #0
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 f8e2 	bl	80005e8 <__aeabi_dmul>
 8008424:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008428:	4606      	mov	r6, r0
 800842a:	460f      	mov	r7, r1
 800842c:	e70f      	b.n	800824e <__kernel_rem_pio2+0x2be>
 800842e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008432:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008436:	f7f8 f8d7 	bl	80005e8 <__aeabi_dmul>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008442:	f7f7 ff1b 	bl	800027c <__adddf3>
 8008446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800844a:	f108 0801 	add.w	r8, r8, #1
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	4598      	cmp	r8, r3
 8008452:	dc01      	bgt.n	8008458 <__kernel_rem_pio2+0x4c8>
 8008454:	45b8      	cmp	r8, r7
 8008456:	ddea      	ble.n	800842e <__kernel_rem_pio2+0x49e>
 8008458:	ed9d 7b06 	vldr	d7, [sp, #24]
 800845c:	ab4a      	add	r3, sp, #296	; 0x128
 800845e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008462:	ed87 7b00 	vstr	d7, [r7]
 8008466:	3e01      	subs	r6, #1
 8008468:	e6f8      	b.n	800825c <__kernel_rem_pio2+0x2cc>
 800846a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800846c:	2b02      	cmp	r3, #2
 800846e:	dc0b      	bgt.n	8008488 <__kernel_rem_pio2+0x4f8>
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc35      	bgt.n	80084e0 <__kernel_rem_pio2+0x550>
 8008474:	d059      	beq.n	800852a <__kernel_rem_pio2+0x59a>
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	f003 0007 	and.w	r0, r3, #7
 800847c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008480:	ecbd 8b02 	vpop	{d8}
 8008484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008488:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800848a:	2b03      	cmp	r3, #3
 800848c:	d1f3      	bne.n	8008476 <__kernel_rem_pio2+0x4e6>
 800848e:	ab4a      	add	r3, sp, #296	; 0x128
 8008490:	4423      	add	r3, r4
 8008492:	9306      	str	r3, [sp, #24]
 8008494:	461c      	mov	r4, r3
 8008496:	469a      	mov	sl, r3
 8008498:	9502      	str	r5, [sp, #8]
 800849a:	9b02      	ldr	r3, [sp, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f1aa 0a08 	sub.w	sl, sl, #8
 80084a2:	dc6b      	bgt.n	800857c <__kernel_rem_pio2+0x5ec>
 80084a4:	46aa      	mov	sl, r5
 80084a6:	f1ba 0f01 	cmp.w	sl, #1
 80084aa:	f1a4 0408 	sub.w	r4, r4, #8
 80084ae:	f300 8085 	bgt.w	80085bc <__kernel_rem_pio2+0x62c>
 80084b2:	9c06      	ldr	r4, [sp, #24]
 80084b4:	2000      	movs	r0, #0
 80084b6:	3408      	adds	r4, #8
 80084b8:	2100      	movs	r1, #0
 80084ba:	2d01      	cmp	r5, #1
 80084bc:	f300 809d 	bgt.w	80085fa <__kernel_rem_pio2+0x66a>
 80084c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80084c4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80084c8:	f1bb 0f00 	cmp.w	fp, #0
 80084cc:	f040 809b 	bne.w	8008606 <__kernel_rem_pio2+0x676>
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	e9c3 5600 	strd	r5, r6, [r3]
 80084d6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80084da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80084de:	e7ca      	b.n	8008476 <__kernel_rem_pio2+0x4e6>
 80084e0:	3408      	adds	r4, #8
 80084e2:	ab4a      	add	r3, sp, #296	; 0x128
 80084e4:	441c      	add	r4, r3
 80084e6:	462e      	mov	r6, r5
 80084e8:	2000      	movs	r0, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	2e00      	cmp	r6, #0
 80084ee:	da36      	bge.n	800855e <__kernel_rem_pio2+0x5ce>
 80084f0:	f1bb 0f00 	cmp.w	fp, #0
 80084f4:	d039      	beq.n	800856a <__kernel_rem_pio2+0x5da>
 80084f6:	4602      	mov	r2, r0
 80084f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084fc:	9c01      	ldr	r4, [sp, #4]
 80084fe:	e9c4 2300 	strd	r2, r3, [r4]
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800850a:	f7f7 feb5 	bl	8000278 <__aeabi_dsub>
 800850e:	ae4c      	add	r6, sp, #304	; 0x130
 8008510:	2401      	movs	r4, #1
 8008512:	42a5      	cmp	r5, r4
 8008514:	da2c      	bge.n	8008570 <__kernel_rem_pio2+0x5e0>
 8008516:	f1bb 0f00 	cmp.w	fp, #0
 800851a:	d002      	beq.n	8008522 <__kernel_rem_pio2+0x592>
 800851c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008520:	4619      	mov	r1, r3
 8008522:	9b01      	ldr	r3, [sp, #4]
 8008524:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008528:	e7a5      	b.n	8008476 <__kernel_rem_pio2+0x4e6>
 800852a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800852e:	eb0d 0403 	add.w	r4, sp, r3
 8008532:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008536:	2000      	movs	r0, #0
 8008538:	2100      	movs	r1, #0
 800853a:	2d00      	cmp	r5, #0
 800853c:	da09      	bge.n	8008552 <__kernel_rem_pio2+0x5c2>
 800853e:	f1bb 0f00 	cmp.w	fp, #0
 8008542:	d002      	beq.n	800854a <__kernel_rem_pio2+0x5ba>
 8008544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008548:	4619      	mov	r1, r3
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	e9c3 0100 	strd	r0, r1, [r3]
 8008550:	e791      	b.n	8008476 <__kernel_rem_pio2+0x4e6>
 8008552:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008556:	f7f7 fe91 	bl	800027c <__adddf3>
 800855a:	3d01      	subs	r5, #1
 800855c:	e7ed      	b.n	800853a <__kernel_rem_pio2+0x5aa>
 800855e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008562:	f7f7 fe8b 	bl	800027c <__adddf3>
 8008566:	3e01      	subs	r6, #1
 8008568:	e7c0      	b.n	80084ec <__kernel_rem_pio2+0x55c>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	e7c5      	b.n	80084fc <__kernel_rem_pio2+0x56c>
 8008570:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008574:	f7f7 fe82 	bl	800027c <__adddf3>
 8008578:	3401      	adds	r4, #1
 800857a:	e7ca      	b.n	8008512 <__kernel_rem_pio2+0x582>
 800857c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008580:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008584:	9b02      	ldr	r3, [sp, #8]
 8008586:	3b01      	subs	r3, #1
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	4632      	mov	r2, r6
 800858c:	463b      	mov	r3, r7
 800858e:	4640      	mov	r0, r8
 8008590:	4649      	mov	r1, r9
 8008592:	f7f7 fe73 	bl	800027c <__adddf3>
 8008596:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f7 fe69 	bl	8000278 <__aeabi_dsub>
 80085a6:	4632      	mov	r2, r6
 80085a8:	463b      	mov	r3, r7
 80085aa:	f7f7 fe67 	bl	800027c <__adddf3>
 80085ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 80085b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085b6:	ed8a 7b00 	vstr	d7, [sl]
 80085ba:	e76e      	b.n	800849a <__kernel_rem_pio2+0x50a>
 80085bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80085c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80085c4:	4640      	mov	r0, r8
 80085c6:	4632      	mov	r2, r6
 80085c8:	463b      	mov	r3, r7
 80085ca:	4649      	mov	r1, r9
 80085cc:	f7f7 fe56 	bl	800027c <__adddf3>
 80085d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f7 fe4c 	bl	8000278 <__aeabi_dsub>
 80085e0:	4632      	mov	r2, r6
 80085e2:	463b      	mov	r3, r7
 80085e4:	f7f7 fe4a 	bl	800027c <__adddf3>
 80085e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80085f0:	ed84 7b00 	vstr	d7, [r4]
 80085f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085f8:	e755      	b.n	80084a6 <__kernel_rem_pio2+0x516>
 80085fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80085fe:	f7f7 fe3d 	bl	800027c <__adddf3>
 8008602:	3d01      	subs	r5, #1
 8008604:	e759      	b.n	80084ba <__kernel_rem_pio2+0x52a>
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	9a01      	ldr	r2, [sp, #4]
 800860a:	601d      	str	r5, [r3, #0]
 800860c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008610:	605c      	str	r4, [r3, #4]
 8008612:	609f      	str	r7, [r3, #8]
 8008614:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008618:	60d3      	str	r3, [r2, #12]
 800861a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800861e:	6110      	str	r0, [r2, #16]
 8008620:	6153      	str	r3, [r2, #20]
 8008622:	e728      	b.n	8008476 <__kernel_rem_pio2+0x4e6>
 8008624:	41700000 	.word	0x41700000
 8008628:	3e700000 	.word	0x3e700000
 800862c:	00000000 	.word	0x00000000

08008630 <__kernel_sin>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	ed2d 8b04 	vpush	{d8-d9}
 8008638:	eeb0 8a41 	vmov.f32	s16, s2
 800863c:	eef0 8a61 	vmov.f32	s17, s3
 8008640:	ec55 4b10 	vmov	r4, r5, d0
 8008644:	b083      	sub	sp, #12
 8008646:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800864a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800864e:	9001      	str	r0, [sp, #4]
 8008650:	da06      	bge.n	8008660 <__kernel_sin+0x30>
 8008652:	ee10 0a10 	vmov	r0, s0
 8008656:	4629      	mov	r1, r5
 8008658:	f7f8 fa60 	bl	8000b1c <__aeabi_d2iz>
 800865c:	2800      	cmp	r0, #0
 800865e:	d051      	beq.n	8008704 <__kernel_sin+0xd4>
 8008660:	4622      	mov	r2, r4
 8008662:	462b      	mov	r3, r5
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 ffbe 	bl	80005e8 <__aeabi_dmul>
 800866c:	4682      	mov	sl, r0
 800866e:	468b      	mov	fp, r1
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4620      	mov	r0, r4
 8008676:	4629      	mov	r1, r5
 8008678:	f7f7 ffb6 	bl	80005e8 <__aeabi_dmul>
 800867c:	a341      	add	r3, pc, #260	; (adr r3, 8008784 <__kernel_sin+0x154>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	4680      	mov	r8, r0
 8008684:	4689      	mov	r9, r1
 8008686:	4650      	mov	r0, sl
 8008688:	4659      	mov	r1, fp
 800868a:	f7f7 ffad 	bl	80005e8 <__aeabi_dmul>
 800868e:	a33f      	add	r3, pc, #252	; (adr r3, 800878c <__kernel_sin+0x15c>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 fdf0 	bl	8000278 <__aeabi_dsub>
 8008698:	4652      	mov	r2, sl
 800869a:	465b      	mov	r3, fp
 800869c:	f7f7 ffa4 	bl	80005e8 <__aeabi_dmul>
 80086a0:	a33c      	add	r3, pc, #240	; (adr r3, 8008794 <__kernel_sin+0x164>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f7f7 fde9 	bl	800027c <__adddf3>
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	f7f7 ff9b 	bl	80005e8 <__aeabi_dmul>
 80086b2:	a33a      	add	r3, pc, #232	; (adr r3, 800879c <__kernel_sin+0x16c>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fdde 	bl	8000278 <__aeabi_dsub>
 80086bc:	4652      	mov	r2, sl
 80086be:	465b      	mov	r3, fp
 80086c0:	f7f7 ff92 	bl	80005e8 <__aeabi_dmul>
 80086c4:	a337      	add	r3, pc, #220	; (adr r3, 80087a4 <__kernel_sin+0x174>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f7f7 fdd7 	bl	800027c <__adddf3>
 80086ce:	9b01      	ldr	r3, [sp, #4]
 80086d0:	4606      	mov	r6, r0
 80086d2:	460f      	mov	r7, r1
 80086d4:	b9eb      	cbnz	r3, 8008712 <__kernel_sin+0xe2>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4650      	mov	r0, sl
 80086dc:	4659      	mov	r1, fp
 80086de:	f7f7 ff83 	bl	80005e8 <__aeabi_dmul>
 80086e2:	a325      	add	r3, pc, #148	; (adr r3, 8008778 <__kernel_sin+0x148>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fdc6 	bl	8000278 <__aeabi_dsub>
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	f7f7 ff7a 	bl	80005e8 <__aeabi_dmul>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f7 fdbe 	bl	800027c <__adddf3>
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	ec45 4b10 	vmov	d0, r4, r5
 8008708:	b003      	add	sp, #12
 800870a:	ecbd 8b04 	vpop	{d8-d9}
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <__kernel_sin+0x150>)
 8008714:	ec51 0b18 	vmov	r0, r1, d8
 8008718:	2200      	movs	r2, #0
 800871a:	f7f7 ff65 	bl	80005e8 <__aeabi_dmul>
 800871e:	4632      	mov	r2, r6
 8008720:	ec41 0b19 	vmov	d9, r0, r1
 8008724:	463b      	mov	r3, r7
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f7 ff5d 	bl	80005e8 <__aeabi_dmul>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	ec51 0b19 	vmov	r0, r1, d9
 8008736:	f7f7 fd9f 	bl	8000278 <__aeabi_dsub>
 800873a:	4652      	mov	r2, sl
 800873c:	465b      	mov	r3, fp
 800873e:	f7f7 ff53 	bl	80005e8 <__aeabi_dmul>
 8008742:	ec53 2b18 	vmov	r2, r3, d8
 8008746:	f7f7 fd97 	bl	8000278 <__aeabi_dsub>
 800874a:	a30b      	add	r3, pc, #44	; (adr r3, 8008778 <__kernel_sin+0x148>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	4606      	mov	r6, r0
 8008752:	460f      	mov	r7, r1
 8008754:	4640      	mov	r0, r8
 8008756:	4649      	mov	r1, r9
 8008758:	f7f7 ff46 	bl	80005e8 <__aeabi_dmul>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4630      	mov	r0, r6
 8008762:	4639      	mov	r1, r7
 8008764:	f7f7 fd8a 	bl	800027c <__adddf3>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f7 fd82 	bl	8000278 <__aeabi_dsub>
 8008774:	e7c4      	b.n	8008700 <__kernel_sin+0xd0>
 8008776:	bf00      	nop
 8008778:	55555549 	.word	0x55555549
 800877c:	3fc55555 	.word	0x3fc55555
 8008780:	3fe00000 	.word	0x3fe00000
 8008784:	5acfd57c 	.word	0x5acfd57c
 8008788:	3de5d93a 	.word	0x3de5d93a
 800878c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008790:	3e5ae5e6 	.word	0x3e5ae5e6
 8008794:	57b1fe7d 	.word	0x57b1fe7d
 8008798:	3ec71de3 	.word	0x3ec71de3
 800879c:	19c161d5 	.word	0x19c161d5
 80087a0:	3f2a01a0 	.word	0x3f2a01a0
 80087a4:	1110f8a6 	.word	0x1110f8a6
 80087a8:	3f811111 	.word	0x3f811111

080087ac <fabs>:
 80087ac:	ec51 0b10 	vmov	r0, r1, d0
 80087b0:	ee10 2a10 	vmov	r2, s0
 80087b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087b8:	ec43 2b10 	vmov	d0, r2, r3
 80087bc:	4770      	bx	lr
	...

080087c0 <floor>:
 80087c0:	ec51 0b10 	vmov	r0, r1, d0
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80087cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80087d0:	2e13      	cmp	r6, #19
 80087d2:	ee10 5a10 	vmov	r5, s0
 80087d6:	ee10 8a10 	vmov	r8, s0
 80087da:	460c      	mov	r4, r1
 80087dc:	dc32      	bgt.n	8008844 <floor+0x84>
 80087de:	2e00      	cmp	r6, #0
 80087e0:	da14      	bge.n	800880c <floor+0x4c>
 80087e2:	a333      	add	r3, pc, #204	; (adr r3, 80088b0 <floor+0xf0>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f7f7 fd48 	bl	800027c <__adddf3>
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	f7f8 f98a 	bl	8000b08 <__aeabi_dcmpgt>
 80087f4:	b138      	cbz	r0, 8008806 <floor+0x46>
 80087f6:	2c00      	cmp	r4, #0
 80087f8:	da57      	bge.n	80088aa <floor+0xea>
 80087fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80087fe:	431d      	orrs	r5, r3
 8008800:	d001      	beq.n	8008806 <floor+0x46>
 8008802:	4c2d      	ldr	r4, [pc, #180]	; (80088b8 <floor+0xf8>)
 8008804:	2500      	movs	r5, #0
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	e025      	b.n	8008858 <floor+0x98>
 800880c:	4f2b      	ldr	r7, [pc, #172]	; (80088bc <floor+0xfc>)
 800880e:	4137      	asrs	r7, r6
 8008810:	ea01 0307 	and.w	r3, r1, r7
 8008814:	4303      	orrs	r3, r0
 8008816:	d01f      	beq.n	8008858 <floor+0x98>
 8008818:	a325      	add	r3, pc, #148	; (adr r3, 80088b0 <floor+0xf0>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fd2d 	bl	800027c <__adddf3>
 8008822:	2200      	movs	r2, #0
 8008824:	2300      	movs	r3, #0
 8008826:	f7f8 f96f 	bl	8000b08 <__aeabi_dcmpgt>
 800882a:	2800      	cmp	r0, #0
 800882c:	d0eb      	beq.n	8008806 <floor+0x46>
 800882e:	2c00      	cmp	r4, #0
 8008830:	bfbe      	ittt	lt
 8008832:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008836:	fa43 f606 	asrlt.w	r6, r3, r6
 800883a:	19a4      	addlt	r4, r4, r6
 800883c:	ea24 0407 	bic.w	r4, r4, r7
 8008840:	2500      	movs	r5, #0
 8008842:	e7e0      	b.n	8008806 <floor+0x46>
 8008844:	2e33      	cmp	r6, #51	; 0x33
 8008846:	dd0b      	ble.n	8008860 <floor+0xa0>
 8008848:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800884c:	d104      	bne.n	8008858 <floor+0x98>
 800884e:	ee10 2a10 	vmov	r2, s0
 8008852:	460b      	mov	r3, r1
 8008854:	f7f7 fd12 	bl	800027c <__adddf3>
 8008858:	ec41 0b10 	vmov	d0, r0, r1
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008864:	f04f 33ff 	mov.w	r3, #4294967295
 8008868:	fa23 f707 	lsr.w	r7, r3, r7
 800886c:	4207      	tst	r7, r0
 800886e:	d0f3      	beq.n	8008858 <floor+0x98>
 8008870:	a30f      	add	r3, pc, #60	; (adr r3, 80088b0 <floor+0xf0>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fd01 	bl	800027c <__adddf3>
 800887a:	2200      	movs	r2, #0
 800887c:	2300      	movs	r3, #0
 800887e:	f7f8 f943 	bl	8000b08 <__aeabi_dcmpgt>
 8008882:	2800      	cmp	r0, #0
 8008884:	d0bf      	beq.n	8008806 <floor+0x46>
 8008886:	2c00      	cmp	r4, #0
 8008888:	da02      	bge.n	8008890 <floor+0xd0>
 800888a:	2e14      	cmp	r6, #20
 800888c:	d103      	bne.n	8008896 <floor+0xd6>
 800888e:	3401      	adds	r4, #1
 8008890:	ea25 0507 	bic.w	r5, r5, r7
 8008894:	e7b7      	b.n	8008806 <floor+0x46>
 8008896:	2301      	movs	r3, #1
 8008898:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800889c:	fa03 f606 	lsl.w	r6, r3, r6
 80088a0:	4435      	add	r5, r6
 80088a2:	4545      	cmp	r5, r8
 80088a4:	bf38      	it	cc
 80088a6:	18e4      	addcc	r4, r4, r3
 80088a8:	e7f2      	b.n	8008890 <floor+0xd0>
 80088aa:	2500      	movs	r5, #0
 80088ac:	462c      	mov	r4, r5
 80088ae:	e7aa      	b.n	8008806 <floor+0x46>
 80088b0:	8800759c 	.word	0x8800759c
 80088b4:	7e37e43c 	.word	0x7e37e43c
 80088b8:	bff00000 	.word	0xbff00000
 80088bc:	000fffff 	.word	0x000fffff

080088c0 <scalbn>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	ec55 4b10 	vmov	r4, r5, d0
 80088c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80088ca:	4606      	mov	r6, r0
 80088cc:	462b      	mov	r3, r5
 80088ce:	b99a      	cbnz	r2, 80088f8 <scalbn+0x38>
 80088d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088d4:	4323      	orrs	r3, r4
 80088d6:	d036      	beq.n	8008946 <scalbn+0x86>
 80088d8:	4b39      	ldr	r3, [pc, #228]	; (80089c0 <scalbn+0x100>)
 80088da:	4629      	mov	r1, r5
 80088dc:	ee10 0a10 	vmov	r0, s0
 80088e0:	2200      	movs	r2, #0
 80088e2:	f7f7 fe81 	bl	80005e8 <__aeabi_dmul>
 80088e6:	4b37      	ldr	r3, [pc, #220]	; (80089c4 <scalbn+0x104>)
 80088e8:	429e      	cmp	r6, r3
 80088ea:	4604      	mov	r4, r0
 80088ec:	460d      	mov	r5, r1
 80088ee:	da10      	bge.n	8008912 <scalbn+0x52>
 80088f0:	a32b      	add	r3, pc, #172	; (adr r3, 80089a0 <scalbn+0xe0>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	e03a      	b.n	800896e <scalbn+0xae>
 80088f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80088fc:	428a      	cmp	r2, r1
 80088fe:	d10c      	bne.n	800891a <scalbn+0x5a>
 8008900:	ee10 2a10 	vmov	r2, s0
 8008904:	4620      	mov	r0, r4
 8008906:	4629      	mov	r1, r5
 8008908:	f7f7 fcb8 	bl	800027c <__adddf3>
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	e019      	b.n	8008946 <scalbn+0x86>
 8008912:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008916:	460b      	mov	r3, r1
 8008918:	3a36      	subs	r2, #54	; 0x36
 800891a:	4432      	add	r2, r6
 800891c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008920:	428a      	cmp	r2, r1
 8008922:	dd08      	ble.n	8008936 <scalbn+0x76>
 8008924:	2d00      	cmp	r5, #0
 8008926:	a120      	add	r1, pc, #128	; (adr r1, 80089a8 <scalbn+0xe8>)
 8008928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800892c:	da1c      	bge.n	8008968 <scalbn+0xa8>
 800892e:	a120      	add	r1, pc, #128	; (adr r1, 80089b0 <scalbn+0xf0>)
 8008930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008934:	e018      	b.n	8008968 <scalbn+0xa8>
 8008936:	2a00      	cmp	r2, #0
 8008938:	dd08      	ble.n	800894c <scalbn+0x8c>
 800893a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800893e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008942:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008946:	ec45 4b10 	vmov	d0, r4, r5
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008950:	da19      	bge.n	8008986 <scalbn+0xc6>
 8008952:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008956:	429e      	cmp	r6, r3
 8008958:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800895c:	dd0a      	ble.n	8008974 <scalbn+0xb4>
 800895e:	a112      	add	r1, pc, #72	; (adr r1, 80089a8 <scalbn+0xe8>)
 8008960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e2      	bne.n	800892e <scalbn+0x6e>
 8008968:	a30f      	add	r3, pc, #60	; (adr r3, 80089a8 <scalbn+0xe8>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 fe3b 	bl	80005e8 <__aeabi_dmul>
 8008972:	e7cb      	b.n	800890c <scalbn+0x4c>
 8008974:	a10a      	add	r1, pc, #40	; (adr r1, 80089a0 <scalbn+0xe0>)
 8008976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0b8      	beq.n	80088f0 <scalbn+0x30>
 800897e:	a10e      	add	r1, pc, #56	; (adr r1, 80089b8 <scalbn+0xf8>)
 8008980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008984:	e7b4      	b.n	80088f0 <scalbn+0x30>
 8008986:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800898a:	3236      	adds	r2, #54	; 0x36
 800898c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008990:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008994:	4620      	mov	r0, r4
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <scalbn+0x108>)
 8008998:	2200      	movs	r2, #0
 800899a:	e7e8      	b.n	800896e <scalbn+0xae>
 800899c:	f3af 8000 	nop.w
 80089a0:	c2f8f359 	.word	0xc2f8f359
 80089a4:	01a56e1f 	.word	0x01a56e1f
 80089a8:	8800759c 	.word	0x8800759c
 80089ac:	7e37e43c 	.word	0x7e37e43c
 80089b0:	8800759c 	.word	0x8800759c
 80089b4:	fe37e43c 	.word	0xfe37e43c
 80089b8:	c2f8f359 	.word	0xc2f8f359
 80089bc:	81a56e1f 	.word	0x81a56e1f
 80089c0:	43500000 	.word	0x43500000
 80089c4:	ffff3cb0 	.word	0xffff3cb0
 80089c8:	3c900000 	.word	0x3c900000

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr
