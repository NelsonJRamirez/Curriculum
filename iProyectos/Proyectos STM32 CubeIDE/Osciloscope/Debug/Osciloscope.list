
Osciloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e64  08004e64  0002040c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e64  08004e64  0002040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e64  08004e64  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08004e6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000040c  08005278  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005278  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f79  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297e  00000000  00000000  000323b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00034d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c911  00000000  00000000  00036af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001520d  00000000  00000000  00053401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8cbf  00000000  00000000  0006860e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001112cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  00111320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000040c 	.word	0x2000040c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e14 	.word	0x08004e14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000410 	.word	0x20000410
 80001c4:	08004e14 	.word	0x08004e14

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_ADC1_Init+0xb4>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_ADC1_Init+0xb4>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_ADC1_Init+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_ADC1_Init+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_ADC1_Init+0xb4>)
 8000a16:	f000 fe7d 	bl	8001714 <HAL_ADC_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000a20:	f000 fa80 	bl	8000f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000a30:	2307      	movs	r3, #7
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_ADC1_Init+0xb4>)
 8000a42:	f001 f889 	bl	8001b58 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a4c:	f000 fa6a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000428 	.word	0x20000428

08000a5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7c:	d14c      	bne.n	8000b18 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <HAL_ADC_MspInit+0xc4>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <HAL_ADC_MspInit+0xc4>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <HAL_ADC_MspInit+0xc4>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <HAL_ADC_MspInit+0xc4>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_ADC_MspInit+0xc4>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_ADC_MspInit+0xc4>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f001 fed6 	bl	8002874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_ADC_MspInit+0xcc>)
 8000acc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000af2:	2220      	movs	r2, #32
 8000af4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000afe:	f001 fd22 	bl	8002546 <HAL_DMA_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000b08:	f000 fa0c 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_ADC_MspInit+0xc8>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40021000 	.word	0x40021000
 8000b24:	20000478 	.word	0x20000478
 8000b28:	40020008 	.word	0x40020008

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_DMA_Init+0x38>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <MX_DMA_Init+0x38>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_DMA_Init+0x38>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	200b      	movs	r0, #11
 8000b50:	f001 fcc3 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b54:	200b      	movs	r0, #11
 8000b56:	f001 fcdc 	bl	8002512 <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd0:	6153      	str	r3, [r2, #20]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_GPIO_Init+0xdc>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIN_Pin|CS_Pin|CLK_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000be4:	4818      	ldr	r0, [pc, #96]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000be6:	f001 ffb7 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <MX_GPIO_Init+0xe4>)
 8000c02:	f001 fe37 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIN_Pin|CS_Pin|CLK_Pin;
 8000c06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000c20:	f001 fe28 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_ENCODER_Pin;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000c38:	f001 fe1c 	bl	8002874 <HAL_GPIO_Init>

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000800 	.word	0x48000800

08000c50 <display_led_matrix>:

// Valor actual de Volt/Div
double volt_div = 1.0; // Valor inicial de Volt/Div

// Función para mostrar la matriz LED
void display_led_matrix() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
    for (uint8_t row = 0; row < MATRIX_SIZE; row++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e017      	b.n	8000c8c <display_led_matrix+0x3c>
        for (uint8_t col = 0; col < MATRIX_SIZE; col++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71bb      	strb	r3, [r7, #6]
 8000c60:	e00e      	b.n	8000c80 <display_led_matrix+0x30>
            setled(col, row, led_matrix[row][col]);
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <display_led_matrix+0x4c>)
 8000c68:	00d2      	lsls	r2, r2, #3
 8000c6a:	440a      	add	r2, r1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	79f9      	ldrb	r1, [r7, #7]
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f9bb 	bl	8000ff0 <setled>
        for (uint8_t col = 0; col < MATRIX_SIZE; col++) {
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	71bb      	strb	r3, [r7, #6]
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	d9ed      	bls.n	8000c62 <display_led_matrix+0x12>
    for (uint8_t row = 0; row < MATRIX_SIZE; row++) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d9e4      	bls.n	8000c5c <display_led_matrix+0xc>
        }
    }
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200004bc 	.word	0x200004bc

08000ca0 <update_led_matrix>:

// Función para actualizar la matriz LED con los valores de la forma de onda
void update_led_matrix(uint32_t adc_value) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    // Mapear el valor del ADC al rango de la matriz LED
    uint32_t led_value = (adc_value * MATRIX_SIZE) / ADC_MAX_VALUE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <update_led_matrix+0x7c>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	0a9b      	lsrs	r3, r3, #10
 8000cb4:	60bb      	str	r3, [r7, #8]

    // Actualizar la matriz LED con los valores de la forma de onda
    for (uint8_t row = 0; row < MATRIX_SIZE; row++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e024      	b.n	8000d06 <update_led_matrix+0x66>
        for (uint8_t col = 0; col < MATRIX_SIZE; col++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73bb      	strb	r3, [r7, #14]
 8000cc0:	e01b      	b.n	8000cfa <update_led_matrix+0x5a>
            if (col < led_value && row == col) {
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d90c      	bls.n	8000ce4 <update_led_matrix+0x44>
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d108      	bne.n	8000ce4 <update_led_matrix+0x44>
                led_matrix[row][col] = 1;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	4912      	ldr	r1, [pc, #72]	; (8000d20 <update_led_matrix+0x80>)
 8000cd8:	00d2      	lsls	r2, r2, #3
 8000cda:	440a      	add	r2, r1
 8000cdc:	4413      	add	r3, r2
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e007      	b.n	8000cf4 <update_led_matrix+0x54>
            } else {
                led_matrix[row][col] = 0;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	490d      	ldr	r1, [pc, #52]	; (8000d20 <update_led_matrix+0x80>)
 8000cea:	00d2      	lsls	r2, r2, #3
 8000cec:	440a      	add	r2, r1
 8000cee:	4413      	add	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
        for (uint8_t col = 0; col < MATRIX_SIZE; col++) {
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	d9e0      	bls.n	8000cc2 <update_led_matrix+0x22>
    for (uint8_t row = 0; row < MATRIX_SIZE; row++) {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	3301      	adds	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d9d7      	bls.n	8000cbc <update_led_matrix+0x1c>
            }
        }
    }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	473232e5 	.word	0x473232e5
 8000d20:	200004bc 	.word	0x200004bc

08000d24 <read_encoder>:

// Función para leer el valor del encoder
int read_encoder() {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
    // Leer el valor del encoder
    int encoder_value = TIM2->CNT;
 8000d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	607b      	str	r3, [r7, #4]

    // Limitar el valor del encoder entre 1 y 10
    if (encoder_value < 1) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	dc06      	bgt.n	8000d46 <read_encoder+0x22>
        encoder_value = 1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
        TIM2->CNT = encoder_value;
 8000d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6253      	str	r3, [r2, #36]	; 0x24
 8000d44:	e008      	b.n	8000d58 <read_encoder+0x34>
    } else if (encoder_value > 10) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0a      	cmp	r3, #10
 8000d4a:	dd05      	ble.n	8000d58 <read_encoder+0x34>
        encoder_value = 10;
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	607b      	str	r3, [r7, #4]
        TIM2->CNT = encoder_value;
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6253      	str	r3, [r2, #36]	; 0x24
    }

    return encoder_value;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d6e:	f000 fc29 	bl	80015c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d72:	f000 f879 	bl	8000e68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d76:	f7ff fef7 	bl	8000b68 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d7a:	f7ff fed7 	bl	8000b2c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d7e:	f000 fb85 	bl	800148c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000d82:	f7ff fe0f 	bl	80009a4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000d86:	f000 fae3 	bl	8001350 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//HAL_ADC_Start_DMA(&hadc1, &medida, 1); //max value = 3682
	max_init(0x03);
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f000 fa56 	bl	800123c <max_init>
	/* USER CODE END 2 */
	write_char(3, 1);
 8000d90:	2101      	movs	r1, #1
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f9ea 	bl	800116c <write_char>
	HAL_Delay(2000);
 8000d98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d9c:	f000 fc78 	bl	8001690 <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	max_clear();
 8000da0:	f000 fa1e 	bl	80011e0 <max_clear>
	TIM2->PSC = 0; // Prescaler = 1
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
	    TIM2->ARR = 10; // Valor máximo del contador = 10
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	220a      	movs	r2, #10
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
	    TIM2->CR1 |= TIM_CR1_CEN; // Habilitar el TIM2
 8000db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]

	    while (1) {
	           // Leer el valor analógico del ADC
	           uint32_t adc_value = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
	           HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4824      	ldr	r0, [pc, #144]	; (8000e60 <main+0xf8>)
 8000dd0:	f000 fe26 	bl	8001a20 <HAL_ADC_Start_DMA>

	           // Actualizar el valor de Volt/Div según el encoder
	           int encoder_value = read_encoder();
 8000dd4:	f7ff ffa6 	bl	8000d24 <read_encoder>
 8000dd8:	6178      	str	r0, [r7, #20]
	           volt_div = encoder_value * 0.1;
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff fb46 	bl	800046c <__aeabi_i2d>
 8000de0:	a319      	add	r3, pc, #100	; (adr r3, 8000e48 <main+0xe0>)
 8000de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de6:	f7ff fbab 	bl	8000540 <__aeabi_dmul>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	491d      	ldr	r1, [pc, #116]	; (8000e64 <main+0xfc>)
 8000df0:	e9c1 2300 	strd	r2, r3, [r1]

	           // Ajustar el voltaje máximo según el valor de Volt/Div
	           double voltage_max_adjusted = VOLTAGE_MAX / volt_div;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <main+0xfc>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	a115      	add	r1, pc, #84	; (adr r1, 8000e50 <main+0xe8>)
 8000dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e00:	f7ff fcc8 	bl	8000794 <__aeabi_ddiv>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	e9c7 2302 	strd	r2, r3, [r7, #8]

	           // Actualizar la matriz LED con los valores de la forma de onda
	           update_led_matrix((adc_value * voltage_max_adjusted) / ADC_MAX_VALUE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fb1c 	bl	800044c <__aeabi_ui2d>
 8000e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e18:	f7ff fb92 	bl	8000540 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	a30c      	add	r3, pc, #48	; (adr r3, 8000e58 <main+0xf0>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fcb3 	bl	8000794 <__aeabi_ddiv>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fd95 	bl	8000964 <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff2f 	bl	8000ca0 <update_led_matrix>

	           // Mostrar la matriz LED
	           display_led_matrix();
 8000e42:	f7ff ff05 	bl	8000c50 <display_led_matrix>
	    while (1) {
 8000e46:	e7bd      	b.n	8000dc4 <main+0x5c>
 8000e48:	9999999a 	.word	0x9999999a
 8000e4c:	3fb99999 	.word	0x3fb99999
 8000e50:	9999999a 	.word	0x9999999a
 8000e54:	40059999 	.word	0x40059999
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	40acc400 	.word	0x40acc400
 8000e60:	20000428 	.word	0x20000428
 8000e64:	20000000 	.word	0x20000000

08000e68 <SystemClock_Config>:
	   }
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09c      	sub	sp, #112	; 0x70
 8000e6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 ffc4 	bl	8004e04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2234      	movs	r2, #52	; 0x34
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 ffb6 	bl	8004e04 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fe62 	bl	8002b88 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x66>
		Error_Handler();
 8000eca:	f000 f82b 	bl	8000f24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fe8a 	bl	8003c04 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x92>
		Error_Handler();
 8000ef6:	f000 f815 	bl	8000f24 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection =
 8000efa:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000efe:	603b      	str	r3, [r7, #0]
			RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_ADC1;
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f08:	61bb      	str	r3, [r7, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f8af 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0xb4>
		Error_Handler();
 8000f18:	f000 f804 	bl	8000f24 <Error_Handler>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3770      	adds	r7, #112	; 0x70
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e01b      	b.n	8000f78 <write_byte+0x48>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <write_byte+0x58>)
 8000f48:	f001 fe06 	bl	8002b58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <write_byte+0x58>)
 8000f5c:	f001 fdfc 	bl	8002b58 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6c:	4806      	ldr	r0, [pc, #24]	; (8000f88 <write_byte+0x58>)
 8000f6e:	f001 fdf3 	bl	8002b58 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b07      	cmp	r3, #7
 8000f7c:	dde0      	ble.n	8000f40 <write_byte+0x10>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	48000400 	.word	0x48000400

08000f8c <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa2:	4812      	ldr	r0, [pc, #72]	; (8000fec <write_max_cmd+0x60>)
 8000fa4:	f001 fdd8 	bl	8002b58 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e00a      	b.n	8000fc4 <write_max_cmd+0x38>
	{
		write_byte (address);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffbd 	bl	8000f30 <write_byte>
		write_byte (cmd); 
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffb9 	bl	8000f30 <write_byte>
	for (int i=0;i<num; i++)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	ddf1      	ble.n	8000fae <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <write_max_cmd+0x60>)
 8000fd2:	f001 fdc1 	bl	8002b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <write_max_cmd+0x60>)
 8000fde:	f001 fdbb 	bl	8002b58 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	48000400 	.word	0x48000400

08000ff0 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00d      	beq.n	8001024 <setled+0x34>
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <setled+0xd4>)
 800100c:	5cd1      	ldrb	r1, [r2, r3]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2201      	movs	r2, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	b2da      	uxtb	r2, r3
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	430a      	orrs	r2, r1
 800101c:	b2d1      	uxtb	r1, r2
 800101e:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <setled+0xd4>)
 8001020:	54d1      	strb	r1, [r2, r3]
 8001022:	e00e      	b.n	8001042 <setled+0x52>
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <setled+0xd4>)
 8001028:	5cd1      	ldrb	r1, [r2, r3]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2201      	movs	r2, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	b2da      	uxtb	r2, r3
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	400a      	ands	r2, r1
 800103c:	b2d1      	uxtb	r1, r2
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <setled+0xd4>)
 8001040:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001058:	481b      	ldr	r0, [pc, #108]	; (80010c8 <setled+0xd8>)
 800105a:	f001 fd7d 	bl	8002b58 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e01b      	b.n	800109c <setled+0xac>
	{
		if (i == (num-(n+1)))
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	425b      	negs	r3, r3
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	429a      	cmp	r2, r3
 800106c:	d10d      	bne.n	800108a <setled+0x9a>
		{
			write_byte (((c+1)));
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3301      	adds	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff5a 	bl	8000f30 <write_byte>
			write_byte (buffer[col]);
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <setled+0xd4>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff54 	bl	8000f30 <write_byte>
 8001088:	e005      	b.n	8001096 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ff50 	bl	8000f30 <write_byte>
			write_byte (0);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff4d 	bl	8000f30 <write_byte>
	for (int i=0; i<num; i++) 
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dde0      	ble.n	8001064 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <setled+0xd8>)
 80010aa:	f001 fd55 	bl	8002b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <setled+0xd8>)
 80010b6:	f001 fd4f 	bl	8002b58 <HAL_GPIO_WritePin>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200004fc 	.word	0x200004fc
 80010c8:	48000400 	.word	0x48000400

080010cc <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	e02d      	b.n	8001152 <setrow+0x86>
	{
		if (i == ((n)))
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d120      	bne.n	8001140 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	3307      	adds	r3, #7
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	e015      	b.n	8001134 <setrow+0x68>
			{
				bool b = value&0x80;
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf14      	ite	ne
 8001112:	2301      	movne	r3, #1
 8001114:	2300      	moveq	r3, #0
 8001116:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	b2d1      	uxtb	r1, r2
 8001120:	7bba      	ldrb	r2, [r7, #14]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff64 	bl	8000ff0 <setled>
				value<<=1;
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	3b01      	subs	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	429a      	cmp	r2, r3
 800113c:	dae4      	bge.n	8001108 <setrow+0x3c>
 800113e:	e005      	b.n	800114c <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fef5 	bl	8000f30 <write_byte>
			write_byte (0);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fef2 	bl	8000f30 <write_byte>
	for (int i=0; i<num; i++) 
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	2b00      	cmp	r3, #0
 8001156:	ddce      	ble.n	80010f6 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4903      	ldr	r1, [pc, #12]	; (8001168 <setrow+0x9c>)
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	54ca      	strb	r2, [r1, r3]
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000054c 	.word	0x2000054c

0800116c <write_char>:
		


void write_char (char c, uint8_t max)  
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4a16      	ldr	r2, [pc, #88]	; (80011dc <write_char+0x70>)
 8001182:	5cd3      	ldrb	r3, [r2, r3]
 8001184:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
	int row =6;
 800118e:	2306      	movs	r3, #6
 8001190:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	e016      	b.n	80011c6 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	3b01      	subs	r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	490c      	ldr	r1, [pc, #48]	; (80011dc <write_char+0x70>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	440b      	add	r3, r1
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4610      	mov	r0, r2
 80011b6:	f7ff ff89 	bl	80010cc <setrow>
		row--;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3b01      	subs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	3301      	adds	r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dbe2      	blt.n	8001198 <write_char+0x2c>
	}
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000008 	.word	0x20000008

080011e0 <max_clear>:
}



void max_clear(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	e008      	b.n	80011fe <max_clear+0x1e>
		setrow(i,0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff6a 	bl	80010cc <setrow>
	for (int i=0; i<num*8; i++) 
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3301      	adds	r3, #1
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b07      	cmp	r3, #7
 8001202:	ddf3      	ble.n	80011ec <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	e00c      	b.n	8001224 <max_clear+0x44>
	{
		buffer[i] = 0;
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <max_clear+0x54>)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <max_clear+0x58>)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b4f      	cmp	r3, #79	; 0x4f
 8001228:	ddef      	ble.n	800120a <max_clear+0x2a>
	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200004fc 	.word	0x200004fc
 8001238:	2000054c 	.word	0x2000054c

0800123c <max_init>:
}



void max_init (uint8_t brightness)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8001246:	2100      	movs	r1, #0
 8001248:	2009      	movs	r0, #9
 800124a:	f7ff fe9f 	bl	8000f8c <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 800124e:	2107      	movs	r1, #7
 8001250:	200b      	movs	r0, #11
 8001252:	f7ff fe9b 	bl	8000f8c <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8001256:	2101      	movs	r1, #1
 8001258:	200c      	movs	r0, #12
 800125a:	f7ff fe97 	bl	8000f8c <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 800125e:	2100      	movs	r1, #0
 8001260:	200f      	movs	r0, #15
 8001262:	f7ff fe93 	bl	8000f8c <write_max_cmd>
	
	max_clear ();
 8001266:	f7ff ffbb 	bl	80011e0 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4619      	mov	r1, r3
 800126e:	200a      	movs	r0, #10
 8001270:	f7ff fe8c 	bl	8000f8c <write_max_cmd>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x44>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_MspInit+0x44>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_MspInit+0x44>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_MspInit+0x44>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_MspInit+0x44>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x44>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b2:	2007      	movs	r0, #7
 80012b4:	f001 f906 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f99e 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <DMA1_Channel1_IRQHandler+0x10>)
 800131e:	f001 f9b8 	bl	8002692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000478 	.word	0x20000478

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2224      	movs	r2, #36	; 0x24
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fd50 	bl	8004e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_TIM1_Init+0xac>)
 8001370:	4a23      	ldr	r2, [pc, #140]	; (8001400 <MX_TIM1_Init+0xb0>)
 8001372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_TIM1_Init+0xac>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_TIM1_Init+0xac>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_TIM1_Init+0xac>)
 8001382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001386:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_TIM1_Init+0xac>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM1_Init+0xac>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_TIM1_Init+0xac>)
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800139a:	2303      	movs	r3, #3
 800139c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013aa:	230a      	movs	r3, #10
 80013ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b2:	2301      	movs	r3, #1
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80013ba:	230a      	movs	r3, #10
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_TIM1_Init+0xac>)
 80013c6:	f002 ffe5 	bl	8004394 <HAL_TIM_Encoder_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80013d0:	f7ff fda8 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM1_Init+0xac>)
 80013e6:	f003 f8e9 	bl	80045bc <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013f0:	f7ff fd98 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000059c 	.word	0x2000059c
 8001400:	40012c00 	.word	0x40012c00

08001404 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d127      	bne.n	8001476 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_TIM_Encoder_MspInit+0x80>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_TIM_Encoder_MspInit+0x80>)
 800142c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_TIM_Encoder_MspInit+0x80>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_TIM_Encoder_MspInit+0x80>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_TIM_Encoder_MspInit+0x80>)
 8001444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001448:	6153      	str	r3, [r2, #20]
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_TIM_Encoder_MspInit+0x80>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001456:	2303      	movs	r3, #3
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001466:	2302      	movs	r3, #2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_TIM_Encoder_MspInit+0x84>)
 8001472:	f001 f9ff 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40021000 	.word	0x40021000
 8001488:	48000800 	.word	0x48000800

0800148c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_USART2_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001498:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014d0:	f003 f8da 	bl	8004688 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f7ff fd23 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200005e8 	.word	0x200005e8
 80014e8:	40004400 	.word	0x40004400

080014ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_UART_MspInit+0x7c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d128      	bne.n	8001560 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_UART_MspInit+0x80>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_UART_MspInit+0x80>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_UART_MspInit+0x80>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_UART_MspInit+0x80>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_UART_MspInit+0x80>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_UART_MspInit+0x80>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800153e:	230c      	movs	r3, #12
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154e:	2307      	movs	r3, #7
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f001 f98a 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40004400 	.word	0x40004400
 800156c:	40021000 	.word	0x40021000

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff feda 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	; (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f003 fc0d 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff fbe1 	bl	8000d68 <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 80015b4:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 80015b8:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80015bc:	20000674 	.word	0x20000674

080015c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_Init+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_Init+0x28>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 ff75 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f808 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff fe4c 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 ff8d 	bl	800252e <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 ff55 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000400 	.word	0x20000400
 8001648:	20000408 	.word	0x20000408
 800164c:	20000404 	.word	0x20000404

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000408 	.word	0x20000408
 8001674:	20000670 	.word	0x20000670

08001678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;  
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000670 	.word	0x20000670

08001690 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000408 	.word	0x20000408

080016d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09a      	sub	sp, #104	; 0x68
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e169      	b.n	8001a08 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	d176      	bne.n	8001834 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d152      	bne.n	80017f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff f977 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d13b      	bne.n	80017f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fd6b 	bl	8002258 <ADC_Disable>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d12f      	bne.n	80017f4 <HAL_ADC_Init+0xe0>
 8001794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001798:	2b00      	cmp	r3, #0
 800179a:	d12b      	bne.n	80017f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017a4:	f023 0302 	bic.w	r3, r3, #2
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d0:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <HAL_ADC_Init+0x2fc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a8f      	ldr	r2, [pc, #572]	; (8001a14 <HAL_ADC_Init+0x300>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0c9a      	lsrs	r2, r3, #18
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e6:	e002      	b.n	80017ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f9      	bne.n	80017e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800180c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001810:	d110      	bne.n	8001834 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f023 0312 	bic.w	r3, r3, #18
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 80d6 	bne.w	80019ee <HAL_ADC_Init+0x2da>
 8001842:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 80d1 	bne.w	80019ee <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 80c9 	bne.w	80019ee <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001864:	f043 0202 	orr.w	r2, r3, #2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_ADC_Init+0x304>)
 800186e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d108      	bne.n	8001894 <HAL_ADC_Init+0x180>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_Init+0x180>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_ADC_Init+0x182>
 8001894:	2300      	movs	r3, #0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11c      	bne.n	80018d4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800189a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800189c:	2b00      	cmp	r3, #0
 800189e:	d010      	beq.n	80018c2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_Init+0x1a8>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_Init+0x1a8>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_ADC_Init+0x1aa>
 80018bc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7e5b      	ldrb	r3, [r3, #25]
 80018d8:	035b      	lsls	r3, r3, #13
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018de:	2a01      	cmp	r2, #1
 80018e0:	d002      	beq.n	80018e8 <HAL_ADC_Init+0x1d4>
 80018e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e6:	e000      	b.n	80018ea <HAL_ADC_Init+0x1d6>
 80018e8:	2200      	movs	r2, #0
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fa:	4313      	orrs	r3, r2
 80018fc:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11b      	bne.n	8001940 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e5b      	ldrb	r3, [r3, #25]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	3b01      	subs	r3, #1
 8001916:	045a      	lsls	r2, r3, #17
 8001918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191a:	4313      	orrs	r3, r2
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	663b      	str	r3, [r7, #96]	; 0x60
 8001922:	e00d      	b.n	8001940 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	2b01      	cmp	r3, #1
 8001946:	d007      	beq.n	8001958 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	4313      	orrs	r3, r2
 8001952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001954:	4313      	orrs	r3, r2
 8001956:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d114      	bne.n	8001990 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001974:	f023 0302 	bic.w	r3, r3, #2
 8001978:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7e1b      	ldrb	r3, [r3, #24]
 800197e:	039a      	lsls	r2, r3, #14
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4313      	orrs	r3, r2
 800198a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800198c:	4313      	orrs	r3, r2
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_ADC_Init+0x308>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10c      	bne.n	80019c6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f023 010f 	bic.w	r1, r3, #15
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
 80019c4:	e007      	b.n	80019d6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 020f 	bic.w	r2, r2, #15
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f023 0303 	bic.w	r3, r3, #3
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
 80019ec:	e00a      	b.n	8001a04 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f023 0312 	bic.w	r3, r3, #18
 80019f6:	f043 0210 	orr.w	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019fe:	2301      	movs	r3, #1
 8001a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3768      	adds	r7, #104	; 0x68
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000400 	.word	0x20000400
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	50000300 	.word	0x50000300
 8001a1c:	fff0c007 	.word	0xfff0c007

08001a20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d17e      	bne.n	8001b3c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_Start_DMA+0x2c>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e07a      	b.n	8001b42 <HAL_ADC_Start_DMA+0x122>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fb9b 	bl	8002190 <ADC_Enable>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d166      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aae:	d106      	bne.n	8001abe <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	f023 0206 	bic.w	r2, r3, #6
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
 8001abc:	e002      	b.n	8001ac4 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_ADC_Start_DMA+0x12c>)
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_ADC_Start_DMA+0x130>)
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_ADC_Start_DMA+0x134>)
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	221c      	movs	r2, #28
 8001aea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0210 	orr.w	r2, r2, #16
 8001afa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	4619      	mov	r1, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f000 fd5a 	bl	80025d4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0204 	orr.w	r2, r2, #4
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b3a:	e001      	b.n	8001b40 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	080020c5 	.word	0x080020c5
 8001b50:	0800213f 	.word	0x0800213f
 8001b54:	0800215b 	.word	0x0800215b

08001b58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b09b      	sub	sp, #108	; 0x6c
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x22>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e299      	b.n	80020ae <HAL_ADC_ConfigChannel+0x556>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 827d 	bne.w	800208c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d81c      	bhi.n	8001bd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	461a      	mov	r2, r3
 8001bae:	231f      	movs	r3, #31
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4019      	ands	r1, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd2:	e063      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	d81e      	bhi.n	8001c1a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	3b1e      	subs	r3, #30
 8001bf0:	221f      	movs	r2, #31
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	4019      	ands	r1, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	3b1e      	subs	r3, #30
 8001c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34
 8001c18:	e040      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b0e      	cmp	r3, #14
 8001c20:	d81e      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	3b3c      	subs	r3, #60	; 0x3c
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4019      	ands	r1, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	3b3c      	subs	r3, #60	; 0x3c
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5e:	e01d      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	3b5a      	subs	r3, #90	; 0x5a
 8001c74:	221f      	movs	r2, #31
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4019      	ands	r1, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	3b5a      	subs	r3, #90	; 0x5a
 8001c90:	fa00 f203 	lsl.w	r2, r0, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80e5 	bne.w	8001e76 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d91c      	bls.n	8001cee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6999      	ldr	r1, [r3, #24]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1e      	subs	r3, #30
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4019      	ands	r1, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6898      	ldr	r0, [r3, #8]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	619a      	str	r2, [r3, #24]
 8001cec:	e019      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6959      	ldr	r1, [r3, #20]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2207      	movs	r2, #7
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4019      	ands	r1, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6898      	ldr	r0, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d84f      	bhi.n	8001de4 <HAL_ADC_ConfigChannel+0x28c>
 8001d44:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <HAL_ADC_ConfigChannel+0x1f4>)
 8001d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4a:	bf00      	nop
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d7f 	.word	0x08001d7f
 8001d54:	08001da1 	.word	0x08001da1
 8001d58:	08001dc3 	.word	0x08001dc3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d62:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <HAL_ADC_ConfigChannel+0x470>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	0691      	lsls	r1, r2, #26
 8001d6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d7a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d7c:	e07e      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <HAL_ADC_ConfigChannel+0x470>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	0691      	lsls	r1, r2, #26
 8001d8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d90:	430a      	orrs	r2, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d9e:	e06d      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001da6:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_ADC_ConfigChannel+0x470>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	0691      	lsls	r1, r2, #26
 8001db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001db2:	430a      	orrs	r2, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dbe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dc0:	e05c      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dc8:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_ADC_ConfigChannel+0x470>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	0691      	lsls	r1, r2, #26
 8001dd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001de0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001de2:	e04b      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d107      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e06:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	069b      	lsls	r3, r3, #26
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e2a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	069b      	lsls	r3, r3, #26
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e4e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	069b      	lsls	r3, r3, #26
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d10a      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e74:	e001      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001e76:	bf00      	nop
 8001e78:	e000      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001e7a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x344>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x344>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x346>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 80ff 	bne.w	80020a2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d00f      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001eca:	e049      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	d91c      	bls.n	8001f28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6999      	ldr	r1, [r3, #24]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	3b1b      	subs	r3, #27
 8001f00:	2207      	movs	r2, #7
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4019      	ands	r1, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6898      	ldr	r0, [r3, #8]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1b      	subs	r3, #27
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	619a      	str	r2, [r3, #24]
 8001f26:	e01b      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6959      	ldr	r1, [r3, #20]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4019      	ands	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6898      	ldr	r0, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_ADC_ConfigChannel+0x474>)
 8001f62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	f040 8086 	bne.w	80020a2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d17f      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x478>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d106      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x478>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e005      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x47a>
 8001fc6:	bf00      	nop
 8001fc8:	83fff000 	.word	0x83fff000
 8001fcc:	50000300 	.word	0x50000300
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d150      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x4a0>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x4a2>
 8001ff8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d13c      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d11d      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x4ea>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800200e:	d118      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_ADC_ConfigChannel+0x564>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <HAL_ADC_ConfigChannel+0x568>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002032:	e002      	b.n	800203a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002040:	e02e      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b11      	cmp	r3, #17
 8002048:	d10b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x50a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002052:	d106      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800205c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002060:	e01e      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b12      	cmp	r3, #18
 8002068:	d11a      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800206a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002074:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002076:	e013      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800208a:	e00a      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800209e:	e000      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	376c      	adds	r7, #108	; 0x6c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000400 	.word	0x20000400
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d126      	bne.n	800212c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d115      	bne.n	8002124 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d111      	bne.n	8002124 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff fad7 	bl	80016d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800212a:	e004      	b.n	8002136 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff facd 	bl	80016ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f043 0204 	orr.w	r2, r3, #4
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff fabd 	bl	8001700 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <ADC_Enable+0x2c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <ADC_Enable+0x2c>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <ADC_Enable+0x2e>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d143      	bne.n	800224a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <ADC_Enable+0xc4>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e02f      	b.n	800224c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021fc:	f7ff fa3c 	bl	8001678 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002202:	e01b      	b.n	800223c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002204:	f7ff fa38 	bl	8001678 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d914      	bls.n	800223c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d00d      	beq.n	800223c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e007      	b.n	800224c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d1dc      	bne.n	8002204 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	8000003f 	.word	0x8000003f

08002258 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <ADC_Disable+0x2c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <ADC_Disable+0x2c>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <ADC_Disable+0x2e>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d047      	beq.n	800231a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030d 	and.w	r3, r3, #13
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10f      	bne.n	80022b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0202 	orr.w	r2, r2, #2
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2203      	movs	r2, #3
 80022ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022b0:	f7ff f9e2 	bl	8001678 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b6:	e029      	b.n	800230c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0210 	orr.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e023      	b.n	800231c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022d4:	f7ff f9d0 	bl	8001678 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d914      	bls.n	800230c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10d      	bne.n	800230c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f043 0210 	orr.w	r2, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e007      	b.n	800231c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d0dc      	beq.n	80022d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4907      	ldr	r1, [pc, #28]	; (80023c0 <__NVIC_EnableIRQ+0x38>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff8e 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff29 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff3e 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff8e 	bl	8002418 <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5d 	bl	80023c4 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff31 	bl	8002388 <__NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffa2 	bl	8002480 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e037      	b.n	80025cc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002572:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002576:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f940 	bl	8002834 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}  
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_DMA_Start_IT+0x20>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e04a      	b.n	800268a <HAL_DMA_Start_IT+0xb6>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002602:	2b01      	cmp	r3, #1
 8002604:	d13a      	bne.n	800267c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f8d4 	bl	80027d8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 020e 	orr.w	r2, r2, #14
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e00f      	b.n	800266a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 020a 	orr.w	r2, r2, #10
 8002658:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e005      	b.n	8002688 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002684:	2302      	movs	r3, #2
 8002686:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002688:	7dfb      	ldrb	r3, [r7, #23]
} 
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2204      	movs	r2, #4
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d024      	beq.n	8002704 <HAL_DMA_IRQHandler+0x72>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01f      	beq.n	8002704 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0204 	bic.w	r2, r2, #4
 80026e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2104      	movs	r1, #4
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d06a      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002702:	e065      	b.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2202      	movs	r2, #2
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d02c      	beq.n	800276e <HAL_DMA_IRQHandler+0xdc>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d027      	beq.n	800276e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 020a 	bic.w	r2, r2, #10
 800273a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	2102      	movs	r1, #2
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d035      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800276c:	e030      	b.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2208      	movs	r2, #8
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 020e 	bic.w	r2, r2, #14
 8002796:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f202 	lsl.w	r2, r1, r2
 80027a6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
    }
  }
}  
 80027ce:	e7ff      	b.n	80027d0 <HAL_DMA_IRQHandler+0x13e>
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d108      	bne.n	8002818 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002816:	e007      	b.n	8002828 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <DMA_CalcBaseAndBitshift+0x34>)
 8002844:	4413      	add	r3, r2
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <DMA_CalcBaseAndBitshift+0x38>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	009a      	lsls	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a06      	ldr	r2, [pc, #24]	; (8002870 <DMA_CalcBaseAndBitshift+0x3c>)
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	bffdfff8 	.word	0xbffdfff8
 800286c:	cccccccd 	.word	0xcccccccd
 8002870:	40020000 	.word	0x40020000

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e14e      	b.n	8002b22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8140 	beq.w	8002b1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d005      	beq.n	80028b4 <HAL_GPIO_Init+0x40>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d130      	bne.n	8002916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ea:	2201      	movs	r2, #1
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 0201 	and.w	r2, r3, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b03      	cmp	r3, #3
 8002920:	d017      	beq.n	8002952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d123      	bne.n	80029a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 809a 	beq.w	8002b1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e8:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <HAL_GPIO_Init+0x2cc>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <HAL_GPIO_Init+0x2cc>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <HAL_GPIO_Init+0x2cc>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a2a:	d013      	beq.n	8002a54 <HAL_GPIO_Init+0x1e0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a46      	ldr	r2, [pc, #280]	; (8002b48 <HAL_GPIO_Init+0x2d4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00d      	beq.n	8002a50 <HAL_GPIO_Init+0x1dc>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a45      	ldr	r2, [pc, #276]	; (8002b4c <HAL_GPIO_Init+0x2d8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x1d8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a44      	ldr	r2, [pc, #272]	; (8002b50 <HAL_GPIO_Init+0x2dc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_GPIO_Init+0x1d4>
 8002a44:	2303      	movs	r3, #3
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x1e2>
 8002a48:	2305      	movs	r3, #5
 8002a4a:	e004      	b.n	8002a56 <HAL_GPIO_Init+0x1e2>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e002      	b.n	8002a56 <HAL_GPIO_Init+0x1e2>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_GPIO_Init+0x1e2>
 8002a54:	2300      	movs	r3, #0
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a66:	4937      	ldr	r1, [pc, #220]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a98:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ac2:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x2e0>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f aea9 	bne.w	8002884 <HAL_GPIO_Init+0x10>
  }
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010000 	.word	0x40010000
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	48000800 	.word	0x48000800
 8002b50:	48000c00 	.word	0x48000c00
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f001 b823 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 817d 	beq.w	8002ebe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bc4:	4bbc      	ldr	r3, [pc, #752]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d00c      	beq.n	8002bea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd0:	4bb9      	ldr	r3, [pc, #740]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d15c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x10e>
 8002bdc:	4bb6      	ldr	r3, [pc, #728]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d155      	bne.n	8002c96 <HAL_RCC_OscConfig+0x10e>
 8002bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0x94>
 8002c16:	4ba8      	ldr	r3, [pc, #672]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e015      	b.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c44:	4b9c      	ldr	r3, [pc, #624]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c54:	fa92 f2a2 	rbit	r2, r2
 8002c58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 811f 	beq.w	8002ebc <HAL_RCC_OscConfig+0x334>
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 8116 	bne.w	8002ebc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f000 bfaf 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
 8002ca8:	4b83      	ldr	r3, [pc, #524]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a82      	ldr	r2, [pc, #520]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	e036      	b.n	8002d24 <HAL_RCC_OscConfig+0x19c>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x158>
 8002cc6:	4b7c      	ldr	r3, [pc, #496]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7b      	ldr	r2, [pc, #492]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b79      	ldr	r3, [pc, #484]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e021      	b.n	8002d24 <HAL_RCC_OscConfig+0x19c>
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x184>
 8002cf2:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a70      	ldr	r2, [pc, #448]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b6e      	ldr	r3, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6d      	ldr	r2, [pc, #436]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0x19c>
 8002d0c:	4b6a      	ldr	r3, [pc, #424]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a69      	ldr	r2, [pc, #420]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a66      	ldr	r2, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d24:	4b64      	ldr	r3, [pc, #400]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f023 020f 	bic.w	r2, r3, #15
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	495f      	ldr	r1, [pc, #380]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d059      	beq.n	8002e02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fc93 	bl	8001678 <HAL_GetTick>
 8002d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe fc8e 	bl	8001678 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d902      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f000 bf43 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
 8002d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_OscConfig+0x218>
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	e015      	b.n	8002dcc <HAL_RCC_OscConfig+0x244>
 8002da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002dbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002dd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002dd8:	fa92 f2a2 	rbit	r2, r2
 8002ddc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002de0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002de4:	fab2 f282 	clz	r2, r2
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f042 0220 	orr.w	r2, r2, #32
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f002 021f 	and.w	r2, r2, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ab      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1d0>
 8002e00:	e05d      	b.n	8002ebe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe fc39 	bl	8001678 <HAL_GetTick>
 8002e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fc34 	bl	8001678 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d902      	bls.n	8002e22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	f000 bee9 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
 8002e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2cc>
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	e015      	b.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
 8002e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_RCC_OscConfig+0x330>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f002 021f 	and.w	r2, r2, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ab      	bne.n	8002e0c <HAL_RCC_OscConfig+0x284>
 8002eb4:	e003      	b.n	8002ebe <HAL_RCC_OscConfig+0x336>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 817d 	beq.w	80031ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ed4:	4ba6      	ldr	r3, [pc, #664]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ee0:	4ba3      	ldr	r3, [pc, #652]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d172      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x44a>
 8002eec:	4ba0      	ldr	r3, [pc, #640]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d16c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x44a>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3a0>
 8002f22:	4b93      	ldr	r3, [pc, #588]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	e013      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c8>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f4c:	4b88      	ldr	r3, [pc, #544]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2202      	movs	r2, #2
 8002f52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f5a:	fa92 f2a2 	rbit	r2, r2
 8002f5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0220 	orr.w	r2, r2, #32
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCC_OscConfig+0x410>
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f000 be2e 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	4b75      	ldr	r3, [pc, #468]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	21f8      	movs	r1, #248	; 0xf8
 8002fae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fb6:	fa91 f1a1 	rbit	r1, r1
 8002fba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fc2:	fab1 f181 	clz	r1, r1
 8002fc6:	b2c9      	uxtb	r1, r1
 8002fc8:	408b      	lsls	r3, r1
 8002fca:	4969      	ldr	r1, [pc, #420]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd0:	e0fd      	b.n	80031ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8088 	beq.w	80030f4 <HAL_RCC_OscConfig+0x56c>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ff6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	461a      	mov	r2, r3
 800300c:	2301      	movs	r3, #1
 800300e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fb32 	bl	8001678 <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe fb2d 	bl	8001678 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	f000 bde2 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003042:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_RCC_OscConfig+0x4d8>
 800305a:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e013      	b.n	8003088 <HAL_RCC_OscConfig+0x500>
 8003060:	2302      	movs	r3, #2
 8003062:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003072:	2302      	movs	r3, #2
 8003074:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003078:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003084:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2202      	movs	r2, #2
 800308a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800308e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003092:	fa92 f2a2 	rbit	r2, r2
 8003096:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800309a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800309e:	fab2 f282 	clz	r2, r2
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f042 0220 	orr.w	r2, r2, #32
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f002 021f 	and.w	r2, r2, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0af      	beq.n	800301a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	21f8      	movs	r1, #248	; 0xf8
 80030d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030d8:	fa91 f1a1 	rbit	r1, r1
 80030dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030e4:	fab1 f181 	clz	r1, r1
 80030e8:	b2c9      	uxtb	r1, r1
 80030ea:	408b      	lsls	r3, r1
 80030ec:	4920      	ldr	r1, [pc, #128]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
 80030f2:	e06c      	b.n	80031ce <HAL_RCC_OscConfig+0x646>
 80030f4:	2301      	movs	r3, #1
 80030f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003106:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	461a      	mov	r2, r3
 800311c:	2300      	movs	r3, #0
 800311e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe faaa 	bl	8001678 <HAL_GetTick>
 8003124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe faa5 	bl	8001678 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d902      	bls.n	8003140 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	f000 bd5a 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
 8003140:	2302      	movs	r3, #2
 8003142:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d104      	bne.n	8003174 <HAL_RCC_OscConfig+0x5ec>
 800316a:	4b01      	ldr	r3, [pc, #4]	; (8003170 <HAL_RCC_OscConfig+0x5e8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e015      	b.n	800319c <HAL_RCC_OscConfig+0x614>
 8003170:	40021000 	.word	0x40021000
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003186:	2302      	movs	r3, #2
 8003188:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800318c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003198:	4bc8      	ldr	r3, [pc, #800]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2202      	movs	r2, #2
 800319e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80031a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031a6:	fa92 f2a2 	rbit	r2, r2
 80031aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80031ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80031b2:	fab2 f282 	clz	r2, r2
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f042 0220 	orr.w	r2, r2, #32
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f002 021f 	and.w	r2, r2, #31
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ad      	bne.n	800312a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8110 	beq.w	8003404 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d079      	beq.n	80032e8 <HAL_RCC_OscConfig+0x760>
 80031f4:	2301      	movs	r3, #1
 80031f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	4bab      	ldr	r3, [pc, #684]	; (80034c0 <HAL_RCC_OscConfig+0x938>)
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	461a      	mov	r2, r3
 800321a:	2301      	movs	r3, #1
 800321c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe fa2b 	bl	8001678 <HAL_GetTick>
 8003222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003228:	f7fe fa26 	bl	8001678 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d902      	bls.n	800323e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	f000 bcdb 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
 800323e:	2302      	movs	r3, #2
 8003240:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003296:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003298:	4b88      	ldr	r3, [pc, #544]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 800329a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032a4:	2102      	movs	r1, #2
 80032a6:	6019      	str	r1, [r3, #0]
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f1a3 	rbit	r1, r3
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032be:	6019      	str	r1, [r3, #0]
  return result;
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0a0      	beq.n	8003228 <HAL_RCC_OscConfig+0x6a0>
 80032e6:	e08d      	b.n	8003404 <HAL_RCC_OscConfig+0x87c>
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800330a:	601a      	str	r2, [r3, #0]
  return result;
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003314:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4b68      	ldr	r3, [pc, #416]	; (80034c0 <HAL_RCC_OscConfig+0x938>)
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	461a      	mov	r2, r3
 8003326:	2300      	movs	r3, #0
 8003328:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fe f9a5 	bl	8001678 <HAL_GetTick>
 800332e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe f9a0 	bl	8001678 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d902      	bls.n	800334a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	f000 bc55 	b.w	8003bf4 <HAL_RCC_OscConfig+0x106c>
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003352:	2202      	movs	r2, #2
 8003354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003376:	2202      	movs	r2, #2
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fa93 f2a3 	rbit	r2, r3
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800339a:	2202      	movs	r2, #2
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b6:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 80033b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033c2:	2102      	movs	r1, #2
 80033c4:	6019      	str	r1, [r3, #0]
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f1a3 	rbit	r1, r3
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033dc:	6019      	str	r1, [r3, #0]
  return result;
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d197      	bne.n	8003334 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 81a1 	beq.w	800375c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003436:	61d3      	str	r3, [r2, #28]
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003452:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_RCC_OscConfig+0x93c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11a      	bne.n	800349c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_RCC_OscConfig+0x93c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <HAL_RCC_OscConfig+0x93c>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe f901 	bl	8001678 <HAL_GetTick>
 8003476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	e009      	b.n	8003490 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347c:	f7fe f8fc 	bl	8001678 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	; 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e3b1      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_RCC_OscConfig+0x93c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCC_OscConfig+0x940>
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a02      	ldr	r2, [pc, #8]	; (80034bc <HAL_RCC_OscConfig+0x934>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6213      	str	r3, [r2, #32]
 80034b8:	e03c      	b.n	8003534 <HAL_RCC_OscConfig+0x9ac>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	10908120 	.word	0x10908120
 80034c4:	40007000 	.word	0x40007000
 80034c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x96a>
 80034d8:	4bc1      	ldr	r3, [pc, #772]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4ac0      	ldr	r2, [pc, #768]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	4bbe      	ldr	r3, [pc, #760]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4abd      	ldr	r2, [pc, #756]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	e020      	b.n	8003534 <HAL_RCC_OscConfig+0x9ac>
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x994>
 8003502:	4bb7      	ldr	r3, [pc, #732]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4ab6      	ldr	r2, [pc, #728]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4bb4      	ldr	r3, [pc, #720]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4ab3      	ldr	r2, [pc, #716]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0x9ac>
 800351c:	4bb0      	ldr	r3, [pc, #704]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4aaf      	ldr	r2, [pc, #700]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6213      	str	r3, [r2, #32]
 8003528:	4bad      	ldr	r3, [pc, #692]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4aac      	ldr	r2, [pc, #688]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 800352e:	f023 0304 	bic.w	r3, r3, #4
 8003532:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8081 	beq.w	8003648 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7fe f897 	bl	8001678 <HAL_GetTick>
 800354a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fe f892 	bl	8001678 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e345      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
 8003568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003570:	2202      	movs	r2, #2
 8003572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f2a3 	rbit	r2, r3
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003594:	2202      	movs	r2, #2
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	fa93 f2a3 	rbit	r2, r3
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035ae:	601a      	str	r2, [r3, #0]
  return result;
 80035b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_OscConfig+0xa4c>
 80035ce:	4b84      	ldr	r3, [pc, #528]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	e013      	b.n	80035fc <HAL_RCC_OscConfig+0xa74>
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035dc:	2202      	movs	r2, #2
 80035de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003600:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003604:	2102      	movs	r1, #2
 8003606:	6011      	str	r1, [r2, #0]
 8003608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	fa92 f1a2 	rbit	r1, r2
 8003616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800361a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800361e:	6011      	str	r1, [r2, #0]
  return result;
 8003620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003624:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f002 021f 	and.w	r2, r2, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d084      	beq.n	8003550 <HAL_RCC_OscConfig+0x9c8>
 8003646:	e07f      	b.n	8003748 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fe f816 	bl	8001678 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe f811 	bl	8001678 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e2c4      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003672:	2202      	movs	r2, #2
 8003674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003696:	2202      	movs	r2, #2
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036b0:	601a      	str	r2, [r3, #0]
  return result;
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_OscConfig+0xb4e>
 80036d0:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	e013      	b.n	80036fe <HAL_RCC_OscConfig+0xb76>
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036de:	2202      	movs	r2, #2
 80036e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003702:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003706:	2102      	movs	r1, #2
 8003708:	6011      	str	r1, [r2, #0]
 800370a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	fa92 f1a2 	rbit	r1, r2
 8003718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800371c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003720:	6011      	str	r1, [r2, #0]
  return result;
 8003722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003726:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f002 021f 	and.w	r2, r2, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f202 	lsl.w	r2, r1, r2
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d184      	bne.n	8003652 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003748:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8242 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <HAL_RCC_OscConfig+0xc58>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	f000 8213 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	2b02      	cmp	r3, #2
 800378a:	f040 8162 	bne.w	8003a52 <HAL_RCC_OscConfig+0xeca>
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800379a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037b2:	601a      	str	r2, [r3, #0]
  return result;
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd ff50 	bl	8001678 <HAL_GetTick>
 80037d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	e00c      	b.n	80037f8 <HAL_RCC_OscConfig+0xc70>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd ff48 	bl	8001678 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e1fd      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800381c:	601a      	str	r2, [r3, #0]
  return result;
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003826:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <HAL_RCC_OscConfig+0xcba>
 800383c:	4bb0      	ldr	r3, [pc, #704]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	e027      	b.n	8003892 <HAL_RCC_OscConfig+0xd0a>
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800384a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fa93 f2a3 	rbit	r2, r3
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	4b9c      	ldr	r3, [pc, #624]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003896:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800389a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800389e:	6011      	str	r1, [r2, #0]
 80038a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	fa92 f1a2 	rbit	r1, r2
 80038ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038b6:	6011      	str	r1, [r2, #0]
  return result;
 80038b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	fab2 f282 	clz	r2, r2
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f002 021f 	and.w	r2, r2, #31
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d182      	bne.n	80037e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038de:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	430b      	orrs	r3, r1
 8003900:	497f      	ldr	r1, [pc, #508]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
 8003906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800390e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fa93 f2a3 	rbit	r2, r3
 8003922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003926:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800392a:	601a      	str	r2, [r3, #0]
  return result;
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003934:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	461a      	mov	r2, r3
 8003948:	2301      	movs	r3, #1
 800394a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd fe94 	bl	8001678 <HAL_GetTick>
 8003950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003954:	e009      	b.n	800396a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fd fe8f 	bl	8001678 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e144      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800398e:	601a      	str	r2, [r3, #0]
  return result;
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003998:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe2c>
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e027      	b.n	8003a04 <HAL_RCC_OscConfig+0xe7c>
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	fa93 f2a3 	rbit	r2, r3
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	fa93 f2a3 	rbit	r2, r3
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a10:	6011      	str	r1, [r2, #0]
 8003a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	fa92 f1a2 	rbit	r1, r2
 8003a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a28:	6011      	str	r1, [r2, #0]
  return result;
 8003a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	fab2 f282 	clz	r2, r2
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f002 021f 	and.w	r2, r2, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d082      	beq.n	8003956 <HAL_RCC_OscConfig+0xdce>
 8003a50:	e0cf      	b.n	8003bf2 <HAL_RCC_OscConfig+0x106a>
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f2a3 	rbit	r2, r3
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a76:	601a      	str	r2, [r3, #0]
  return result;
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	461a      	mov	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd fdee 	bl	8001678 <HAL_GetTick>
 8003a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa0:	e009      	b.n	8003ab6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fd fde9 	bl	8001678 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e09e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	fa93 f2a3 	rbit	r2, r3
 8003ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ada:	601a      	str	r2, [r3, #0]
  return result;
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d104      	bne.n	8003b04 <HAL_RCC_OscConfig+0xf7c>
 8003afa:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <HAL_RCC_OscConfig+0xf78>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	e029      	b.n	8003b54 <HAL_RCC_OscConfig+0xfcc>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	fa93 f2a3 	rbit	r2, r3
 8003b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	fa93 f2a3 	rbit	r2, r3
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCC_OscConfig+0x1078>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	fa92 f1a2 	rbit	r1, r2
 8003b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b78:	6011      	str	r1, [r2, #0]
  return result;
 8003b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d180      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xf1a>
 8003ba0:	e027      	b.n	8003bf2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e01e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_OscConfig+0x1078>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bc2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000

08003c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b09e      	sub	sp, #120	; 0x78
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e162      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b90      	ldr	r3, [pc, #576]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d910      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b8d      	ldr	r3, [pc, #564]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 0207 	bic.w	r2, r3, #7
 8003c32:	498b      	ldr	r1, [pc, #556]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e14a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b82      	ldr	r3, [pc, #520]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	497f      	ldr	r1, [pc, #508]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80dc 	beq.w	8003e30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d13c      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xf6>
 8003c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d102      	bne.n	8003caa <HAL_RCC_ClockConfig+0xa6>
 8003ca4:	4b6f      	ldr	r3, [pc, #444]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	e00f      	b.n	8003cca <HAL_RCC_ClockConfig+0xc6>
 8003caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc6:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cce:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cd2:	fa92 f2a2 	rbit	r2, r2
 8003cd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f042 0220 	orr.w	r2, r2, #32
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f002 021f 	and.w	r2, r2, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d17b      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0f3      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d13c      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x178>
 8003d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d102      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x128>
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCC_ClockConfig+0x148>
 8003d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d48:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d50:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d54:	fa92 f2a2 	rbit	r2, r2
 8003d58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d5c:	fab2 f282 	clz	r2, r2
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	f042 0220 	orr.w	r2, r2, #32
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	f002 021f 	and.w	r2, r2, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d13a      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b2      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x1a0>
 8003d9e:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	e00d      	b.n	8003dc0 <HAL_RCC_ClockConfig+0x1bc>
 8003da4:	2302      	movs	r3, #2
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	2302      	movs	r3, #2
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	61ba      	str	r2, [r7, #24]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	fa92 f2a2 	rbit	r2, r2
 8003dca:	617a      	str	r2, [r7, #20]
  return result;
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	fab2 f282 	clz	r2, r2
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	f042 0220 	orr.w	r2, r2, #32
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	f002 021f 	and.w	r2, r2, #31
 8003dde:	2101      	movs	r1, #1
 8003de0:	fa01 f202 	lsl.w	r2, r1, r2
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e079      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	491a      	ldr	r1, [pc, #104]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fd fc3a 	bl	8001678 <HAL_GetTick>
 8003e04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd fc36 	bl	8001678 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e061      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d214      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	4906      	ldr	r1, [pc, #24]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCC_ClockConfig+0x25c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e040      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x2de>
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_RCC_ClockConfig+0x2e8>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	491a      	ldr	r1, [pc, #104]	; (8003eec <HAL_RCC_ClockConfig+0x2e8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_RCC_ClockConfig+0x2e8>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4912      	ldr	r1, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x2e8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ea6:	f000 f829 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eaa:	4601      	mov	r1, r0
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_RCC_ClockConfig+0x2e8>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb4:	22f0      	movs	r2, #240	; 0xf0
 8003eb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	fa92 f2a2 	rbit	r2, r2
 8003ebe:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	40d3      	lsrs	r3, r2
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x2ec>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd fb88 	bl	80015f0 <HAL_InitTick>
  
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3778      	adds	r7, #120	; 0x78
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08004e2c 	.word	0x08004e2c
 8003ef4:	20000400 	.word	0x20000400
 8003ef8:	20000404 	.word	0x20000404

08003efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b08b      	sub	sp, #44	; 0x2c
 8003f00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x30>
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x36>
 8003f2a:	e03c      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f2e:	623b      	str	r3, [r7, #32]
      break;
 8003f30:	e03c      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	fa92 f2a2 	rbit	r2, r2
 8003f44:	607a      	str	r2, [r7, #4]
  return result;
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	40d3      	lsrs	r3, r2
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f56:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	220f      	movs	r2, #15
 8003f60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	fa92 f2a2 	rbit	r2, r2
 8003f68:	60fa      	str	r2, [r7, #12]
  return result;
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	fab2 f282 	clz	r2, r2
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	40d3      	lsrs	r3, r2
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f84:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	e004      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	623b      	str	r3, [r7, #32]
      break;
 8003fa4:	e002      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fa8:	623b      	str	r3, [r7, #32]
      break;
 8003faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fac:	6a3b      	ldr	r3, [r7, #32]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	372c      	adds	r7, #44	; 0x2c
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	007a1200 	.word	0x007a1200
 8003fc4:	08004e44 	.word	0x08004e44
 8003fc8:	08004e54 	.word	0x08004e54
 8003fcc:	003d0900 	.word	0x003d0900

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000400 	.word	0x20000400

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fee:	f7ff ffef 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8003ff2:	4601      	mov	r1, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ffc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004000:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	fa92 f2a2 	rbit	r2, r2
 8004008:	603a      	str	r2, [r7, #0]
  return result;
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	fab2 f282 	clz	r2, r2
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	40d3      	lsrs	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004016:	5cd3      	ldrb	r3, [r2, r3]
 8004018:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	08004e3c 	.word	0x08004e3c

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004032:	f7ff ffcd 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8004036:	4601      	mov	r1, r0
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004040:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004044:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	fa92 f2a2 	rbit	r2, r2
 800404c:	603a      	str	r2, [r7, #0]
  return result;
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	fab2 f282 	clz	r2, r2
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	40d3      	lsrs	r3, r2
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <HAL_RCC_GetPCLK2Freq+0x40>)
 800405a:	5cd3      	ldrb	r3, [r2, r3]
 800405c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	08004e3c 	.word	0x08004e3c

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b092      	sub	sp, #72	; 0x48
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80d4 	beq.w	800423c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004094:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10e      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a0:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4a4a      	ldr	r2, [pc, #296]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	61d3      	str	r3, [r2, #28]
 80040ac:	4b48      	ldr	r3, [pc, #288]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d118      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ca:	4b42      	ldr	r3, [pc, #264]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d6:	f7fd facf 	bl	8001678 <HAL_GetTick>
 80040da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040dc:	e008      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040de:	f7fd facb 	bl	8001678 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b64      	cmp	r3, #100	; 0x64
 80040ea:	d901      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e14b      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f0:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fc:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8084 	beq.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004118:	429a      	cmp	r2, r3
 800411a:	d07c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	461a      	mov	r2, r3
 8004146:	2301      	movs	r3, #1
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	461a      	mov	r2, r3
 800416a:	2300      	movs	r3, #0
 800416c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004172:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d04b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417e:	f7fd fa7b 	bl	8001678 <HAL_GetTick>
 8004182:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fd fa77 	bl	8001678 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e0f5      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800419c:	2302      	movs	r3, #2
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	2302      	movs	r3, #2
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	61fb      	str	r3, [r7, #28]
  return result;
 80041b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d108      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041ca:	4b01      	ldr	r3, [pc, #4]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	e00d      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40007000 	.word	0x40007000
 80041d8:	10908100 	.word	0x10908100
 80041dc:	2302      	movs	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2202      	movs	r2, #2
 80041ee:	613a      	str	r2, [r7, #16]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	fa92 f2a2 	rbit	r2, r2
 80041f6:	60fa      	str	r2, [r7, #12]
  return result;
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	fab2 f282 	clz	r2, r2
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f002 021f 	and.w	r2, r2, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f202 	lsl.w	r2, r1, r2
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0b7      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004216:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	495b      	ldr	r1, [pc, #364]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004224:	4313      	orrs	r3, r2
 8004226:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004228:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004230:	4b57      	ldr	r3, [pc, #348]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	4a56      	ldr	r2, [pc, #344]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004248:	4b51      	ldr	r3, [pc, #324]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f023 0203 	bic.w	r2, r3, #3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	494e      	ldr	r1, [pc, #312]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004256:	4313      	orrs	r3, r2
 8004258:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004266:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f023 0210 	bic.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4947      	ldr	r1, [pc, #284]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004274:	4313      	orrs	r3, r2
 8004276:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	493f      	ldr	r1, [pc, #252]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042a2:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f023 0220 	bic.w	r2, r3, #32
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4938      	ldr	r1, [pc, #224]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c0:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	4930      	ldr	r1, [pc, #192]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4929      	ldr	r1, [pc, #164]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4921      	ldr	r1, [pc, #132]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800430a:	4313      	orrs	r3, r2
 800430c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	491a      	ldr	r1, [pc, #104]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004328:	4313      	orrs	r3, r2
 800432a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	4912      	ldr	r1, [pc, #72]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004346:	4313      	orrs	r3, r2
 8004348:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004356:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	490b      	ldr	r1, [pc, #44]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004364:	4313      	orrs	r3, r2
 8004366:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4903      	ldr	r1, [pc, #12]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004382:	4313      	orrs	r3, r2
 8004384:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3748      	adds	r7, #72	; 0x48
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000

08004394 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e097      	b.n	80044d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fd f821 	bl	8001404 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80043d8:	f023 0307 	bic.w	r3, r3, #7
 80043dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 f879 	bl	80044e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	4313      	orrs	r3, r2
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004434:	f023 030c 	bic.w	r3, r3, #12
 8004438:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	4313      	orrs	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	011a      	lsls	r2, r3, #4
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	031b      	lsls	r3, r3, #12
 8004464:	4313      	orrs	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	4313      	orrs	r3, r2
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a2e      	ldr	r2, [pc, #184]	; (80045ac <TIM_Base_SetConfig+0xcc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_Base_SetConfig+0x20>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d108      	bne.n	8004512 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a25      	ldr	r2, [pc, #148]	; (80045ac <TIM_Base_SetConfig+0xcc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00f      	beq.n	800453a <TIM_Base_SetConfig+0x5a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004520:	d00b      	beq.n	800453a <TIM_Base_SetConfig+0x5a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <TIM_Base_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <TIM_Base_SetConfig+0x5a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <TIM_Base_SetConfig+0xd4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <TIM_Base_SetConfig+0x5a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a20      	ldr	r2, [pc, #128]	; (80045b8 <TIM_Base_SetConfig+0xd8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d108      	bne.n	800454c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <TIM_Base_SetConfig+0xcc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00b      	beq.n	8004590 <TIM_Base_SetConfig+0xb0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <TIM_Base_SetConfig+0xd0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_Base_SetConfig+0xb0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0c      	ldr	r2, [pc, #48]	; (80045b4 <TIM_Base_SetConfig+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0b      	ldr	r2, [pc, #44]	; (80045b8 <TIM_Base_SetConfig+0xd8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	615a      	str	r2, [r3, #20]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e04f      	b.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a21      	ldr	r2, [pc, #132]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d108      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004604:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d004      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000

08004688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e040      	b.n	800471c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc ff1e 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f82c 	bl	8004724 <UART_SetConfig>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e022      	b.n	800471c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f956 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f9dd 	bl	8004ad4 <UART_CheckIdleState>
 800471a:	4603      	mov	r3, r0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b8a      	ldr	r3, [pc, #552]	; (8004978 <UART_SetConfig+0x254>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	430b      	orrs	r3, r1
 800475a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	430a      	orrs	r2, r1
 8004794:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a78      	ldr	r2, [pc, #480]	; (800497c <UART_SetConfig+0x258>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d120      	bne.n	80047e2 <UART_SetConfig+0xbe>
 80047a0:	4b77      	ldr	r3, [pc, #476]	; (8004980 <UART_SetConfig+0x25c>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d817      	bhi.n	80047dc <UART_SetConfig+0xb8>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0x90>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c5 	.word	0x080047c5
 80047b8:	080047d1 	.word	0x080047d1
 80047bc:	080047d7 	.word	0x080047d7
 80047c0:	080047cb 	.word	0x080047cb
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e01d      	b.n	8004806 <UART_SetConfig+0xe2>
 80047ca:	2302      	movs	r3, #2
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e01a      	b.n	8004806 <UART_SetConfig+0xe2>
 80047d0:	2304      	movs	r3, #4
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e017      	b.n	8004806 <UART_SetConfig+0xe2>
 80047d6:	2308      	movs	r3, #8
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e014      	b.n	8004806 <UART_SetConfig+0xe2>
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e011      	b.n	8004806 <UART_SetConfig+0xe2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a67      	ldr	r2, [pc, #412]	; (8004984 <UART_SetConfig+0x260>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d102      	bne.n	80047f2 <UART_SetConfig+0xce>
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0xe2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a64      	ldr	r2, [pc, #400]	; (8004988 <UART_SetConfig+0x264>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d102      	bne.n	8004802 <UART_SetConfig+0xde>
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e001      	b.n	8004806 <UART_SetConfig+0xe2>
 8004802:	2310      	movs	r3, #16
 8004804:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d15a      	bne.n	80048c6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004810:	7ffb      	ldrb	r3, [r7, #31]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d827      	bhi.n	8004866 <UART_SetConfig+0x142>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0xf8>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004841 	.word	0x08004841
 8004820:	08004849 	.word	0x08004849
 8004824:	08004851 	.word	0x08004851
 8004828:	08004867 	.word	0x08004867
 800482c:	08004857 	.word	0x08004857
 8004830:	08004867 	.word	0x08004867
 8004834:	08004867 	.word	0x08004867
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff fbd2 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004844:	61b8      	str	r0, [r7, #24]
        break;
 8004846:	e013      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7ff fbf0 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 800484c:	61b8      	str	r0, [r7, #24]
        break;
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b4e      	ldr	r3, [pc, #312]	; (800498c <UART_SetConfig+0x268>)
 8004852:	61bb      	str	r3, [r7, #24]
        break;
 8004854:	e00c      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7ff fb51 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 800485a:	61b8      	str	r0, [r7, #24]
        break;
 800485c:	e008      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004862:	61bb      	str	r3, [r7, #24]
        break;
 8004864:	e004      	b.n	8004870 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	77bb      	strb	r3, [r7, #30]
        break;
 800486e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d074      	beq.n	8004960 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	005a      	lsls	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b0f      	cmp	r3, #15
 8004890:	d916      	bls.n	80048c0 <UART_SetConfig+0x19c>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d212      	bcs.n	80048c0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f023 030f 	bic.w	r3, r3, #15
 80048a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	89fb      	ldrh	r3, [r7, #14]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	89fa      	ldrh	r2, [r7, #14]
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	e04f      	b.n	8004960 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	77bb      	strb	r3, [r7, #30]
 80048c4:	e04c      	b.n	8004960 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d828      	bhi.n	800491e <UART_SetConfig+0x1fa>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x1b0>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004909 	.word	0x08004909
 80048e0:	0800491f 	.word	0x0800491f
 80048e4:	0800490f 	.word	0x0800490f
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	0800491f 	.word	0x0800491f
 80048f0:	0800491f 	.word	0x0800491f
 80048f4:	08004917 	.word	0x08004917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7ff fb76 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 80048fc:	61b8      	str	r0, [r7, #24]
        break;
 80048fe:	e013      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004900:	f7ff fb94 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e00f      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <UART_SetConfig+0x268>)
 800490a:	61bb      	str	r3, [r7, #24]
        break;
 800490c:	e00c      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490e:	f7ff faf5 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8004912:	61b8      	str	r0, [r7, #24]
        break;
 8004914:	e008      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491a:	61bb      	str	r3, [r7, #24]
        break;
 800491c:	e004      	b.n	8004928 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	77bb      	strb	r3, [r7, #30]
        break;
 8004926:	bf00      	nop
    }

    if (pclk != 0U)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	085a      	lsrs	r2, r3, #1
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d909      	bls.n	800495c <UART_SetConfig+0x238>
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d205      	bcs.n	800495c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e001      	b.n	8004960 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800496c:	7fbb      	ldrb	r3, [r7, #30]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	efff69f3 	.word	0xefff69f3
 800497c:	40013800 	.word	0x40013800
 8004980:	40021000 	.word	0x40021000
 8004984:	40004400 	.word	0x40004400
 8004988:	40004800 	.word	0x40004800
 800498c:	007a1200 	.word	0x007a1200

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b098      	sub	sp, #96	; 0x60
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae4:	f7fc fdc8 	bl	8001678 <HAL_GetTick>
 8004ae8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d12e      	bne.n	8004b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f88c 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d021      	beq.n	8004b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	653b      	str	r3, [r7, #80]	; 0x50
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e062      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d149      	bne.n	8004bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f856 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d03c      	beq.n	8004bf8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e011      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3758      	adds	r7, #88	; 0x58
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e049      	b.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d045      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc fd1b 	bl	8001678 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e048      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d031      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d110      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f838 	bl	8004cf2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2208      	movs	r2, #8
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e029      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	d111      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f81e 	bl	8004cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e00f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d0a6      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b095      	sub	sp, #84	; 0x54
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e6      	bne.n	8004cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d118      	bne.n	8004d9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dae:	bf00      	nop
 8004db0:	3754      	adds	r7, #84	; 0x54
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4d0d      	ldr	r5, [pc, #52]	; (8004df4 <__libc_init_array+0x38>)
 8004dc0:	4c0d      	ldr	r4, [pc, #52]	; (8004df8 <__libc_init_array+0x3c>)
 8004dc2:	1b64      	subs	r4, r4, r5
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	4d0b      	ldr	r5, [pc, #44]	; (8004dfc <__libc_init_array+0x40>)
 8004dce:	4c0c      	ldr	r4, [pc, #48]	; (8004e00 <__libc_init_array+0x44>)
 8004dd0:	f000 f820 	bl	8004e14 <_init>
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	2600      	movs	r6, #0
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de4:	4798      	blx	r3
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	3601      	adds	r6, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08004e64 	.word	0x08004e64
 8004df8:	08004e64 	.word	0x08004e64
 8004dfc:	08004e64 	.word	0x08004e64
 8004e00:	08004e68 	.word	0x08004e68

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
