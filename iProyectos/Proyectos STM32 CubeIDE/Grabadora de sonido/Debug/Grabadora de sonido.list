
Grabadora de sonido.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800407c  0800407c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800407c  0800407c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea4  2000000c  08004090  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000eb0  08004090  00020eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd75  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e00  00000000  00000000  0002cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1aa  00000000  00000000  0002fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d467  00000000  00000000  0004af8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0445  00000000  00000000  000583f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a8  00000000  00000000  000f8888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800402c 	.word	0x0800402c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800402c 	.word	0x0800402c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fc15 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f88d 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f9e9 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f9c9 	bl	8000570 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f997 	bl	8000510 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e2:	f000 f8df 	bl	80003a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f963 	bl	80004b0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 80001ea:	f000 f937 	bl	800045c <MX_DAC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset(audioBuffer, 0, sizeof(audioBuffer));  // Inicializar el búfer de audio a cero
 80001ee:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80001f2:	2100      	movs	r1, #0
 80001f4:	4836      	ldr	r0, [pc, #216]	; (80002d0 <main+0x108>)
 80001f6:	f003 ff11 	bl	800401c <memset>

    while (recordingTime < 10000)  // Grabar durante 10 segundos
 80001fa:	e03c      	b.n	8000276 <main+0xae>
    {
      // Verificar si se presionó el botón de inicio de grabación (A8)
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	4834      	ldr	r0, [pc, #208]	; (80002d4 <main+0x10c>)
 8000202:	f001 ff17 	bl	8002034 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d108      	bne.n	800021e <main+0x56>
      {
        // Iniciar la grabación de audio
        recordingFlag = 1;
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <main+0x110>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);    // Encender el LED indicador
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4830      	ldr	r0, [pc, #192]	; (80002dc <main+0x114>)
 800021a:	f001 ff23 	bl	8002064 <HAL_GPIO_WritePin>
      }

      // Realizar la grabación de audio
      if (recordingFlag)
 800021e:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <main+0x110>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d027      	beq.n	8000276 <main+0xae>
      {
        // Leer la muestra de audio del ADC
        HAL_ADC_Start(&hadc1);
 8000226:	482e      	ldr	r0, [pc, #184]	; (80002e0 <main+0x118>)
 8000228:	f000 fdf8 	bl	8000e1c <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 800022c:	f04f 31ff 	mov.w	r1, #4294967295
 8000230:	482b      	ldr	r0, [pc, #172]	; (80002e0 <main+0x118>)
 8000232:	f000 fe61 	bl	8000ef8 <HAL_ADC_PollForConversion>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d11c      	bne.n	8000276 <main+0xae>
        {
          uint16_t sample = HAL_ADC_GetValue(&hadc1);
 800023c:	4828      	ldr	r0, [pc, #160]	; (80002e0 <main+0x118>)
 800023e:	f000 ff19 	bl	8001074 <HAL_ADC_GetValue>
 8000242:	4603      	mov	r3, r0
 8000244:	803b      	strh	r3, [r7, #0]

          // Almacenar la muestra en el búfer circular
          audioBuffer[writeIndex] = sample;
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <main+0x11c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4921      	ldr	r1, [pc, #132]	; (80002d0 <main+0x108>)
 800024c:	883a      	ldrh	r2, [r7, #0]
 800024e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

          // Actualizar el índice de escritura en el búfer circular
          writeIndex++;
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <main+0x11c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a22      	ldr	r2, [pc, #136]	; (80002e4 <main+0x11c>)
 800025a:	6013      	str	r3, [r2, #0]
          if (writeIndex >= BUFFER_SIZE)
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <main+0x11c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8000264:	d302      	bcc.n	800026c <main+0xa4>
          {
            writeIndex = 0;
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <main+0x11c>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
          }

          // Incrementar el tiempo de grabación
          recordingTime++;
 800026c:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <main+0x120>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <main+0x120>)
 8000274:	6013      	str	r3, [r2, #0]
    while (recordingTime < 10000)  // Grabar durante 10 segundos
 8000276:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <main+0x120>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f242 720f 	movw	r2, #9999	; 0x270f
 800027e:	4293      	cmp	r3, r2
 8000280:	d9bc      	bls.n	80001fc <main+0x34>
        }
      }
    }

    // Detener la grabación de audio
    recordingFlag = 0;
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <main+0x110>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // Apagar el LED indicador
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	4813      	ldr	r0, [pc, #76]	; (80002dc <main+0x114>)
 8000290:	f001 fee8 	bl	8002064 <HAL_GPIO_WritePin>

    // Reproducir el audio grabado a través del DAC
    for (uint32_t i = 0; i < BUFFER_SIZE; i++)
 8000294:	2300      	movs	r3, #0
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	e014      	b.n	80002c4 <main+0xfc>
    {
      // Obtener la muestra de audio del búfer circular
      uint16_t sample = audioBuffer[i];
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <main+0x108>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a2:	807b      	strh	r3, [r7, #2]

      // Configurar y enviar la muestra de audio al DAC
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sample);
 80002a4:	887b      	ldrh	r3, [r7, #2]
 80002a6:	2200      	movs	r2, #0
 80002a8:	2100      	movs	r1, #0
 80002aa:	4810      	ldr	r0, [pc, #64]	; (80002ec <main+0x124>)
 80002ac:	f001 fba3 	bl	80019f6 <HAL_DAC_SetValue>
      HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80002b0:	2100      	movs	r1, #0
 80002b2:	480e      	ldr	r0, [pc, #56]	; (80002ec <main+0x124>)
 80002b4:	f001 fbbe 	bl	8001a34 <HAL_DAC_Start>

      // Esperar un breve tiempo antes de enviar la siguiente muestra (opcional)
      HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fc05 	bl	8000ac8 <HAL_Delay>
    for (uint32_t i = 0; i < BUFFER_SIZE; i++)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3301      	adds	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 80002ca:	d3e6      	bcc.n	800029a <main+0xd2>
    }

    // Bucle infinito para evitar que el programa termine después de reproducir el audio
    while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0x104>
 80002ce:	bf00      	nop
 80002d0:	20000028 	.word	0x20000028
 80002d4:	48000800 	.word	0x48000800
 80002d8:	20000cf0 	.word	0x20000cf0
 80002dc:	48000400 	.word	0x48000400
 80002e0:	20000cf4 	.word	0x20000cf4
 80002e4:	20000ce8 	.word	0x20000ce8
 80002e8:	20000cec 	.word	0x20000cec
 80002ec:	20000d88 	.word	0x20000d88

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09c      	sub	sp, #112	; 0x70
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fe8c 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	2234      	movs	r2, #52	; 0x34
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f003 fe7e 	bl	800401c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	2302      	movs	r3, #2
 8000322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000328:	2310      	movs	r3, #16
 800032a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000330:	2300      	movs	r3, #0
 8000332:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000334:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000338:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fea8 	bl	8002094 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800034a:	f000 f9a3 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2302      	movs	r3, #2
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000368:	2102      	movs	r1, #2
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fed0 	bl	8003110 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000376:	f000 f98d 	bl	8000694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 800037a:	2381      	movs	r3, #129	; 0x81
 800037c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000386:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4618      	mov	r0, r3
 800038c:	f003 f8f6 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000396:	f000 f97d 	bl	8000694 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3770      	adds	r7, #112	; 0x70
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	463b      	mov	r3, r7
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c8:	4b23      	ldr	r3, [pc, #140]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e2:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_ADC1_Init+0xb4>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_ADC1_Init+0xb4>)
 8000404:	2204      	movs	r2, #4
 8000406:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_ADC1_Init+0xb4>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_ADC1_Init+0xb4>)
 8000410:	2200      	movs	r2, #0
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000414:	4810      	ldr	r0, [pc, #64]	; (8000458 <MX_ADC1_Init+0xb4>)
 8000416:	f000 fb7b 	bl	8000b10 <HAL_ADC_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000420:	f000 f938 	bl	8000694 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000424:	2301      	movs	r3, #1
 8000426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000428:	2301      	movs	r3, #1
 800042a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000430:	2307      	movs	r3, #7
 8000432:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_ADC1_Init+0xb4>)
 8000442:	f000 fe25 	bl	8001090 <HAL_ADC_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800044c:	f000 f922 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000cf4 	.word	0x20000cf4

0800045c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_DAC_Init+0x4c>)
 800046e:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <MX_DAC_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000472:	480d      	ldr	r0, [pc, #52]	; (80004a8 <MX_DAC_Init+0x4c>)
 8000474:	f001 fa9d 	bl	80019b2 <HAL_DAC_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800047e:	f000 f909 	bl	8000694 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_DAC_Init+0x4c>)
 8000492:	f001 fb06 	bl	8001aa2 <HAL_DAC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 800049c:	f000 f8fa 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000d88 	.word	0x20000d88
 80004ac:	40007400 	.word	0x40007400

080004b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004b6:	4a15      	ldr	r2, [pc, #84]	; (800050c <MX_USART1_UART_Init+0x5c>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART1_UART_Init+0x58>)
 80004f4:	f003 f9d4 	bl	80038a0 <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004fe:	f000 f8c9 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000d9c 	.word	0x20000d9c
 800050c:	40013800 	.word	0x40013800

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_USART2_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800051c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000554:	f003 f9a4 	bl	80038a0 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f899 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000e24 	.word	0x20000e24
 800056c:	40004400 	.word	0x40004400

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_DMA_Init+0x38>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <MX_DMA_Init+0x38>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_DMA_Init+0x38>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	200b      	movs	r0, #11
 8000594:	f001 f9d7 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000598:	200b      	movs	r0, #11
 800059a:	f001 f9f0 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a30      	ldr	r2, [pc, #192]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a24      	ldr	r2, [pc, #144]	; (8000688 <MX_GPIO_Init+0xdc>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_GPIO_Init+0xdc>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_GPIO_Init+0xdc>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <MX_GPIO_Init+0xdc>)
 8000610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_GPIO_Init+0xdc>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <MX_GPIO_Init+0xe0>)
 800062a:	f001 fd1b 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000634:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_GPIO_Init+0xe4>)
 8000646:	f001 fb83 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000652:	2301      	movs	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_GPIO_Init+0xe4>)
 800065e:	f001 fb77 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_GPIO_Init+0xe0>)
 800067c:	f001 fb68 	bl	8001d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	48000400 	.word	0x48000400
 8000690:	48000800 	.word	0x48000800

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x44>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006d6:	2007      	movs	r0, #7
 80006d8:	f001 f92a 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000708:	d14c      	bne.n	80007a4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <HAL_ADC_MspInit+0xc4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a27      	ldr	r2, [pc, #156]	; (80007ac <HAL_ADC_MspInit+0xc4>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <HAL_ADC_MspInit+0xc4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <HAL_ADC_MspInit+0xc4>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_MspInit+0xc4>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <HAL_ADC_MspInit+0xc4>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 fafe 	bl	8001d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000758:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 800076e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000772:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800077a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 800077e:	2220      	movs	r2, #32
 8000780:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 800078a:	f001 f9d7 	bl	8001b3c <HAL_DMA_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000794:	f7ff ff7e 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 800079c:	639a      	str	r2, [r3, #56]	; 0x38
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_ADC_MspInit+0xc8>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	20000d44 	.word	0x20000d44
 80007b4:	40020008 	.word	0x40020008

080007b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a15      	ldr	r2, [pc, #84]	; (800082c <HAL_DAC_MspInit+0x74>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d124      	bne.n	8000824 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_DAC_MspInit+0x78>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_DAC_MspInit+0x78>)
 80007e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_DAC_MspInit+0x78>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_DAC_MspInit+0x78>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_DAC_MspInit+0x78>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_DAC_MspInit+0x78>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800080a:	2310      	movs	r3, #16
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080e:	2303      	movs	r3, #3
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 fa96 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40007400 	.word	0x40007400
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a2e      	ldr	r2, [pc, #184]	; (800090c <HAL_UART_MspInit+0xd8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d128      	bne.n	80008a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <HAL_UART_MspInit+0xdc>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <HAL_UART_MspInit+0xdc>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <HAL_UART_MspInit+0xdc>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <HAL_UART_MspInit+0xdc>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a27      	ldr	r2, [pc, #156]	; (8000910 <HAL_UART_MspInit+0xdc>)
 8000874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_UART_MspInit+0xdc>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000886:	2330      	movs	r3, #48	; 0x30
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000896:	2307      	movs	r3, #7
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xe0>)
 80008a2:	f001 fa55 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	e02d      	b.n	8000904 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <HAL_UART_MspInit+0xe4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d128      	bne.n	8000904 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0xdc>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <HAL_UART_MspInit+0xdc>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0xdc>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0xdc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_UART_MspInit+0xdc>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_UART_MspInit+0xdc>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e2:	230c      	movs	r3, #12
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f001 fa26 	bl	8001d50 <HAL_GPIO_Init>
}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40013800 	.word	0x40013800
 8000910:	40021000 	.word	0x40021000
 8000914:	48000800 	.word	0x48000800
 8000918:	40004400 	.word	0x40004400

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f88e 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <DMA1_Channel1_IRQHandler+0x10>)
 8000976:	f001 f928 	bl	8001bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000d44 	.word	0x20000d44

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f003 fafd 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009da:	f7ff fbf5 	bl	80001c8 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ec:	08004084 	.word	0x08004084
  ldr r2, =_sbss
 80009f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f4:	20000eb0 	.word	0x20000eb0

080009f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_IRQHandler>
	...

080009fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 ff8f 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe42 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 ffa7 	bl	800199a <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 ff6f 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000eac 	.word	0x20000eac

08000ab0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000eac 	.word	0x20000eac

08000ac8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff ffee 	bl	8000ab0 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffde 	bl	8000ab0 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09a      	sub	sp, #104	; 0x68
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e169      	b.n	8000e04 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d176      	bne.n	8000c30 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d152      	bne.n	8000bf0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fdbf 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d13b      	bne.n	8000bf0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 fda3 	bl	80016c4 <ADC_Disable>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12f      	bne.n	8000bf0 <HAL_ADC_Init+0xe0>
 8000b90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d12b      	bne.n	8000bf0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ba0:	f023 0302 	bic.w	r3, r3, #2
 8000ba4:	f043 0202 	orr.w	r2, r3, #2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bcc:	4b8f      	ldr	r3, [pc, #572]	; (8000e0c <HAL_ADC_Init+0x2fc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a8f      	ldr	r2, [pc, #572]	; (8000e10 <HAL_ADC_Init+0x300>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9a      	lsrs	r2, r3, #18
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000be2:	e002      	b.n	8000bea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f9      	bne.n	8000be4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c0c:	d110      	bne.n	8000c30 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f023 0312 	bic.w	r3, r3, #18
 8000c16:	f043 0210 	orr.w	r2, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f043 0201 	orr.w	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f040 80d6 	bne.w	8000dea <HAL_ADC_Init+0x2da>
 8000c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 80d1 	bne.w	8000dea <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 80c9 	bne.w	8000dea <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c60:	f043 0202 	orr.w	r2, r3, #2
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c68:	4b6a      	ldr	r3, [pc, #424]	; (8000e14 <HAL_ADC_Init+0x304>)
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d108      	bne.n	8000c90 <HAL_ADC_Init+0x180>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_Init+0x180>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <HAL_ADC_Init+0x182>
 8000c90:	2300      	movs	r3, #0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d11c      	bne.n	8000cd0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c96:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d010      	beq.n	8000cbe <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d107      	bne.n	8000cb8 <HAL_ADC_Init+0x1a8>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_Init+0x1a8>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_ADC_Init+0x1aa>
 8000cb8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d108      	bne.n	8000cd0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cce:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7e5b      	ldrb	r3, [r3, #25]
 8000cd4:	035b      	lsls	r3, r3, #13
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cda:	2a01      	cmp	r2, #1
 8000cdc:	d002      	beq.n	8000ce4 <HAL_ADC_Init+0x1d4>
 8000cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce2:	e000      	b.n	8000ce6 <HAL_ADC_Init+0x1d6>
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d11b      	bne.n	8000d3c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e5b      	ldrb	r3, [r3, #25]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	3b01      	subs	r3, #1
 8000d12:	045a      	lsls	r2, r3, #17
 8000d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d16:	4313      	orrs	r3, r2
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8000d1e:	e00d      	b.n	8000d3c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d28:	f043 0220 	orr.w	r2, r3, #32
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d007      	beq.n	8000d54 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d50:	4313      	orrs	r3, r2
 8000d52:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d114      	bne.n	8000d8c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d70:	f023 0302 	bic.w	r3, r3, #2
 8000d74:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7e1b      	ldrb	r3, [r3, #24]
 8000d7a:	039a      	lsls	r2, r3, #14
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4313      	orrs	r3, r2
 8000d86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HAL_ADC_Init+0x308>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10c      	bne.n	8000dc2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f023 010f 	bic.w	r1, r3, #15
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc0:	e007      	b.n	8000dd2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 020f 	bic.w	r2, r2, #15
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	f043 0201 	orr.w	r2, r3, #1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
 8000de8:	e00a      	b.n	8000e00 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f023 0312 	bic.w	r3, r3, #18
 8000df2:	f043 0210 	orr.w	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3768      	adds	r7, #104	; 0x68
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	431bde83 	.word	0x431bde83
 8000e14:	50000300 	.word	0x50000300
 8000e18:	fff0c007 	.word	0xfff0c007

08000e1c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d158      	bne.n	8000ee8 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d101      	bne.n	8000e44 <HAL_ADC_Start+0x28>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e054      	b.n	8000eee <HAL_ADC_Start+0xd2>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 fbd5 	bl	80015fc <ADC_Enable>
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d140      	bne.n	8000ede <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f023 0206 	bic.w	r2, r3, #6
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	645a      	str	r2, [r3, #68]	; 0x44
 8000eb4:	e002      	b.n	8000ebc <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	221c      	movs	r2, #28
 8000eca:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0204 	orr.w	r2, r2, #4
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	e006      	b.n	8000eec <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000ee6:	e001      	b.n	8000eec <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d102      	bne.n	8000f14 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e02e      	b.n	8000f72 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HAL_ADC_PollForConversion+0x178>)
 8000f16:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d112      	bne.n	8000f4a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d11d      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f043 0220 	orr.w	r2, r3, #32
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e08d      	b.n	8001066 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00b      	beq.n	8000f6e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f043 0220 	orr.w	r2, r3, #32
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e07b      	b.n	8001066 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f6e:	230c      	movs	r3, #12
 8000f70:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000f7a:	f7ff fd99 	bl	8000ab0 <HAL_GetTick>
 8000f7e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f80:	e021      	b.n	8000fc6 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d01d      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <HAL_ADC_PollForConversion+0xa8>
 8000f90:	f7ff fd8e 	bl	8000ab0 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d212      	bcs.n	8000fc6 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10b      	bne.n	8000fc6 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f043 0204 	orr.w	r2, r3, #4
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e04f      	b.n	8001066 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0d6      	beq.n	8000f82 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d131      	bne.n	8001052 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d12c      	bne.n	8001052 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b08      	cmp	r3, #8
 8001004:	d125      	bne.n	8001052 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d112      	bne.n	800103a <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d112      	bne.n	8001052 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
 8001038:	e00b      	b.n	8001052 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f043 0220 	orr.w	r2, r3, #32
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f043 0201 	orr.w	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	50000300 	.word	0x50000300

08001074 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001090:	b480      	push	{r7}
 8001092:	b09b      	sub	sp, #108	; 0x6c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_ConfigChannel+0x22>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e299      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x556>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f040 827d 	bne.w	80015c4 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d81c      	bhi.n	800110c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	461a      	mov	r2, r3
 80010e6:	231f      	movs	r3, #31
 80010e8:	4093      	lsls	r3, r2
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4019      	ands	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
 800110a:	e063      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b09      	cmp	r3, #9
 8001112:	d81e      	bhi.n	8001152 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	3b1e      	subs	r3, #30
 8001128:	221f      	movs	r2, #31
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	4019      	ands	r1, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	3b1e      	subs	r3, #30
 8001144:	fa00 f203 	lsl.w	r2, r0, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
 8001150:	e040      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b0e      	cmp	r3, #14
 8001158:	d81e      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	3b3c      	subs	r3, #60	; 0x3c
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	3b3c      	subs	r3, #60	; 0x3c
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
 8001196:	e01d      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	3b5a      	subs	r3, #90	; 0x5a
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4019      	ands	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	3b5a      	subs	r3, #90	; 0x5a
 80011c8:	fa00 f203 	lsl.w	r2, r0, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80e5 	bne.w	80013ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	d91c      	bls.n	8001226 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6999      	ldr	r1, [r3, #24]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	3b1e      	subs	r3, #30
 80011fe:	2207      	movs	r2, #7
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	4019      	ands	r1, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	6898      	ldr	r0, [r3, #8]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	3b1e      	subs	r3, #30
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	619a      	str	r2, [r3, #24]
 8001224:	e019      	b.n	800125a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6959      	ldr	r1, [r3, #20]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	2207      	movs	r2, #7
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	4019      	ands	r1, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6898      	ldr	r0, [r3, #8]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	3b01      	subs	r3, #1
 8001278:	2b03      	cmp	r3, #3
 800127a:	d84f      	bhi.n	800131c <HAL_ADC_ConfigChannel+0x28c>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <HAL_ADC_ConfigChannel+0x1f4>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001295 	.word	0x08001295
 8001288:	080012b7 	.word	0x080012b7
 800128c:	080012d9 	.word	0x080012d9
 8001290:	080012fb 	.word	0x080012fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800129a:	4b99      	ldr	r3, [pc, #612]	; (8001500 <HAL_ADC_ConfigChannel+0x470>)
 800129c:	4013      	ands	r3, r2
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	0691      	lsls	r1, r2, #26
 80012a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012a6:	430a      	orrs	r2, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012b4:	e07e      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012bc:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_ADC_ConfigChannel+0x470>)
 80012be:	4013      	ands	r3, r2
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	0691      	lsls	r1, r2, #26
 80012c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c8:	430a      	orrs	r2, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012d6:	e06d      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012de:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_ADC_ConfigChannel+0x470>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	0691      	lsls	r1, r2, #26
 80012e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ea:	430a      	orrs	r2, r1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012f8:	e05c      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001300:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <HAL_ADC_ConfigChannel+0x470>)
 8001302:	4013      	ands	r3, r2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	0691      	lsls	r1, r2, #26
 800130a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800130c:	430a      	orrs	r2, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001318:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800131a:	e04b      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	069b      	lsls	r3, r3, #26
 800132c:	429a      	cmp	r2, r3
 800132e:	d107      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800133e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	069b      	lsls	r3, r3, #26
 8001350:	429a      	cmp	r2, r3
 8001352:	d107      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001362:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800136a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	069b      	lsls	r3, r3, #26
 8001374:	429a      	cmp	r2, r3
 8001376:	d107      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001386:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800138e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	069b      	lsls	r3, r3, #26
 8001398:	429a      	cmp	r2, r3
 800139a:	d10a      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80013ac:	e001      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80013b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x344>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x344>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x346>
 80013d4:	2300      	movs	r3, #0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80ff 	bne.w	80015da <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d00f      	beq.n	8001404 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001402:	e049      	b.n	8001498 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b09      	cmp	r3, #9
 8001424:	d91c      	bls.n	8001460 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6999      	ldr	r1, [r3, #24]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	3b1b      	subs	r3, #27
 8001438:	2207      	movs	r2, #7
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	4019      	ands	r1, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6898      	ldr	r0, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	3b1b      	subs	r3, #27
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	e01b      	b.n	8001498 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6959      	ldr	r1, [r3, #20]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_ADC_ConfigChannel+0x474>)
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d105      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d014      	beq.n	80014da <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014c8:	2b12      	cmp	r3, #18
 80014ca:	f040 8086 	bne.w	80015da <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d17f      	bne.n	80015da <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10d      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x478>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x478>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e005      	b.n	800150a <HAL_ADC_ConfigChannel+0x47a>
 80014fe:	bf00      	nop
 8001500:	83fff000 	.word	0x83fff000
 8001504:	50000300 	.word	0x50000300
 8001508:	2300      	movs	r3, #0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d150      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800150e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d010      	beq.n	8001536 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x4a0>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x4a0>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_ADC_ConfigChannel+0x4a2>
 8001530:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001532:	2b00      	cmp	r3, #0
 8001534:	d13c      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b10      	cmp	r3, #16
 800153c:	d11d      	bne.n	800157a <HAL_ADC_ConfigChannel+0x4ea>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001546:	d118      	bne.n	800157a <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001552:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_ADC_ConfigChannel+0x564>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_ADC_ConfigChannel+0x568>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9a      	lsrs	r2, r3, #18
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800156a:	e002      	b.n	8001572 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	3b01      	subs	r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001578:	e02e      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b11      	cmp	r3, #17
 8001580:	d10b      	bne.n	800159a <HAL_ADC_ConfigChannel+0x50a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158a:	d106      	bne.n	800159a <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800158c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001596:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001598:	e01e      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d11a      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015ae:	e013      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015c2:	e00a      	b.n	80015da <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015d6:	e000      	b.n	80015da <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015d8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	376c      	adds	r7, #108	; 0x6c
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83

080015fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <ADC_Enable+0x2c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <ADC_Enable+0x2c>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <ADC_Enable+0x2e>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d143      	bne.n	80016b6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <ADC_Enable+0xc4>)
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00d      	beq.n	8001658 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f043 0210 	orr.w	r2, r3, #16
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f043 0201 	orr.w	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e02f      	b.n	80016b8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001668:	f7ff fa22 	bl	8000ab0 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800166e:	e01b      	b.n	80016a8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001670:	f7ff fa1e 	bl	8000ab0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d914      	bls.n	80016a8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d00d      	beq.n	80016a8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f043 0210 	orr.w	r2, r3, #16
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e007      	b.n	80016b8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d1dc      	bne.n	8001670 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	8000003f 	.word	0x8000003f

080016c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <ADC_Disable+0x2c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <ADC_Disable+0x2c>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <ADC_Disable+0x2e>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d047      	beq.n	8001786 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030d 	and.w	r3, r3, #13
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10f      	bne.n	8001724 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0202 	orr.w	r2, r2, #2
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2203      	movs	r2, #3
 800171a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800171c:	f7ff f9c8 	bl	8000ab0 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001722:	e029      	b.n	8001778 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e023      	b.n	8001788 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001740:	f7ff f9b6 	bl	8000ab0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d914      	bls.n	8001778 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10d      	bne.n	8001778 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f043 0210 	orr.w	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e007      	b.n	8001788 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d0dc      	beq.n	8001740 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e014      	b.n	80019ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	791b      	ldrb	r3, [r3, #4]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7fe feef 	bl	80007b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80019f6:	b480      	push	{r7}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d104      	bne.n	8001a1e <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	461a      	mov	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	795b      	ldrb	r3, [r3, #5]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_DAC_Start+0x16>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e025      	b.n	8001a96 <HAL_DAC_Start+0x62>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	409a      	lsls	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001a74:	2b3c      	cmp	r3, #60	; 0x3c
 8001a76:	d107      	bne.n	8001a88 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b087      	sub	sp, #28
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_DAC_ConfigChannel+0x20>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e036      	b.n	8001b30 <HAL_DAC_ConfigChannel+0x8e>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2202      	movs	r2, #2
 8001acc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001ad6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	22c0      	movs	r2, #192	; 0xc0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e037      	b.n	8001bc2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8b3 	bl	8001d10 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}  
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2204      	movs	r2, #4
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x72>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01f      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0204 	bic.w	r2, r2, #4
 8001c18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	2104      	movs	r1, #4
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c3a:	e065      	b.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2202      	movs	r2, #2
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d02c      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0xdc>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d027      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10b      	bne.n	8001c7c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 020a 	bic.w	r2, r2, #10
 8001c72:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	2102      	movs	r1, #2
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d035      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001ca4:	e030      	b.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2208      	movs	r2, #8
 8001cac:	409a      	lsls	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d028      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 020e 	bic.w	r2, r2, #14
 8001cce:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
    }
  }
}  
 8001d06:	e7ff      	b.n	8001d08 <HAL_DMA_IRQHandler+0x13e>
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <DMA_CalcBaseAndBitshift+0x34>)
 8001d20:	4413      	add	r3, r2
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <DMA_CalcBaseAndBitshift+0x38>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <DMA_CalcBaseAndBitshift+0x3c>)
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	bffdfff8 	.word	0xbffdfff8
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40020000 	.word	0x40020000

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	e14e      	b.n	8001ffe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8140 	beq.w	8001ff8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x40>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 0201 	and.w	r2, r3, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0203 	and.w	r2, r3, #3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 809a 	beq.w	8001ff8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b55      	ldr	r3, [pc, #340]	; (800201c <HAL_GPIO_Init+0x2cc>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_GPIO_Init+0x2cc>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b52      	ldr	r3, [pc, #328]	; (800201c <HAL_GPIO_Init+0x2cc>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001edc:	4a50      	ldr	r2, [pc, #320]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1e0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a46      	ldr	r2, [pc, #280]	; (8002024 <HAL_GPIO_Init+0x2d4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1dc>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a45      	ldr	r2, [pc, #276]	; (8002028 <HAL_GPIO_Init+0x2d8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1d8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a44      	ldr	r2, [pc, #272]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1d4>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1e2>
 8001f24:	2305      	movs	r3, #5
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1e2>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1e2>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1e2>
 8001f30:	2300      	movs	r3, #0
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f42:	4937      	ldr	r1, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f74:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f9e:	4a24      	ldr	r2, [pc, #144]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_GPIO_Init+0x2e0>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	f47f aea9 	bne.w	8001d60 <HAL_GPIO_Init+0x10>
  }
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	48000400 	.word	0x48000400
 8002028:	48000800 	.word	0x48000800
 800202c:	48000c00 	.word	0x48000c00
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002080:	e002      	b.n	8002088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800209a:	af00      	add	r7, sp, #0
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f001 b823 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 817d 	beq.w	80023ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020d0:	4bbc      	ldr	r3, [pc, #752]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4bb9      	ldr	r3, [pc, #740]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d15c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x10e>
 80020e8:	4bb6      	ldr	r3, [pc, #728]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d155      	bne.n	80021a2 <HAL_RCC_OscConfig+0x10e>
 80020f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800210a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x94>
 8002122:	4ba8      	ldr	r3, [pc, #672]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0xc0>
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800213c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002140:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002144:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002150:	4b9c      	ldr	r3, [pc, #624]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002158:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800215c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002160:	fa92 f2a2 	rbit	r2, r2
 8002164:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002168:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f002 021f 	and.w	r2, r2, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 811f 	beq.w	80023c8 <HAL_RCC_OscConfig+0x334>
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 8116 	bne.w	80023c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f000 bfaf 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x12e>
 80021b4:	4b83      	ldr	r3, [pc, #524]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a82      	ldr	r2, [pc, #520]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e036      	b.n	8002230 <HAL_RCC_OscConfig+0x19c>
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x158>
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7b      	ldr	r2, [pc, #492]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a78      	ldr	r2, [pc, #480]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e021      	b.n	8002230 <HAL_RCC_OscConfig+0x19c>
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x184>
 80021fe:	4b71      	ldr	r3, [pc, #452]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a70      	ldr	r2, [pc, #448]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6e      	ldr	r3, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6d      	ldr	r2, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x19c>
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a66      	ldr	r2, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f023 020f 	bic.w	r2, r3, #15
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	495f      	ldr	r1, [pc, #380]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 8002246:	4313      	orrs	r3, r2
 8002248:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d059      	beq.n	800230e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fc29 	bl	8000ab0 <HAL_GetTick>
 800225e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	e00a      	b.n	800227a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe fc24 	bl	8000ab0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d902      	bls.n	800227a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	f000 bf43 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
 800227a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800228e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0x218>
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e015      	b.n	80022d8 <HAL_RCC_OscConfig+0x244>
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022e4:	fa92 f2a2 	rbit	r2, r2
 80022e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f042 0220 	orr.w	r2, r2, #32
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f002 021f 	and.w	r2, r2, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f202 	lsl.w	r2, r1, r2
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ab      	beq.n	8002264 <HAL_RCC_OscConfig+0x1d0>
 800230c:	e05d      	b.n	80023ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe fbcf 	bl	8000ab0 <HAL_GetTick>
 8002312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fbca 	bl	8000ab0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d902      	bls.n	800232e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	f000 bee9 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
 800232e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002332:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002342:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_RCC_OscConfig+0x2cc>
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	e015      	b.n	800238c <HAL_RCC_OscConfig+0x2f8>
 8002360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002364:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002378:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800237c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_RCC_OscConfig+0x330>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002390:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002394:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023a4:	fab2 f282 	clz	r2, r2
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f042 0220 	orr.w	r2, r2, #32
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f002 021f 	and.w	r2, r2, #31
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ab      	bne.n	8002318 <HAL_RCC_OscConfig+0x284>
 80023c0:	e003      	b.n	80023ca <HAL_RCC_OscConfig+0x336>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 817d 	beq.w	80026da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023e0:	4ba6      	ldr	r3, [pc, #664]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ec:	4ba3      	ldr	r3, [pc, #652]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d172      	bne.n	80024de <HAL_RCC_OscConfig+0x44a>
 80023f8:	4ba0      	ldr	r3, [pc, #640]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d16c      	bne.n	80024de <HAL_RCC_OscConfig+0x44a>
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002416:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_RCC_OscConfig+0x3a0>
 800242e:	4b93      	ldr	r3, [pc, #588]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e013      	b.n	800245c <HAL_RCC_OscConfig+0x3c8>
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800244c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002458:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2202      	movs	r2, #2
 800245e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002462:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002466:	fa92 f2a2 	rbit	r2, r2
 800246a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800246e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f042 0220 	orr.w	r2, r2, #32
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f002 021f 	and.w	r2, r2, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCC_OscConfig+0x410>
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 be2e 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	21f8      	movs	r1, #248	; 0xf8
 80024ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024c2:	fa91 f1a1 	rbit	r1, r1
 80024c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024ce:	fab1 f181 	clz	r1, r1
 80024d2:	b2c9      	uxtb	r1, r1
 80024d4:	408b      	lsls	r3, r1
 80024d6:	4969      	ldr	r1, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024dc:	e0fd      	b.n	80026da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8088 	beq.w	8002600 <HAL_RCC_OscConfig+0x56c>
 80024f0:	2301      	movs	r3, #1
 80024f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002502:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	2301      	movs	r3, #1
 800251a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fac8 	bl	8000ab0 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe fac3 	bl	8000ab0 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	f000 bde2 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800254e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0x4d8>
 8002566:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0x500>
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002584:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2202      	movs	r2, #2
 8002596:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800259a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800259e:	fa92 f2a2 	rbit	r2, r2
 80025a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025aa:	fab2 f282 	clz	r2, r2
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f042 0220 	orr.w	r2, r2, #32
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f002 021f 	and.w	r2, r2, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0af      	beq.n	8002526 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	21f8      	movs	r1, #248	; 0xf8
 80025dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025e4:	fa91 f1a1 	rbit	r1, r1
 80025e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025f0:	fab1 f181 	clz	r1, r1
 80025f4:	b2c9      	uxtb	r1, r1
 80025f6:	408b      	lsls	r3, r1
 80025f8:	4920      	ldr	r1, [pc, #128]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
 80025fe:	e06c      	b.n	80026da <HAL_RCC_OscConfig+0x646>
 8002600:	2301      	movs	r3, #1
 8002602:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002612:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	461a      	mov	r2, r3
 8002628:	2300      	movs	r3, #0
 800262a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe fa40 	bl	8000ab0 <HAL_GetTick>
 8002630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe fa3b 	bl	8000ab0 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	f000 bd5a 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800265e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d104      	bne.n	8002680 <HAL_RCC_OscConfig+0x5ec>
 8002676:	4b01      	ldr	r3, [pc, #4]	; (800267c <HAL_RCC_OscConfig+0x5e8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e015      	b.n	80026a8 <HAL_RCC_OscConfig+0x614>
 800267c:	40021000 	.word	0x40021000
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026a4:	4bc8      	ldr	r3, [pc, #800]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2202      	movs	r2, #2
 80026aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ad      	bne.n	8002636 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8110 	beq.w	8002910 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d079      	beq.n	80027f4 <HAL_RCC_OscConfig+0x760>
 8002700:	2301      	movs	r3, #1
 8002702:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	4bab      	ldr	r3, [pc, #684]	; (80029cc <HAL_RCC_OscConfig+0x938>)
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	461a      	mov	r2, r3
 8002726:	2301      	movs	r3, #1
 8002728:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe f9c1 	bl	8000ab0 <HAL_GetTick>
 800272e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe f9bc 	bl	8000ab0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d902      	bls.n	800274a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	f000 bcdb 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
 800274a:	2302      	movs	r3, #2
 800274c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a4:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 80027a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027b0:	2102      	movs	r1, #2
 80027b2:	6019      	str	r1, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f1a3 	rbit	r1, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027ca:	6019      	str	r1, [r3, #0]
  return result;
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0a0      	beq.n	8002734 <HAL_RCC_OscConfig+0x6a0>
 80027f2:	e08d      	b.n	8002910 <HAL_RCC_OscConfig+0x87c>
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002816:	601a      	str	r2, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002820:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_OscConfig+0x938>)
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	461a      	mov	r2, r3
 8002832:	2300      	movs	r3, #0
 8002834:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe f93b 	bl	8000ab0 <HAL_GetTick>
 800283a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe f936 	bl	8000ab0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d902      	bls.n	8002856 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	f000 bc55 	b.w	8003100 <HAL_RCC_OscConfig+0x106c>
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800285e:	2202      	movs	r2, #2
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002882:	2202      	movs	r2, #2
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	fa93 f2a3 	rbit	r2, r3
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028a6:	2202      	movs	r2, #2
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 80028c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028ce:	2102      	movs	r1, #2
 80028d0:	6019      	str	r1, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f1a3 	rbit	r1, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028e8:	6019      	str	r1, [r3, #0]
  return result;
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d197      	bne.n	8002840 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 81a1 	beq.w	8002c68 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002942:	61d3      	str	r3, [r2, #28]
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800295e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x93c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11a      	bne.n	80029a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_RCC_OscConfig+0x93c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_RCC_OscConfig+0x93c>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7fe f897 	bl	8000ab0 <HAL_GetTick>
 8002982:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	e009      	b.n	800299c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7fe f892 	bl	8000ab0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e3b1      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RCC_OscConfig+0x93c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ef      	beq.n	8002988 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_OscConfig+0x940>
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a02      	ldr	r2, [pc, #8]	; (80029c8 <HAL_RCC_OscConfig+0x934>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	e03c      	b.n	8002a40 <HAL_RCC_OscConfig+0x9ac>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	10908120 	.word	0x10908120
 80029d0:	40007000 	.word	0x40007000
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10c      	bne.n	80029fe <HAL_RCC_OscConfig+0x96a>
 80029e4:	4bc1      	ldr	r3, [pc, #772]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4ac0      	ldr	r2, [pc, #768]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	4bbe      	ldr	r3, [pc, #760]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4abd      	ldr	r2, [pc, #756]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 80029f6:	f023 0304 	bic.w	r3, r3, #4
 80029fa:	6213      	str	r3, [r2, #32]
 80029fc:	e020      	b.n	8002a40 <HAL_RCC_OscConfig+0x9ac>
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x994>
 8002a0e:	4bb7      	ldr	r3, [pc, #732]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4ab6      	ldr	r2, [pc, #728]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	4bb4      	ldr	r3, [pc, #720]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4ab3      	ldr	r2, [pc, #716]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6213      	str	r3, [r2, #32]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0x9ac>
 8002a28:	4bb0      	ldr	r3, [pc, #704]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4aaf      	ldr	r2, [pc, #700]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	4bad      	ldr	r3, [pc, #692]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4aac      	ldr	r2, [pc, #688]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8081 	beq.w	8002b54 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe f82d 	bl	8000ab0 <HAL_GetTick>
 8002a56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe f828 	bl	8000ab0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e345      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aba:	601a      	str	r2, [r3, #0]
  return result;
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ac4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xa4c>
 8002ada:	4b84      	ldr	r3, [pc, #528]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	e013      	b.n	8002b08 <HAL_RCC_OscConfig+0xa74>
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ae8:	2202      	movs	r2, #2
 8002aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	fa93 f2a3 	rbit	r2, r3
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b79      	ldr	r3, [pc, #484]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b10:	2102      	movs	r1, #2
 8002b12:	6011      	str	r1, [r2, #0]
 8002b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	fa92 f1a2 	rbit	r1, r2
 8002b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b26:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b2a:	6011      	str	r1, [r2, #0]
  return result;
 8002b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b30:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	fab2 f282 	clz	r2, r2
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f002 021f 	and.w	r2, r2, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d084      	beq.n	8002a5c <HAL_RCC_OscConfig+0x9c8>
 8002b52:	e07f      	b.n	8002c54 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fd ffac 	bl	8000ab0 <HAL_GetTick>
 8002b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fd ffa7 	bl	8000ab0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e2c4      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b7e:	2202      	movs	r2, #2
 8002b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bbc:	601a      	str	r2, [r3, #0]
  return result;
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d102      	bne.n	8002be2 <HAL_RCC_OscConfig+0xb4e>
 8002bdc:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	e013      	b.n	8002c0a <HAL_RCC_OscConfig+0xb76>
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bea:	2202      	movs	r2, #2
 8002bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fa93 f2a3 	rbit	r2, r3
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c12:	2102      	movs	r1, #2
 8002c14:	6011      	str	r1, [r2, #0]
 8002c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	fa92 f1a2 	rbit	r1, r2
 8002c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c2c:	6011      	str	r1, [r2, #0]
  return result;
 8002c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c32:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f002 021f 	and.w	r2, r2, #31
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d184      	bne.n	8002b5e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c54:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8242 	beq.w	80030fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_RCC_OscConfig+0xc58>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	f000 8213 	beq.w	80030ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f040 8162 	bne.w	8002f5e <HAL_RCC_OscConfig+0xeca>
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ca2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cbe:	601a      	str	r2, [r3, #0]
  return result;
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cc8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fee6 	bl	8000ab0 <HAL_GetTick>
 8002ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce8:	e00c      	b.n	8002d04 <HAL_RCC_OscConfig+0xc70>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fd fede 	bl	8000ab0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1fd      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d28:	601a      	str	r2, [r3, #0]
  return result;
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0xcba>
 8002d48:	4bb0      	ldr	r3, [pc, #704]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	e027      	b.n	8002d9e <HAL_RCC_OscConfig+0xd0a>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4b9c      	ldr	r3, [pc, #624]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002da6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002daa:	6011      	str	r1, [r2, #0]
 8002dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	fa92 f1a2 	rbit	r1, r2
 8002dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dbe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dc2:	6011      	str	r1, [r2, #0]
  return result;
 8002dc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d182      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dea:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	497f      	ldr	r1, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e36:	601a      	str	r2, [r3, #0]
  return result;
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	461a      	mov	r2, r3
 8002e54:	2301      	movs	r3, #1
 8002e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fd fe2a 	bl	8000ab0 <HAL_GetTick>
 8002e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e60:	e009      	b.n	8002e76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fd fe25 	bl	8000ab0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e144      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e9a:	601a      	str	r2, [r3, #0]
  return result;
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ea4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d102      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xe2c>
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e027      	b.n	8002f10 <HAL_RCC_OscConfig+0xe7c>
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f1c:	6011      	str	r1, [r2, #0]
 8002f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	fa92 f1a2 	rbit	r1, r2
 8002f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f34:	6011      	str	r1, [r2, #0]
  return result;
 8002f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f042 0220 	orr.w	r2, r2, #32
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f002 021f 	and.w	r2, r2, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d082      	beq.n	8002e62 <HAL_RCC_OscConfig+0xdce>
 8002f5c:	e0cf      	b.n	80030fe <HAL_RCC_OscConfig+0x106a>
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fd84 	bl	8000ab0 <HAL_GetTick>
 8002fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fd fd7f 	bl	8000ab0 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e09e      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ff0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d104      	bne.n	8003010 <HAL_RCC_OscConfig+0xf7c>
 8003006:	4b01      	ldr	r3, [pc, #4]	; (800300c <HAL_RCC_OscConfig+0xf78>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e029      	b.n	8003060 <HAL_RCC_OscConfig+0xfcc>
 800300c:	40021000 	.word	0x40021000
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800303e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_RCC_OscConfig+0x1078>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003064:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003068:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800306c:	6011      	str	r1, [r2, #0]
 800306e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003072:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	fa92 f1a2 	rbit	r1, r2
 800307c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003080:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003084:	6011      	str	r1, [r2, #0]
  return result;
 8003086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fab2 f282 	clz	r2, r2
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f042 0220 	orr.w	r2, r2, #32
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f002 021f 	and.w	r2, r2, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f202 	lsl.w	r2, r1, r2
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d180      	bne.n	8002fae <HAL_RCC_OscConfig+0xf1a>
 80030ac:	e027      	b.n	80030fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01e      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_OscConfig+0x1078>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10b      	bne.n	80030fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000

08003110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b09e      	sub	sp, #120	; 0x78
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e162      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b90      	ldr	r3, [pc, #576]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d910      	bls.n	8003158 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b8d      	ldr	r3, [pc, #564]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 0207 	bic.w	r2, r3, #7
 800313e:	498b      	ldr	r1, [pc, #556]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b89      	ldr	r3, [pc, #548]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e14a      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b82      	ldr	r3, [pc, #520]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	497f      	ldr	r1, [pc, #508]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80dc 	beq.w	800333c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d13c      	bne.n	8003206 <HAL_RCC_ClockConfig+0xf6>
 800318c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003190:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xa6>
 80031b0:	4b6f      	ldr	r3, [pc, #444]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	e00f      	b.n	80031d6 <HAL_RCC_ClockConfig+0xc6>
 80031b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	667b      	str	r3, [r7, #100]	; 0x64
 80031c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031da:	65ba      	str	r2, [r7, #88]	; 0x58
 80031dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031de:	fa92 f2a2 	rbit	r2, r2
 80031e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031e6:	fab2 f282 	clz	r2, r2
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f042 0220 	orr.w	r2, r2, #32
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	f002 021f 	and.w	r2, r2, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d17b      	bne.n	80032fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0f3      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d13c      	bne.n	8003288 <HAL_RCC_ClockConfig+0x178>
 800320e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003212:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800321c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_RCC_ClockConfig+0x128>
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	e00f      	b.n	8003258 <HAL_RCC_ClockConfig+0x148>
 8003238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	647b      	str	r3, [r7, #68]	; 0x44
 8003246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325c:	63ba      	str	r2, [r7, #56]	; 0x38
 800325e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003260:	fa92 f2a2 	rbit	r2, r2
 8003264:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f002 021f 	and.w	r2, r2, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d13a      	bne.n	80032fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b2      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
 8003288:	2302      	movs	r3, #2
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x1a0>
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e00d      	b.n	80032cc <HAL_RCC_ClockConfig+0x1bc>
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2202      	movs	r2, #2
 80032ce:	61ba      	str	r2, [r7, #24]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	fa92 f2a2 	rbit	r2, r2
 80032d6:	617a      	str	r2, [r7, #20]
  return result;
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f002 021f 	and.w	r2, r2, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e079      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	491a      	ldr	r1, [pc, #104]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fd fbd0 	bl	8000ab0 <HAL_GetTick>
 8003310:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fd fbcc 	bl	8000ab0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e061      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d214      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <HAL_RCC_ClockConfig+0x25c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e040      	b.n	80033ee <HAL_RCC_ClockConfig+0x2de>
 800336c:	40022000 	.word	0x40022000
 8003370:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	491a      	ldr	r1, [pc, #104]	; (80033f8 <HAL_RCC_ClockConfig+0x2e8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_RCC_ClockConfig+0x2e8>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4912      	ldr	r1, [pc, #72]	; (80033f8 <HAL_RCC_ClockConfig+0x2e8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033b2:	f000 f829 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033b6:	4601      	mov	r1, r0
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_RCC_ClockConfig+0x2e8>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c0:	22f0      	movs	r2, #240	; 0xf0
 80033c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	fa92 f2a2 	rbit	r2, r2
 80033ca:	60fa      	str	r2, [r7, #12]
  return result;
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	40d3      	lsrs	r3, r2
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x2ec>)
 80033d8:	5cd3      	ldrb	r3, [r2, r3]
 80033da:	fa21 f303 	lsr.w	r3, r1, r3
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <HAL_RCC_ClockConfig+0x2f0>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_RCC_ClockConfig+0x2f4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fb1e 	bl	8000a28 <HAL_InitTick>
  
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3778      	adds	r7, #120	; 0x78
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08004044 	.word	0x08004044
 8003400:	20000000 	.word	0x20000000
 8003404:	20000004 	.word	0x20000004

08003408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b08b      	sub	sp, #44	; 0x2c
 800340c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b04      	cmp	r3, #4
 8003430:	d002      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x30>
 8003432:	2b08      	cmp	r3, #8
 8003434:	d003      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0x36>
 8003436:	e03c      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800343a:	623b      	str	r3, [r7, #32]
      break;
 800343c:	e03c      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003444:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003448:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	fa92 f2a2 	rbit	r2, r2
 8003450:	607a      	str	r2, [r7, #4]
  return result;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	fab2 f282 	clz	r2, r2
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	40d3      	lsrs	r3, r2
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003462:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	220f      	movs	r2, #15
 800346c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	fa92 f2a2 	rbit	r2, r2
 8003474:	60fa      	str	r2, [r7, #12]
  return result;
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	fab2 f282 	clz	r2, r2
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	40d3      	lsrs	r3, r2
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003490:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	fbb2 f2f3 	udiv	r2, r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	e004      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	623b      	str	r3, [r7, #32]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80034b4:	623b      	str	r3, [r7, #32]
      break;
 80034b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b8:	6a3b      	ldr	r3, [r7, #32]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	372c      	adds	r7, #44	; 0x2c
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	007a1200 	.word	0x007a1200
 80034d0:	0800405c 	.word	0x0800405c
 80034d4:	0800406c 	.word	0x0800406c
 80034d8:	003d0900 	.word	0x003d0900

080034dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034fa:	f7ff ffef 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fe:	4601      	mov	r1, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003508:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800350c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	fa92 f2a2 	rbit	r2, r2
 8003514:	603a      	str	r2, [r7, #0]
  return result;
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	fab2 f282 	clz	r2, r2
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	40d3      	lsrs	r3, r2
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	08004054 	.word	0x08004054

08003538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800353e:	f7ff ffcd 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003542:	4601      	mov	r1, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800354c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	603a      	str	r2, [r7, #0]
  return result;
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	40d3      	lsrs	r3, r2
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	08004054 	.word	0x08004054

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b092      	sub	sp, #72	; 0x48
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80d4 	beq.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a0:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10e      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
 80035b8:	4b48      	ldr	r3, [pc, #288]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ca:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d118      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d6:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a41      	ldr	r2, [pc, #260]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e2:	f7fd fa65 	bl	8000ab0 <HAL_GetTick>
 80035e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	e008      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ea:	f7fd fa61 	bl	8000ab0 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	d901      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e14b      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8084 	beq.w	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003624:	429a      	cmp	r2, r3
 8003626:	d07c      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	461a      	mov	r2, r3
 8003652:	2301      	movs	r3, #1
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	461a      	mov	r2, r3
 8003676:	2300      	movs	r3, #0
 8003678:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04b      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fd fa11 	bl	8000ab0 <HAL_GetTick>
 800368e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fd fa0d 	bl	8000ab0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0f5      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80036a8:	2302      	movs	r3, #2
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	2302      	movs	r3, #2
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	61fb      	str	r3, [r7, #28]
  return result;
 80036c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d108      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036d6:	4b01      	ldr	r3, [pc, #4]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	e00d      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
 80036e4:	10908100 	.word	0x10908100
 80036e8:	2302      	movs	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	4b69      	ldr	r3, [pc, #420]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2202      	movs	r2, #2
 80036fa:	613a      	str	r2, [r7, #16]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	fa92 f2a2 	rbit	r2, r2
 8003702:	60fa      	str	r2, [r7, #12]
  return result;
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	fab2 f282 	clz	r2, r2
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	f002 021f 	and.w	r2, r2, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0b7      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003722:	4b5e      	ldr	r3, [pc, #376]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	495b      	ldr	r1, [pc, #364]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003730:	4313      	orrs	r3, r2
 8003732:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003734:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373c:	4b57      	ldr	r3, [pc, #348]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a56      	ldr	r2, [pc, #344]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003754:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f023 0203 	bic.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	494e      	ldr	r1, [pc, #312]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003762:	4313      	orrs	r3, r2
 8003764:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003772:	4b4a      	ldr	r3, [pc, #296]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f023 0210 	bic.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4947      	ldr	r1, [pc, #284]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003780:	4313      	orrs	r3, r2
 8003782:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003790:	4b42      	ldr	r3, [pc, #264]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	493f      	ldr	r1, [pc, #252]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f023 0220 	bic.w	r2, r3, #32
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	4938      	ldr	r1, [pc, #224]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037cc:	4b33      	ldr	r3, [pc, #204]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	4930      	ldr	r1, [pc, #192]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ea:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4929      	ldr	r1, [pc, #164]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	4921      	ldr	r1, [pc, #132]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003816:	4313      	orrs	r3, r2
 8003818:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	491a      	ldr	r1, [pc, #104]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003834:	4313      	orrs	r3, r2
 8003836:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003844:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	4912      	ldr	r1, [pc, #72]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003852:	4313      	orrs	r3, r2
 8003854:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	490b      	ldr	r1, [pc, #44]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003870:	4313      	orrs	r3, r2
 8003872:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	4903      	ldr	r1, [pc, #12]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800388e:	4313      	orrs	r3, r2
 8003890:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3748      	adds	r7, #72	; 0x48
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e040      	b.n	8003934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fc ffb6 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f82c 	bl	800393c <UART_SetConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f956 	bl	8003ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f9dd 	bl	8003cec <UART_CheckIdleState>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b8a      	ldr	r3, [pc, #552]	; (8003b90 <UART_SetConfig+0x254>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	6979      	ldr	r1, [r7, #20]
 8003970:	430b      	orrs	r3, r1
 8003972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a78      	ldr	r2, [pc, #480]	; (8003b94 <UART_SetConfig+0x258>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d120      	bne.n	80039fa <UART_SetConfig+0xbe>
 80039b8:	4b77      	ldr	r3, [pc, #476]	; (8003b98 <UART_SetConfig+0x25c>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d817      	bhi.n	80039f4 <UART_SetConfig+0xb8>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <UART_SetConfig+0x90>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039e9 	.word	0x080039e9
 80039d4:	080039ef 	.word	0x080039ef
 80039d8:	080039e3 	.word	0x080039e3
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e01d      	b.n	8003a1e <UART_SetConfig+0xe2>
 80039e2:	2302      	movs	r3, #2
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e01a      	b.n	8003a1e <UART_SetConfig+0xe2>
 80039e8:	2304      	movs	r3, #4
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e017      	b.n	8003a1e <UART_SetConfig+0xe2>
 80039ee:	2308      	movs	r3, #8
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e014      	b.n	8003a1e <UART_SetConfig+0xe2>
 80039f4:	2310      	movs	r3, #16
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e011      	b.n	8003a1e <UART_SetConfig+0xe2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <UART_SetConfig+0x260>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d102      	bne.n	8003a0a <UART_SetConfig+0xce>
 8003a04:	2300      	movs	r3, #0
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e009      	b.n	8003a1e <UART_SetConfig+0xe2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a64      	ldr	r2, [pc, #400]	; (8003ba0 <UART_SetConfig+0x264>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d102      	bne.n	8003a1a <UART_SetConfig+0xde>
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e001      	b.n	8003a1e <UART_SetConfig+0xe2>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d15a      	bne.n	8003ade <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003a28:	7ffb      	ldrb	r3, [r7, #31]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d827      	bhi.n	8003a7e <UART_SetConfig+0x142>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <UART_SetConfig+0xf8>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7ff fd4c 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	61b8      	str	r0, [r7, #24]
        break;
 8003a5e:	e013      	b.n	8003a88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7ff fd6a 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 8003a64:	61b8      	str	r0, [r7, #24]
        break;
 8003a66:	e00f      	b.n	8003a88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a68:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <UART_SetConfig+0x268>)
 8003a6a:	61bb      	str	r3, [r7, #24]
        break;
 8003a6c:	e00c      	b.n	8003a88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6e:	f7ff fccb 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 8003a72:	61b8      	str	r0, [r7, #24]
        break;
 8003a74:	e008      	b.n	8003a88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	61bb      	str	r3, [r7, #24]
        break;
 8003a7c:	e004      	b.n	8003a88 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	77bb      	strb	r3, [r7, #30]
        break;
 8003a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d074      	beq.n	8003b78 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	005a      	lsls	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0f      	cmp	r3, #15
 8003aa8:	d916      	bls.n	8003ad8 <UART_SetConfig+0x19c>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d212      	bcs.n	8003ad8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f023 030f 	bic.w	r3, r3, #15
 8003aba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	89fb      	ldrh	r3, [r7, #14]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	89fa      	ldrh	r2, [r7, #14]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e04f      	b.n	8003b78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77bb      	strb	r3, [r7, #30]
 8003adc:	e04c      	b.n	8003b78 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ade:	7ffb      	ldrb	r3, [r7, #31]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d828      	bhi.n	8003b36 <UART_SetConfig+0x1fa>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x1b0>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
 8003b0c:	08003b2f 	.word	0x08003b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7ff fcf0 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e013      	b.n	8003b40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7ff fd0e 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	61b8      	str	r0, [r7, #24]
        break;
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <UART_SetConfig+0x268>)
 8003b22:	61bb      	str	r3, [r7, #24]
        break;
 8003b24:	e00c      	b.n	8003b40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b26:	f7ff fc6f 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 8003b2a:	61b8      	str	r0, [r7, #24]
        break;
 8003b2c:	e008      	b.n	8003b40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b32:	61bb      	str	r3, [r7, #24]
        break;
 8003b34:	e004      	b.n	8003b40 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	085a      	lsrs	r2, r3, #1
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	441a      	add	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b0f      	cmp	r3, #15
 8003b5e:	d909      	bls.n	8003b74 <UART_SetConfig+0x238>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d205      	bcs.n	8003b74 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	e001      	b.n	8003b78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b84:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	efff69f3 	.word	0xefff69f3
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	40004800 	.word	0x40004800
 8003ba4:	007a1200 	.word	0x007a1200

08003ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01a      	beq.n	8003cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca6:	d10a      	bne.n	8003cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b098      	sub	sp, #96	; 0x60
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cfc:	f7fc fed8 	bl	8000ab0 <HAL_GetTick>
 8003d00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d12e      	bne.n	8003d6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f88c 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d021      	beq.n	8003d6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e062      	b.n	8003e34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d149      	bne.n	8003e10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f856 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d03c      	beq.n	8003e10 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	623b      	str	r3, [r7, #32]
   return(result);
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
 8003db6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e6      	bne.n	8003d96 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3308      	adds	r3, #8
 8003de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de8:	61fa      	str	r2, [r7, #28]
 8003dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	617b      	str	r3, [r7, #20]
   return(result);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e5      	bne.n	8003dc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e011      	b.n	8003e34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3758      	adds	r7, #88	; 0x58
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	e049      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d045      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fc fe2b 	bl	8000ab0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e048      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d031      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d110      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f838 	bl	8003f0a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e029      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebc:	d111      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f81e 	bl	8003f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d0a6      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b095      	sub	sp, #84	; 0x54
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f30:	643b      	str	r3, [r7, #64]	; 0x40
 8003f32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3308      	adds	r3, #8
 8003f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d118      	bne.n	8003fb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 0310 	bic.w	r3, r3, #16
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6979      	ldr	r1, [r7, #20]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	613b      	str	r3, [r7, #16]
   return(result);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e6      	bne.n	8003f80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fc6:	bf00      	nop
 8003fc8:	3754      	adds	r7, #84	; 0x54
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 f820 	bl	800402c <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	0800407c 	.word	0x0800407c
 8004010:	0800407c 	.word	0x0800407c
 8004014:	0800407c 	.word	0x0800407c
 8004018:	08004080 	.word	0x08004080

0800401c <memset>:
 800401c:	4402      	add	r2, r0
 800401e:	4603      	mov	r3, r0
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	f803 1b01 	strb.w	r1, [r3], #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <_init>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	bf00      	nop
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr

08004038 <_fini>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	bf00      	nop
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr
