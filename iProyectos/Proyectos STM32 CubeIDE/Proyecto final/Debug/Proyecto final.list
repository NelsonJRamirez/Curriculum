
Proyecto final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800436c  0800436c  0001436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000080  08004a70  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004a70  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad54  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aea  00000000  00000000  0002ae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0002d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b273  00000000  00000000  0002d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b28d  00000000  00000000  00048943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c806  00000000  00000000  00053bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f03d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc4  00000000  00000000  000f0428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004354 	.word	0x08004354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004354 	.word	0x08004354

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b098      	sub	sp, #96	; 0x60
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80002aa:	f000 fa61 	bl	8000770 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80002ae:	495d      	ldr	r1, [pc, #372]	; (8000424 <ESP_Init+0x184>)
 80002b0:	485d      	ldr	r0, [pc, #372]	; (8000428 <ESP_Init+0x188>)
 80002b2:	f000 fc7a 	bl	8000baa <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80002b6:	495d      	ldr	r1, [pc, #372]	; (800042c <ESP_Init+0x18c>)
 80002b8:	485d      	ldr	r0, [pc, #372]	; (8000430 <ESP_Init+0x190>)
 80002ba:	f000 fc76 	bl	8000baa <Uart_sendstring>
	for (int i=0; i<5; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80002c2:	e00a      	b.n	80002da <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 80002c4:	4959      	ldr	r1, [pc, #356]	; (800042c <ESP_Init+0x18c>)
 80002c6:	485b      	ldr	r0, [pc, #364]	; (8000434 <ESP_Init+0x194>)
 80002c8:	f000 fc6f 	bl	8000baa <Uart_sendstring>
		HAL_Delay(1000);
 80002cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d0:	f001 f930 	bl	8001534 <HAL_Delay>
	for (int i=0; i<5; i++)
 80002d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002d6:	3301      	adds	r3, #1
 80002d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80002da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002dc:	2b04      	cmp	r3, #4
 80002de:	ddf1      	ble.n	80002c4 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 80002e0:	4950      	ldr	r1, [pc, #320]	; (8000424 <ESP_Init+0x184>)
 80002e2:	4855      	ldr	r0, [pc, #340]	; (8000438 <ESP_Init+0x198>)
 80002e4:	f000 fc61 	bl	8000baa <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80002e8:	bf00      	nop
 80002ea:	494e      	ldr	r1, [pc, #312]	; (8000424 <ESP_Init+0x184>)
 80002ec:	4853      	ldr	r0, [pc, #332]	; (800043c <ESP_Init+0x19c>)
 80002ee:	f000 fced 	bl	8000ccc <Wait_for>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80002f8:	494c      	ldr	r1, [pc, #304]	; (800042c <ESP_Init+0x18c>)
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <ESP_Init+0x1a0>)
 80002fc:	f000 fc55 	bl	8000baa <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000300:	4948      	ldr	r1, [pc, #288]	; (8000424 <ESP_Init+0x184>)
 8000302:	4850      	ldr	r0, [pc, #320]	; (8000444 <ESP_Init+0x1a4>)
 8000304:	f000 fc51 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000308:	bf00      	nop
 800030a:	4946      	ldr	r1, [pc, #280]	; (8000424 <ESP_Init+0x184>)
 800030c:	484e      	ldr	r0, [pc, #312]	; (8000448 <ESP_Init+0x1a8>)
 800030e:	f000 fcdd 	bl	8000ccc <Wait_for>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 8000318:	4944      	ldr	r1, [pc, #272]	; (800042c <ESP_Init+0x18c>)
 800031a:	484c      	ldr	r0, [pc, #304]	; (800044c <ESP_Init+0x1ac>)
 800031c:	f000 fc45 	bl	8000baa <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000320:	4942      	ldr	r1, [pc, #264]	; (800042c <ESP_Init+0x18c>)
 8000322:	484b      	ldr	r0, [pc, #300]	; (8000450 <ESP_Init+0x1b0>)
 8000324:	f000 fc41 	bl	8000baa <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000328:	f107 0008 	add.w	r0, r7, #8
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	4948      	ldr	r1, [pc, #288]	; (8000454 <ESP_Init+0x1b4>)
 8000332:	f003 fb93 	bl	8003a5c <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	493a      	ldr	r1, [pc, #232]	; (8000424 <ESP_Init+0x184>)
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fc34 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8000342:	bf00      	nop
 8000344:	4937      	ldr	r1, [pc, #220]	; (8000424 <ESP_Init+0x184>)
 8000346:	4844      	ldr	r0, [pc, #272]	; (8000458 <ESP_Init+0x1b8>)
 8000348:	f000 fcc0 	bl	8000ccc <Wait_for>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f8      	beq.n	8000344 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4940      	ldr	r1, [pc, #256]	; (800045c <ESP_Init+0x1bc>)
 800035a:	4618      	mov	r0, r3
 800035c:	f003 fb7e 	bl	8003a5c <siprintf>
	Uart_sendstring(data,pc_uart);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4931      	ldr	r1, [pc, #196]	; (800042c <ESP_Init+0x18c>)
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fc1f 	bl	8000baa <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 800036c:	492d      	ldr	r1, [pc, #180]	; (8000424 <ESP_Init+0x184>)
 800036e:	483c      	ldr	r0, [pc, #240]	; (8000460 <ESP_Init+0x1c0>)
 8000370:	f000 fc1b 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8000374:	bf00      	nop
 8000376:	492b      	ldr	r1, [pc, #172]	; (8000424 <ESP_Init+0x184>)
 8000378:	483a      	ldr	r0, [pc, #232]	; (8000464 <ESP_Init+0x1c4>)
 800037a:	f000 fca7 	bl	8000ccc <Wait_for>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000384:	bf00      	nop
 8000386:	4a27      	ldr	r2, [pc, #156]	; (8000424 <ESP_Init+0x184>)
 8000388:	4937      	ldr	r1, [pc, #220]	; (8000468 <ESP_Init+0x1c8>)
 800038a:	4838      	ldr	r0, [pc, #224]	; (800046c <ESP_Init+0x1cc>)
 800038c:	f000 fc24 	bl	8000bd8 <Copy_upto>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f7      	beq.n	8000386 <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000396:	bf00      	nop
 8000398:	4922      	ldr	r1, [pc, #136]	; (8000424 <ESP_Init+0x184>)
 800039a:	4835      	ldr	r0, [pc, #212]	; (8000470 <ESP_Init+0x1d0>)
 800039c:	f000 fc96 	bl	8000ccc <Wait_for>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <ESP_Init+0xf8>
	int len = strlen (buffer);
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <ESP_Init+0x1c8>)
 80003a8:	f7ff ff1c 	bl	80001e4 <strlen>
 80003ac:	4603      	mov	r3, r0
 80003ae:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80003b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <ESP_Init+0x1c8>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <ESP_Init+0x1c8>)
 80003c0:	492c      	ldr	r1, [pc, #176]	; (8000474 <ESP_Init+0x1d4>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 fb4a 	bl	8003a5c <siprintf>
	Uart_sendstring(data, pc_uart);
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	4917      	ldr	r1, [pc, #92]	; (800042c <ESP_Init+0x18c>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fbeb 	bl	8000baa <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80003d4:	4913      	ldr	r1, [pc, #76]	; (8000424 <ESP_Init+0x184>)
 80003d6:	4828      	ldr	r0, [pc, #160]	; (8000478 <ESP_Init+0x1d8>)
 80003d8:	f000 fbe7 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80003dc:	bf00      	nop
 80003de:	4911      	ldr	r1, [pc, #68]	; (8000424 <ESP_Init+0x184>)
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <ESP_Init+0x1dc>)
 80003e2:	f000 fc73 	bl	8000ccc <Wait_for>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f8      	beq.n	80003de <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80003ec:	490f      	ldr	r1, [pc, #60]	; (800042c <ESP_Init+0x18c>)
 80003ee:	4824      	ldr	r0, [pc, #144]	; (8000480 <ESP_Init+0x1e0>)
 80003f0:	f000 fbdb 	bl	8000baa <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80003f4:	490b      	ldr	r1, [pc, #44]	; (8000424 <ESP_Init+0x184>)
 80003f6:	4823      	ldr	r0, [pc, #140]	; (8000484 <ESP_Init+0x1e4>)
 80003f8:	f000 fbd7 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80003fc:	bf00      	nop
 80003fe:	4909      	ldr	r1, [pc, #36]	; (8000424 <ESP_Init+0x184>)
 8000400:	481b      	ldr	r0, [pc, #108]	; (8000470 <ESP_Init+0x1d0>)
 8000402:	f000 fc63 	bl	8000ccc <Wait_for>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <ESP_Init+0x18c>)
 800040e:	481e      	ldr	r0, [pc, #120]	; (8000488 <ESP_Init+0x1e8>)
 8000410:	f000 fbcb 	bl	8000baa <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 8000414:	4905      	ldr	r1, [pc, #20]	; (800042c <ESP_Init+0x18c>)
 8000416:	481d      	ldr	r0, [pc, #116]	; (800048c <ESP_Init+0x1ec>)
 8000418:	f000 fbc7 	bl	8000baa <Uart_sendstring>

}
 800041c:	bf00      	nop
 800041e:	3760      	adds	r7, #96	; 0x60
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200001e0 	.word	0x200001e0
 8000428:	08004770 	.word	0x08004770
 800042c:	20000268 	.word	0x20000268
 8000430:	0800477c 	.word	0x0800477c
 8000434:	08004788 	.word	0x08004788
 8000438:	0800478c 	.word	0x0800478c
 800043c:	08004794 	.word	0x08004794
 8000440:	080047a0 	.word	0x080047a0
 8000444:	080047ac 	.word	0x080047ac
 8000448:	080047bc 	.word	0x080047bc
 800044c:	080047d4 	.word	0x080047d4
 8000450:	080047e4 	.word	0x080047e4
 8000454:	08004808 	.word	0x08004808
 8000458:	08004820 	.word	0x08004820
 800045c:	08004834 	.word	0x08004834
 8000460:	08004848 	.word	0x08004848
 8000464:	08004854 	.word	0x08004854
 8000468:	2000009c 	.word	0x2000009c
 800046c:	08004864 	.word	0x08004864
 8000470:	08004868 	.word	0x08004868
 8000474:	08004870 	.word	0x08004870
 8000478:	08004880 	.word	0x08004880
 800047c:	08004890 	.word	0x08004890
 8000480:	080048a8 	.word	0x080048a8
 8000484:	080048b8 	.word	0x080048b8
 8000488:	080048cc 	.word	0x080048cc
 800048c:	080048e0 	.word	0x080048e0

08000490 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b098      	sub	sp, #96	; 0x60
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff fea2 	bl	80001e4 <strlen>
 80004a0:	4603      	mov	r3, r0
 80004a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80004a4:	f107 000c 	add.w	r0, r7, #12
 80004a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	491a      	ldr	r1, [pc, #104]	; (8000518 <Server_Send+0x88>)
 80004ae:	f003 fad5 	bl	8003a5c <siprintf>
	Uart_sendstring(data, wifi_uart);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4919      	ldr	r1, [pc, #100]	; (800051c <Server_Send+0x8c>)
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fb76 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80004be:	bf00      	nop
 80004c0:	4916      	ldr	r1, [pc, #88]	; (800051c <Server_Send+0x8c>)
 80004c2:	4817      	ldr	r0, [pc, #92]	; (8000520 <Server_Send+0x90>)
 80004c4:	f000 fc02 	bl	8000ccc <Wait_for>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f8      	beq.n	80004c0 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 80004ce:	4913      	ldr	r1, [pc, #76]	; (800051c <Server_Send+0x8c>)
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 fb6a 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80004d6:	bf00      	nop
 80004d8:	4910      	ldr	r1, [pc, #64]	; (800051c <Server_Send+0x8c>)
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <Server_Send+0x94>)
 80004dc:	f000 fbf6 	bl	8000ccc <Wait_for>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	490f      	ldr	r1, [pc, #60]	; (8000528 <Server_Send+0x98>)
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 fab5 	bl	8003a5c <siprintf>
	Uart_sendstring(data, wifi_uart);
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	4909      	ldr	r1, [pc, #36]	; (800051c <Server_Send+0x8c>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb56 	bl	8000baa <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80004fe:	bf00      	nop
 8000500:	4906      	ldr	r1, [pc, #24]	; (800051c <Server_Send+0x8c>)
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <Server_Send+0x9c>)
 8000504:	f000 fbe2 	bl	8000ccc <Wait_for>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f8      	beq.n	8000500 <Server_Send+0x70>
	return 1;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3760      	adds	r7, #96	; 0x60
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08004900 	.word	0x08004900
 800051c:	200001e0 	.word	0x200001e0
 8000520:	08004914 	.word	0x08004914
 8000524:	08004918 	.word	0x08004918
 8000528:	08004920 	.word	0x08004920
 800052c:	08004868 	.word	0x08004868

08000530 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000536:	af00      	add	r7, sp, #0
 8000538:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800053c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000540:	6018      	str	r0, [r3, #0]
 8000542:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000546:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800054a:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 800054c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000550:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	3304      	adds	r3, #4
 800055a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f003 fa73 	bl	8003a4c <memset>
	if (!(strcmp (str, "/ledon")))
 8000566:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800056a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800056e:	493f      	ldr	r1, [pc, #252]	; (800066c <Server_Handle+0x13c>)
 8000570:	6818      	ldr	r0, [r3, #0]
 8000572:	f7ff fe2d 	bl	80001d0 <strcmp>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d122      	bne.n	80005c2 <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 800057c:	4b3c      	ldr	r3, [pc, #240]	; (8000670 <Server_Handle+0x140>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fa68 	bl	8003a5c <siprintf>
		strcat(datatosend, LED_ON);
 800058c:	4b39      	ldr	r3, [pc, #228]	; (8000674 <Server_Handle+0x144>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fa80 	bl	8003a9c <strcat>
		strcat(datatosend, Terminate);
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <Server_Handle+0x148>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fa78 	bl	8003a9c <strcat>
		Server_Send(datatosend, Link_ID);
 80005ac:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005b0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005b4:	f107 0208 	add.w	r2, r7, #8
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	4610      	mov	r0, r2
 80005bc:	f7ff ff68 	bl	8000490 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 80005c0:	e04f      	b.n	8000662 <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 80005c2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005c6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80005ca:	492c      	ldr	r1, [pc, #176]	; (800067c <Server_Handle+0x14c>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f7ff fdff 	bl	80001d0 <strcmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d122      	bne.n	800061e <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <Server_Handle+0x140>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fa3a 	bl	8003a5c <siprintf>
		strcat(datatosend, LED_OFF);
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <Server_Handle+0x150>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4611      	mov	r1, r2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa52 	bl	8003a9c <strcat>
		strcat(datatosend, Terminate);
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <Server_Handle+0x148>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fa4a 	bl	8003a9c <strcat>
		Server_Send(datatosend, Link_ID);
 8000608:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800060c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	4610      	mov	r0, r2
 8000618:	f7ff ff3a 	bl	8000490 <Server_Send>
}
 800061c:	e021      	b.n	8000662 <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <Server_Handle+0x140>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fa17 	bl	8003a5c <siprintf>
		strcat(datatosend, LED_OFF);
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <Server_Handle+0x150>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fa2f 	bl	8003a9c <strcat>
		strcat(datatosend, Terminate);
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <Server_Handle+0x148>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fa27 	bl	8003a9c <strcat>
		Server_Send(datatosend, Link_ID);
 800064e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000652:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000656:	f107 0208 	add.w	r2, r7, #8
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	4610      	mov	r0, r2
 800065e:	f7ff ff17 	bl	8000490 <Server_Send>
}
 8000662:	bf00      	nop
 8000664:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	08004930 	.word	0x08004930
 8000670:	20000000 	.word	0x20000000
 8000674:	20000004 	.word	0x20000004
 8000678:	2000000c 	.word	0x2000000c
 800067c:	08004938 	.word	0x08004938
 8000680:	20000008 	.word	0x20000008

08000684 <Server_Start>:

void Server_Start (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b092      	sub	sp, #72	; 0x48
 8000688:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 f9d8 	bl	8003a4c <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 800069c:	bf00      	nop
 800069e:	1dfa      	adds	r2, r7, #7
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <Server_Start+0xd0>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	482c      	ldr	r0, [pc, #176]	; (8000758 <Server_Start+0xd4>)
 80006a6:	f000 fa51 	bl	8000b4c <Get_after>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f6      	beq.n	800069e <Server_Start+0x1a>
	Link_ID -= 48;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3b30      	subs	r3, #48	; 0x30
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80006b8:	bf00      	nop
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4a25      	ldr	r2, [pc, #148]	; (8000754 <Server_Start+0xd0>)
 80006c0:	4619      	mov	r1, r3
 80006c2:	4826      	ldr	r0, [pc, #152]	; (800075c <Server_Start+0xd8>)
 80006c4:	f000 fa88 	bl	8000bd8 <Copy_upto>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f5      	beq.n	80006ba <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	4822      	ldr	r0, [pc, #136]	; (8000760 <Server_Start+0xdc>)
 80006d6:	f000 f8b2 	bl	800083e <Look_for>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10b      	bne.n	80006f8 <Server_Start+0x74>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2120      	movs	r1, #32
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f001 f9cc 	bl	8001a84 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4619      	mov	r1, r3
 80006f0:	481b      	ldr	r0, [pc, #108]	; (8000760 <Server_Start+0xdc>)
 80006f2:	f7ff ff1d 	bl	8000530 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 80006f6:	e028      	b.n	800074a <Server_Start+0xc6>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	4819      	ldr	r0, [pc, #100]	; (8000764 <Server_Start+0xe0>)
 8000700:	f000 f89d 	bl	800083e <Look_for>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d10b      	bne.n	8000722 <Server_Start+0x9e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 f9b7 	bl	8001a84 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <Server_Start+0xe0>)
 800071c:	f7ff ff08 	bl	8000530 <Server_Handle>
}
 8000720:	e013      	b.n	800074a <Server_Start+0xc6>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <Server_Start+0xe4>)
 800072a:	f000 f888 	bl	800083e <Look_for>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d00a      	beq.n	800074a <Server_Start+0xc6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f001 f9a2 	bl	8001a84 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4619      	mov	r1, r3
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <Server_Start+0xe8>)
 8000746:	f7ff fef3 	bl	8000530 <Server_Handle>
}
 800074a:	bf00      	nop
 800074c:	3748      	adds	r7, #72	; 0x48
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001e0 	.word	0x200001e0
 8000758:	08004940 	.word	0x08004940
 800075c:	08004948 	.word	0x08004948
 8000760:	08004930 	.word	0x08004930
 8000764:	08004938 	.word	0x08004938
 8000768:	08004954 	.word	0x08004954
 800076c:	08004964 	.word	0x08004964

08000770 <Ringbuf_init>:
ring_buffer *_tx_buffer2;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
    _rx_buffer1 = &rx_buffer1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <Ringbuf_init+0x68>)
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <Ringbuf_init+0x6c>)
 8000778:	601a      	str	r2, [r3, #0]
    _tx_buffer1 = &tx_buffer1;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <Ringbuf_init+0x70>)
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <Ringbuf_init+0x74>)
 800077e:	601a      	str	r2, [r3, #0]
    _rx_buffer2 = &rx_buffer2;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <Ringbuf_init+0x78>)
 8000782:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <Ringbuf_init+0x7c>)
 8000784:	601a      	str	r2, [r3, #0]
    _tx_buffer2 = &tx_buffer2;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <Ringbuf_init+0x80>)
 8000788:	4a1a      	ldr	r2, [pc, #104]	; (80007f4 <Ringbuf_init+0x84>)
 800078a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <Ringbuf_init+0x88>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <Ringbuf_init+0x88>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0201 	orr.w	r2, r2, #1
 800079a:	609a      	str	r2, [r3, #8]
    __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <Ringbuf_init+0x8c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <Ringbuf_init+0x8c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f042 0201 	orr.w	r2, r2, #1
 80007aa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <Ringbuf_init+0x88>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <Ringbuf_init+0x88>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0220 	orr.w	r2, r2, #32
 80007ba:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <Ringbuf_init+0x8c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <Ringbuf_init+0x8c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f042 0220 	orr.w	r2, r2, #32
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	200001d0 	.word	0x200001d0
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	200001d4 	.word	0x200001d4
 80007e4:	200000f8 	.word	0x200000f8
 80007e8:	200001d8 	.word	0x200001d8
 80007ec:	20000140 	.word	0x20000140
 80007f0:	200001dc 	.word	0x200001dc
 80007f4:	20000188 	.word	0x20000188
 80007f8:	200001e0 	.word	0x200001e0
 80007fc:	20000268 	.word	0x20000268

08000800 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
    int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	3301      	adds	r3, #1
 8000812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000816:	60fb      	str	r3, [r7, #12]

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != buffer->tail)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	429a      	cmp	r2, r3
 8000820:	d007      	beq.n	8000832 <store_char+0x32>
    {
        buffer->buffer[buffer->head] = c;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	79f9      	ldrb	r1, [r7, #7]
 800082a:	54d1      	strb	r1, [r2, r3]
        buffer->head = i;
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	641a      	str	r2, [r3, #64]	; 0x40
    }
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <Look_for>:

int Look_for(char *str, char *buffertolookinto)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
    int stringlength = strlen(str);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff fccb 	bl	80001e4 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	60fb      	str	r3, [r7, #12]
    int bufferlength = strlen(buffertolookinto);
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	f7ff fcc6 	bl	80001e4 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	60bb      	str	r3, [r7, #8]
    int so_far = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
    int indx = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
repeat:
    while (str[so_far] != buffertolookinto[indx])
 8000864:	e002      	b.n	800086c <Look_for+0x2e>
        indx++;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	3301      	adds	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
    while (str[so_far] != buffertolookinto[indx])
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	440b      	add	r3, r1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d1f2      	bne.n	8000866 <Look_for+0x28>
    if (str[so_far] == buffertolookinto[indx])
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	440b      	add	r3, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d111      	bne.n	80008b8 <Look_for+0x7a>
    {
        while (str[so_far] == buffertolookinto[indx])
 8000894:	e005      	b.n	80008a2 <Look_for+0x64>
        {
            so_far++;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
            indx++;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	3301      	adds	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
        while (str[so_far] == buffertolookinto[indx])
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781a      	ldrb	r2, [r3, #0]
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	6839      	ldr	r1, [r7, #0]
 80008ae:	440b      	add	r3, r1
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d0ef      	beq.n	8000896 <Look_for+0x58>
 80008b6:	e008      	b.n	80008ca <Look_for+0x8c>
        }
    }
    else
    {
        so_far = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
        if (indx >= bufferlength)
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbcf      	blt.n	8000864 <Look_for+0x26>
            return -1;
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	e007      	b.n	80008da <Look_for+0x9c>
        goto repeat;
    }

    if (so_far == stringlength)
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d101      	bne.n	80008d6 <Look_for+0x98>
        return 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e001      	b.n	80008da <Look_for+0x9c>
    else
        return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <Uart_peek>:
        _rx_buffer2->head = _rx_buffer2->tail;
    }
}

int Uart_peek(UART_HandleTypeDef *uart)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    if (uart == device_uart)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <Uart_peek+0x70>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d111      	bne.n	8000918 <Uart_peek+0x34>
    {
        if (_rx_buffer1->head == _rx_buffer1->tail)
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <Uart_peek+0x74>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <Uart_peek+0x74>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	429a      	cmp	r2, r3
 8000902:	d102      	bne.n	800090a <Uart_peek+0x26>
        {
            return -1;
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	e01e      	b.n	8000948 <Uart_peek+0x64>
        }
        else
        {
            return _rx_buffer1->buffer[_rx_buffer1->tail];
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <Uart_peek+0x74>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <Uart_peek+0x74>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	e017      	b.n	8000948 <Uart_peek+0x64>
        }
    }
    else if (uart == pc_uart)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <Uart_peek+0x78>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d111      	bne.n	8000944 <Uart_peek+0x60>
    {
        if (_rx_buffer2->head == _rx_buffer2->tail)
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <Uart_peek+0x7c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <Uart_peek+0x7c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	429a      	cmp	r2, r3
 800092e:	d102      	bne.n	8000936 <Uart_peek+0x52>
        {
            return -1;
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	e008      	b.n	8000948 <Uart_peek+0x64>
        }
        else
        {
            return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <Uart_peek+0x7c>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <Uart_peek+0x7c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	e001      	b.n	8000948 <Uart_peek+0x64>
        }
    }

    return -1;
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200001e0 	.word	0x200001e0
 8000958:	200001d0 	.word	0x200001d0
 800095c:	20000268 	.word	0x20000268
 8000960:	200001d8 	.word	0x200001d8

08000964 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if (uart == device_uart)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <Uart_read+0x9c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d11c      	bne.n	80009ae <Uart_read+0x4a>
    {
        // if the head isn't ahead of the tail, we don't have any characters
        if (_rx_buffer1->head == _rx_buffer1->tail)
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <Uart_read+0xa0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <Uart_read+0xa0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000980:	429a      	cmp	r2, r3
 8000982:	d102      	bne.n	800098a <Uart_read+0x26>
        {
            return -1;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	e034      	b.n	80009f4 <Uart_read+0x90>
        }
        else
        {
            unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <Uart_read+0xa0>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <Uart_read+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	73bb      	strb	r3, [r7, #14]
            _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <Uart_read+0xa0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <Uart_read+0xa0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009a8:	645a      	str	r2, [r3, #68]	; 0x44
            return c;
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	e022      	b.n	80009f4 <Uart_read+0x90>
        }
    }
    else if (uart == pc_uart)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <Uart_read+0xa4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d11c      	bne.n	80009f0 <Uart_read+0x8c>
    {
        // if the head isn't ahead of the tail, we don't have any characters
        if (_rx_buffer2->head == _rx_buffer2->tail)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <Uart_read+0xa8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <Uart_read+0xa8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d102      	bne.n	80009cc <Uart_read+0x68>
        {
            return -1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e013      	b.n	80009f4 <Uart_read+0x90>
        }
        else
        {
            unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <Uart_read+0xa8>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <Uart_read+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	73fb      	strb	r3, [r7, #15]
            _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <Uart_read+0xa8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <Uart_read+0xa8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ea:	645a      	str	r2, [r3, #68]	; 0x44
            return c;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	e001      	b.n	80009f4 <Uart_read+0x90>
        }
    }
    else
        return -1;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	200001e0 	.word	0x200001e0
 8000a04:	200001d0 	.word	0x200001d0
 8000a08:	20000268 	.word	0x20000268
 8000a0c:	200001d8 	.word	0x200001d8

08000a10 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    if (c >= 0)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db4c      	blt.n	8000aba <Uart_write+0xaa>
    {
        if (uart == device_uart)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <Uart_write+0xb8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d122      	bne.n	8000a6e <Uart_write+0x5e>
        {
            int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <Uart_write+0xbc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a34:	60bb      	str	r3, [r7, #8]

            // If the output buffer is full, there's nothing for it other than to
            // wait for the interrupt handler to empty it a bit
            // ???: return 0 here instead?
            while (i == _tx_buffer1->tail)
 8000a36:	bf00      	nop
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <Uart_write+0xbc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d0f9      	beq.n	8000a38 <Uart_write+0x28>
                ;

            _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <Uart_write+0xbc>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <Uart_write+0xbc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	b2c9      	uxtb	r1, r1
 8000a52:	54d1      	strb	r1, [r2, r3]
            _tx_buffer1->head = i;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <Uart_write+0xbc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40

            __HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <Uart_write+0xb8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <Uart_write+0xb8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a6a:	601a      	str	r2, [r3, #0]
            _tx_buffer2->head = i;

            __HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
        }
    }
}
 8000a6c:	e025      	b.n	8000aba <Uart_write+0xaa>
        else if (uart == pc_uart)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <Uart_write+0xc0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d121      	bne.n	8000aba <Uart_write+0xaa>
            int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <Uart_write+0xc4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a82:	60fb      	str	r3, [r7, #12]
            while (i == _tx_buffer2->tail)
 8000a84:	bf00      	nop
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <Uart_write+0xc4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d0f9      	beq.n	8000a86 <Uart_write+0x76>
            _tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <Uart_write+0xc4>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <Uart_write+0xc4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	b2c9      	uxtb	r1, r1
 8000aa0:	54d1      	strb	r1, [r2, r3]
            _tx_buffer2->head = i;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <Uart_write+0xc4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <Uart_write+0xc0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <Uart_write+0xc0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200001e0 	.word	0x200001e0
 8000acc:	200001d4 	.word	0x200001d4
 8000ad0:	20000268 	.word	0x20000268
 8000ad4:	200001dc 	.word	0x200001dc

08000ad8 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    if (uart == device_uart)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <IsDataAvailable+0x64>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d10e      	bne.n	8000b06 <IsDataAvailable+0x2e>
        return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <IsDataAvailable+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <IsDataAvailable+0x68>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3340      	adds	r3, #64	; 0x40
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b04:	e014      	b.n	8000b30 <IsDataAvailable+0x58>
    else if (uart == pc_uart)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <IsDataAvailable+0x6c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10e      	bne.n	8000b2c <IsDataAvailable+0x54>
        return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <IsDataAvailable+0x70>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <IsDataAvailable+0x70>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	3340      	adds	r3, #64	; 0x40
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b2a:	e001      	b.n	8000b30 <IsDataAvailable+0x58>
    return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	200001e0 	.word	0x200001e0
 8000b40:	200001d0 	.word	0x200001d0
 8000b44:	20000268 	.word	0x20000268
 8000b48:	200001d8 	.word	0x200001d8

08000b4c <Get_after>:

int Get_after(char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	72fb      	strb	r3, [r7, #11]
    while (Wait_for(string, uart) != 1);
 8000b5c:	bf00      	nop
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f000 f8b3 	bl	8000ccc <Wait_for>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d1f8      	bne.n	8000b5e <Get_after+0x12>
    for (int indx = 0; indx < numberofchars; indx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e012      	b.n	8000b98 <Get_after+0x4c>
    {
        while (!(IsDataAvailable(uart)))
 8000b72:	bf00      	nop
 8000b74:	6838      	ldr	r0, [r7, #0]
 8000b76:	f7ff ffaf 	bl	8000ad8 <IsDataAvailable>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f9      	beq.n	8000b74 <Get_after+0x28>
            ;
        buffertosave[indx] = Uart_read(uart);
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f7ff feef 	bl	8000964 <Uart_read>
 8000b86:	4601      	mov	r1, r0
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
    for (int indx = 0; indx < numberofchars; indx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbe8      	blt.n	8000b72 <Get_after+0x26>
    }
    return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <Uart_sendstring>:

void Uart_sendstring(const char *s, UART_HandleTypeDef *uart)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
    while (*s != '\0')
 8000bb4:	e007      	b.n	8000bc6 <Uart_sendstring+0x1c>
        Uart_write(*s++, uart);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff25 	bl	8000a10 <Uart_write>
    while (*s != '\0')
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f3      	bne.n	8000bb6 <Uart_sendstring+0xc>
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Copy_upto>:
    while (*s)
        Uart_write(*s++, uart);
}

int Copy_upto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
    int so_far = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    int len = strlen(string);
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff fafb 	bl	80001e4 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	617b      	str	r3, [r7, #20]
    int indx = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]

again:
    while (!IsDataAvailable(uart))
 8000bf6:	bf00      	nop
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff6d 	bl	8000ad8 <IsDataAvailable>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f9      	beq.n	8000bf8 <Copy_upto+0x20>
        ;
    while (Uart_peek(uart) != string[so_far])
 8000c04:	e01c      	b.n	8000c40 <Copy_upto+0x68>
    {
        buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <Copy_upto+0xf0>)
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <Copy_upto+0xf0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	68b8      	ldr	r0, [r7, #8]
 8000c14:	4403      	add	r3, r0
 8000c16:	5c8a      	ldrb	r2, [r1, r2]
 8000c18:	701a      	strb	r2, [r3, #0]
        _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <Copy_upto+0xf0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <Copy_upto+0xf0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c2a:	645a      	str	r2, [r3, #68]	; 0x44
        indx++;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
        while (!IsDataAvailable(uart))
 8000c32:	bf00      	nop
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff4f 	bl	8000ad8 <IsDataAvailable>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f9      	beq.n	8000c34 <Copy_upto+0x5c>
    while (Uart_peek(uart) != string[so_far])
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fe4f 	bl	80008e4 <Uart_peek>
 8000c46:	4601      	mov	r1, r0
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d1d8      	bne.n	8000c06 <Copy_upto+0x2e>
            ;
    }
    while (Uart_peek(uart) == string[so_far])
 8000c54:	e01b      	b.n	8000c8e <Copy_upto+0xb6>
    {
        so_far++;
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
        buffertocopyinto[indx++] = Uart_read(uart);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fe81 	bl	8000964 <Uart_read>
 8000c62:	4601      	mov	r1, r0
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	61ba      	str	r2, [r7, #24]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2ca      	uxtb	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
        if (so_far == len)
 8000c74:	69fa      	ldr	r2, [r7, #28]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d101      	bne.n	8000c80 <Copy_upto+0xa8>
            return 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e01f      	b.n	8000cc0 <Copy_upto+0xe8>
        while (!IsDataAvailable(uart))
 8000c80:	bf00      	nop
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff28 	bl	8000ad8 <IsDataAvailable>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f9      	beq.n	8000c82 <Copy_upto+0xaa>
    while (Uart_peek(uart) == string[so_far])
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fe28 	bl	80008e4 <Uart_peek>
 8000c94:	4601      	mov	r1, r0
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d0d9      	beq.n	8000c56 <Copy_upto+0x7e>
            ;
    }

    if (so_far != len)
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d002      	beq.n	8000cb0 <Copy_upto+0xd8>
    {
        so_far = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
        goto again;
 8000cae:	e7a2      	b.n	8000bf6 <Copy_upto+0x1e>
    }

    if (so_far == len)
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d101      	bne.n	8000cbc <Copy_upto+0xe4>
        return 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e001      	b.n	8000cc0 <Copy_upto+0xe8>
    else
        return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001d0 	.word	0x200001d0

08000ccc <Wait_for>:

int Wait_for(char *string, UART_HandleTypeDef *uart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    int so_far = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
    int len = strlen(string);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fa82 	bl	80001e4 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60bb      	str	r3, [r7, #8]

again:
    while (!IsDataAvailable(uart))
 8000ce4:	bf00      	nop
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	f7ff fef6 	bl	8000ad8 <IsDataAvailable>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f9      	beq.n	8000ce6 <Wait_for+0x1a>
        ;
    if (uart == device_uart)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <Wait_for+0xec>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d114      	bne.n	8000d24 <Wait_for+0x58>
        while (Uart_peek(uart) != string[so_far])
 8000cfa:	e008      	b.n	8000d0e <Wait_for+0x42>
            _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <Wait_for+0xf0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <Wait_for+0xf0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
        while (Uart_peek(uart) != string[so_far])
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f7ff fde8 	bl	80008e4 <Uart_peek>
 8000d14:	4601      	mov	r1, r0
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d1ec      	bne.n	8000cfc <Wait_for+0x30>
 8000d22:	e02b      	b.n	8000d7c <Wait_for+0xb0>
    else if (uart == pc_uart)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <Wait_for+0xf4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d127      	bne.n	8000d7c <Wait_for+0xb0>
        while (Uart_peek(uart) != string[so_far])
 8000d2c:	e008      	b.n	8000d40 <Wait_for+0x74>
            _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <Wait_for+0xf8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <Wait_for+0xf8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d3e:	645a      	str	r2, [r3, #68]	; 0x44
        while (Uart_peek(uart) != string[so_far])
 8000d40:	6838      	ldr	r0, [r7, #0]
 8000d42:	f7ff fdcf 	bl	80008e4 <Uart_peek>
 8000d46:	4601      	mov	r1, r0
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d1ec      	bne.n	8000d2e <Wait_for+0x62>
    while (Uart_peek(uart) == string[so_far])
 8000d54:	e012      	b.n	8000d7c <Wait_for+0xb0>
    {
        so_far++;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
        Uart_read(uart);
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f7ff fe01 	bl	8000964 <Uart_read>
        if (so_far == len)
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d101      	bne.n	8000d6e <Wait_for+0xa2>
            return 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e01f      	b.n	8000dae <Wait_for+0xe2>
        while (!IsDataAvailable(uart))
 8000d6e:	bf00      	nop
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f7ff feb1 	bl	8000ad8 <IsDataAvailable>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f9      	beq.n	8000d70 <Wait_for+0xa4>
    while (Uart_peek(uart) == string[so_far])
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f7ff fdb1 	bl	80008e4 <Uart_peek>
 8000d82:	4601      	mov	r1, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d0e2      	beq.n	8000d56 <Wait_for+0x8a>
            ;
    }

    if (so_far != len)
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d002      	beq.n	8000d9e <Wait_for+0xd2>
    {
        so_far = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
        goto again;
 8000d9c:	e7a2      	b.n	8000ce4 <Wait_for+0x18>
    }

    if (so_far == len)
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d101      	bne.n	8000daa <Wait_for+0xde>
        return 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e001      	b.n	8000dae <Wait_for+0xe2>
    else
        return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001e0 	.word	0x200001e0
 8000dbc:	200001d0 	.word	0x200001d0
 8000dc0:	20000268 	.word	0x20000268
 8000dc4:	200001d8 	.word	0x200001d8

08000dc8 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	617b      	str	r3, [r7, #20]
    uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d024      	beq.n	8000e34 <Uart_isr+0x6c>
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d01f      	beq.n	8000e34 <Uart_isr+0x6c>
         * @note   RXNE flag can be also cleared by a read to the USART_RDR register.
         * @note   TC flag can be also cleared by software sequence: a read operation to
         *          USART_ISR register followed by a write operation to USART_TDR register.
         * @note   TXE flag is cleared only by a write to the USART_TDR register.
         *********************/
        huart->Instance->ISR;                       /* Read status register */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;      /* Read data register */
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <Uart_isr+0x12c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d107      	bne.n	8000e1c <Uart_isr+0x54>
        {
            store_char(c, _rx_buffer1); // store data in buffer
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <Uart_isr+0x130>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fcf3 	bl	8000800 <store_char>
        else if (huart == pc_uart)
        {
            store_char(c, _rx_buffer2); // store data in buffer
        }

        return;
 8000e1a:	e065      	b.n	8000ee8 <Uart_isr+0x120>
        else if (huart == pc_uart)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a37      	ldr	r2, [pc, #220]	; (8000efc <Uart_isr+0x134>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d161      	bne.n	8000ee8 <Uart_isr+0x120>
            store_char(c, _rx_buffer2); // store data in buffer
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <Uart_isr+0x138>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fce7 	bl	8000800 <store_char>
        return;
 8000e32:	e059      	b.n	8000ee8 <Uart_isr+0x120>
    }

    /* If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d057      	beq.n	8000eee <Uart_isr+0x126>
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d052      	beq.n	8000eee <Uart_isr+0x126>
    {
        if (huart == device_uart)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <Uart_isr+0x12c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d123      	bne.n	8000e98 <Uart_isr+0xd0>
        {
            if (tx_buffer1.head == tx_buffer1.tail)
 8000e50:	4b2c      	ldr	r3, [pc, #176]	; (8000f04 <Uart_isr+0x13c>)
 8000e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Uart_isr+0x13c>)
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d108      	bne.n	8000e6e <Uart_isr+0xa6>
            {
                // Buffer empty, so disable interrupts
                __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e6a:	601a      	str	r2, [r3, #0]

                huart->Instance->ISR;
                huart->Instance->TDR = c;
            }
        }
        return;
 8000e6c:	e03e      	b.n	8000eec <Uart_isr+0x124>
                unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <Uart_isr+0x13c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <Uart_isr+0x13c>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	737b      	strb	r3, [r7, #13]
                tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <Uart_isr+0x13c>)
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <Uart_isr+0x13c>)
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
                huart->Instance->ISR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	69db      	ldr	r3, [r3, #28]
                huart->Instance->TDR = c;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	7b7a      	ldrb	r2, [r7, #13]
 8000e92:	b292      	uxth	r2, r2
 8000e94:	851a      	strh	r2, [r3, #40]	; 0x28
        return;
 8000e96:	e029      	b.n	8000eec <Uart_isr+0x124>
        else if (huart == pc_uart)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <Uart_isr+0x134>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d125      	bne.n	8000eec <Uart_isr+0x124>
            if (tx_buffer2.head == tx_buffer2.tail)
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <Uart_isr+0x140>)
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <Uart_isr+0x140>)
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d108      	bne.n	8000ebe <Uart_isr+0xf6>
                __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eba:	601a      	str	r2, [r3, #0]
        return;
 8000ebc:	e016      	b.n	8000eec <Uart_isr+0x124>
                unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <Uart_isr+0x140>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <Uart_isr+0x140>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	73bb      	strb	r3, [r7, #14]
                tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <Uart_isr+0x140>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ed2:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <Uart_isr+0x140>)
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
                huart->Instance->ISR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	69db      	ldr	r3, [r3, #28]
                huart->Instance->TDR = c;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	7bba      	ldrb	r2, [r7, #14]
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        return;
 8000ee6:	e001      	b.n	8000eec <Uart_isr+0x124>
        return;
 8000ee8:	bf00      	nop
 8000eea:	e000      	b.n	8000eee <Uart_isr+0x126>
        return;
 8000eec:	bf00      	nop
    }
}
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001e0 	.word	0x200001e0
 8000ef8:	200001d0 	.word	0x200001d0
 8000efc:	20000268 	.word	0x20000268
 8000f00:	200001d8 	.word	0x200001d8
 8000f04:	200000f8 	.word	0x200000f8
 8000f08:	20000188 	.word	0x20000188

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 faaa 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f812 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 f8ca 	bl	80010b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1c:	f000 f898 	bl	8001050 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f20:	f000 f866 	bl	8000ff0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("122222", "1234567890");
 8000f24:	4903      	ldr	r1, [pc, #12]	; (8000f34 <main+0x28>)
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <main+0x2c>)
 8000f28:	f7ff f9ba 	bl	80002a0 <ESP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Server_Start();
 8000f2c:	f7ff fbaa 	bl	8000684 <Server_Start>
  {
 8000f30:	e7fc      	b.n	8000f2c <main+0x20>
 8000f32:	bf00      	nop
 8000f34:	08004968 	.word	0x08004968
 8000f38:	08004974 	.word	0x08004974

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f46:	2228      	movs	r2, #40	; 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fd7e 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fd70 	bl	8003a4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000f76:	2301      	movs	r3, #1
 8000f78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f88:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd8e 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f9e:	f000 f905 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fdb6 	bl	8002b30 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fca:	f000 f8ef 	bl	80011ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 ffe1 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fe4:	f000 f8e2 	bl	80011ac <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3770      	adds	r7, #112	; 0x70
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <MX_USART1_UART_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8000ffc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USART1_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART1_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART1_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001034:	f002 f946 	bl	80032c4 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800103e:	f000 f8b5 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001e0 	.word	0x200001e0
 800104c:	40013800 	.word	0x40013800

08001050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_USART2_UART_Init+0x5c>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 800105c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001094:	f002 f916 	bl	80032c4 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800109e:	f000 f885 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000268 	.word	0x20000268
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <MX_GPIO_Init+0xf0>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <MX_GPIO_Init+0xf0>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <MX_GPIO_Init+0xf0>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <MX_GPIO_Init+0xf0>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_GPIO_Init+0xf0>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2120      	movs	r1, #32
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f000 fca9 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	481a      	ldr	r0, [pc, #104]	; (80011a4 <MX_GPIO_Init+0xf4>)
 800113a:	f000 fca3 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001144:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <MX_GPIO_Init+0xf8>)
 8001156:	f000 fb23 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800115a:	2320      	movs	r3, #32
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f000 fb14 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_GPIO_Init+0xf4>)
 8001192:	f000 fb05 	bl	80017a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ee:	2007      	movs	r0, #7
 80011f0:	f000 fa94 	bl	800171c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <HAL_UART_MspInit+0xf8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d130      	bne.n	8001284 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_UART_MspInit+0xfc>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001252:	2330      	movs	r3, #48	; 0x30
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001262:	2307      	movs	r3, #7
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4824      	ldr	r0, [pc, #144]	; (8001300 <HAL_UART_MspInit+0x100>)
 800126e:	f000 fa97 	bl	80017a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2025      	movs	r0, #37	; 0x25
 8001278:	f000 fa5b 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800127c:	2025      	movs	r0, #37	; 0x25
 800127e:	f000 fa74 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001282:	e035      	b.n	80012f0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_UART_MspInit+0x104>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d130      	bne.n	80012f0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_UART_MspInit+0xfc>)
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_UART_MspInit+0xfc>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_MspInit+0xfc>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_UART_MspInit+0xfc>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_UART_MspInit+0xfc>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012be:	230c      	movs	r3, #12
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ce:	2307      	movs	r3, #7
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f000 fa60 	bl	80017a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	2026      	movs	r0, #38	; 0x26
 80012e6:	f000 fa24 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ea:	2026      	movs	r0, #38	; 0x26
 80012ec:	f000 fa3d 	bl	800176a <HAL_NVIC_EnableIRQ>
}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800
 8001304:	40004400 	.word	0x40004400

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f8ce 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr (&huart1);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART1_IRQHandler+0x10>)
 8001362:	f7ff fd31 	bl	8000dc8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001e0 	.word	0x200001e0

08001370 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr (&huart2);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <USART2_IRQHandler+0x10>)
 8001376:	f7ff fd27 	bl	8000dc8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000268 	.word	0x20000268

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f002 fb20 	bl	80039f8 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20004000 	.word	0x20004000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	200002f0 	.word	0x200002f0
 80013ec:	20000308 	.word	0x20000308

080013f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f002 fadf 	bl	8003a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff fd61 	bl	8000f0c <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800144c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001458:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 800145c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001460:	20000308 	.word	0x20000308

08001464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_IRQHandler>
	...

08001468 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x28>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x28>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f94f 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe98 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40022000 	.word	0x40022000

08001494 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f967 	bl	8001786 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f92f 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000010 	.word	0x20000010
 80014ec:	20000018 	.word	0x20000018
 80014f0:	20000014 	.word	0x20000014

080014f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000018 	.word	0x20000018
 8001518:	200002f4 	.word	0x200002f4

0800151c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200002f4 	.word	0x200002f4

08001534 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000018 	.word	0x20000018

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff29 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff3e 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff31 	bl	80015e0 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	e14e      	b.n	8001a4e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8140 	beq.w	8001a48 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x40>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 809a 	beq.w	8001a48 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a54      	ldr	r2, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800192c:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x1e0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <HAL_GPIO_Init+0x2d4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x1dc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a45      	ldr	r2, [pc, #276]	; (8001a78 <HAL_GPIO_Init+0x2d8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x1d8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a44      	ldr	r2, [pc, #272]	; (8001a7c <HAL_GPIO_Init+0x2dc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x1d4>
 8001970:	2303      	movs	r3, #3
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 8001974:	2305      	movs	r3, #5
 8001976:	e004      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 8001978:	2302      	movs	r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_GPIO_Init+0x1e2>
 8001980:	2300      	movs	r3, #0
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	f002 0203 	and.w	r2, r2, #3
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	4093      	lsls	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001992:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a0:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019c4:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ca:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f47f aea9 	bne.w	80017b0 <HAL_GPIO_Init+0x10>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	48000400 	.word	0x48000400
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000c00 	.word	0x48000c00
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f001 b823 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 817d 	beq.w	8001dea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001af0:	4bbc      	ldr	r3, [pc, #752]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d00c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afc:	4bb9      	ldr	r3, [pc, #740]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d15c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x10e>
 8001b08:	4bb6      	ldr	r3, [pc, #728]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d155      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x10e>
 8001b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x94>
 8001b42:	4ba8      	ldr	r3, [pc, #672]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	e015      	b.n	8001b74 <HAL_RCC_OscConfig+0xc0>
 8001b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b60:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b70:	4b9c      	ldr	r3, [pc, #624]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b78:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 811f 	beq.w	8001de8 <HAL_RCC_OscConfig+0x334>
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 8116 	bne.w	8001de8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f000 bfaf 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12e>
 8001bd4:	4b83      	ldr	r3, [pc, #524]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a82      	ldr	r2, [pc, #520]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e036      	b.n	8001c50 <HAL_RCC_OscConfig+0x19c>
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x158>
 8001bf2:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7b      	ldr	r2, [pc, #492]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b79      	ldr	r3, [pc, #484]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a78      	ldr	r2, [pc, #480]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e021      	b.n	8001c50 <HAL_RCC_OscConfig+0x19c>
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x184>
 8001c1e:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a70      	ldr	r2, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6e      	ldr	r3, [pc, #440]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6d      	ldr	r2, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0x19c>
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a69      	ldr	r2, [pc, #420]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a66      	ldr	r2, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	f023 020f 	bic.w	r2, r3, #15
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	495f      	ldr	r1, [pc, #380]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d059      	beq.n	8001d2e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fc4f 	bl	800151c <HAL_GetTick>
 8001c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fc4a 	bl	800151c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d902      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f000 bf43 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
 8001c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_OscConfig+0x218>
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e015      	b.n	8001cf8 <HAL_RCC_OscConfig+0x244>
 8001ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ce8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d04:	fa92 f2a2 	rbit	r2, r2
 8001d08:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d0c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ab      	beq.n	8001c84 <HAL_RCC_OscConfig+0x1d0>
 8001d2c:	e05d      	b.n	8001dea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fbf5 	bl	800151c <HAL_GetTick>
 8001d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fbf0 	bl	800151c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d902      	bls.n	8001d4e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	f000 bee9 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
 8001d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2cc>
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e015      	b.n	8001dac <HAL_RCC_OscConfig+0x2f8>
 8001d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_RCC_OscConfig+0x330>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001db4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001db8:	fa92 f2a2 	rbit	r2, r2
 8001dbc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001dc0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f042 0220 	orr.w	r2, r2, #32
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f002 021f 	and.w	r2, r2, #31
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ab      	bne.n	8001d38 <HAL_RCC_OscConfig+0x284>
 8001de0:	e003      	b.n	8001dea <HAL_RCC_OscConfig+0x336>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 817d 	beq.w	80020fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e00:	4ba6      	ldr	r3, [pc, #664]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e0c:	4ba3      	ldr	r3, [pc, #652]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d172      	bne.n	8001efe <HAL_RCC_OscConfig+0x44a>
 8001e18:	4ba0      	ldr	r3, [pc, #640]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d16c      	bne.n	8001efe <HAL_RCC_OscConfig+0x44a>
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3a0>
 8001e4e:	4b93      	ldr	r3, [pc, #588]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e013      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c8>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e86:	fa92 f2a2 	rbit	r2, r2
 8001e8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x410>
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f000 be2e 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	21f8      	movs	r1, #248	; 0xf8
 8001eda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ee2:	fa91 f1a1 	rbit	r1, r1
 8001ee6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001eea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001eee:	fab1 f181 	clz	r1, r1
 8001ef2:	b2c9      	uxtb	r1, r1
 8001ef4:	408b      	lsls	r3, r1
 8001ef6:	4969      	ldr	r1, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efc:	e0fd      	b.n	80020fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8088 	beq.w	8002020 <HAL_RCC_OscConfig+0x56c>
 8001f10:	2301      	movs	r3, #1
 8001f12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	461a      	mov	r2, r3
 8001f38:	2301      	movs	r3, #1
 8001f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff faee 	bl	800151c <HAL_GetTick>
 8001f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fae9 	bl	800151c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d902      	bls.n	8001f5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	f000 bde2 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f86:	4b45      	ldr	r3, [pc, #276]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x500>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fa4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001fba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fbe:	fa92 f2a2 	rbit	r2, r2
 8001fc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f002 021f 	and.w	r2, r2, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0af      	beq.n	8001f46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	21f8      	movs	r1, #248	; 0xf8
 8001ffc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002004:	fa91 f1a1 	rbit	r1, r1
 8002008:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800200c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002010:	fab1 f181 	clz	r1, r1
 8002014:	b2c9      	uxtb	r1, r1
 8002016:	408b      	lsls	r3, r1
 8002018:	4920      	ldr	r1, [pc, #128]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
 800201e:	e06c      	b.n	80020fa <HAL_RCC_OscConfig+0x646>
 8002020:	2301      	movs	r3, #1
 8002022:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002032:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	461a      	mov	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fa66 	bl	800151c <HAL_GetTick>
 8002050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002054:	e00a      	b.n	800206c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff fa61 	bl	800151c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d902      	bls.n	800206c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	f000 bd5a 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
 800206c:	2302      	movs	r3, #2
 800206e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800207e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d104      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5ec>
 8002096:	4b01      	ldr	r3, [pc, #4]	; (800209c <HAL_RCC_OscConfig+0x5e8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	e015      	b.n	80020c8 <HAL_RCC_OscConfig+0x614>
 800209c:	40021000 	.word	0x40021000
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020c4:	4bc8      	ldr	r3, [pc, #800]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020de:	fab2 f282 	clz	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f042 0220 	orr.w	r2, r2, #32
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f002 021f 	and.w	r2, r2, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ad      	bne.n	8002056 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8110 	beq.w	8002330 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d079      	beq.n	8002214 <HAL_RCC_OscConfig+0x760>
 8002120:	2301      	movs	r3, #1
 8002122:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4bab      	ldr	r3, [pc, #684]	; (80023ec <HAL_RCC_OscConfig+0x938>)
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	461a      	mov	r2, r3
 8002146:	2301      	movs	r3, #1
 8002148:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7ff f9e7 	bl	800151c <HAL_GetTick>
 800214e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff f9e2 	bl	800151c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d902      	bls.n	800216a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	f000 bcdb 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002184:	2202      	movs	r2, #2
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c4:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 80021c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021d0:	2102      	movs	r1, #2
 80021d2:	6019      	str	r1, [r3, #0]
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f1a3 	rbit	r1, r3
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021ea:	6019      	str	r1, [r3, #0]
  return result;
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0a0      	beq.n	8002154 <HAL_RCC_OscConfig+0x6a0>
 8002212:	e08d      	b.n	8002330 <HAL_RCC_OscConfig+0x87c>
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002240:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4b68      	ldr	r3, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x938>)
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	2300      	movs	r3, #0
 8002254:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff f961 	bl	800151c <HAL_GetTick>
 800225a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff f95c 	bl	800151c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d902      	bls.n	8002276 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	f000 bc55 	b.w	8002b20 <HAL_RCC_OscConfig+0x106c>
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022c6:	2202      	movs	r2, #2
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 80022e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022ee:	2102      	movs	r1, #2
 80022f0:	6019      	str	r1, [r3, #0]
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f1a3 	rbit	r1, r3
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002308:	6019      	str	r1, [r3, #0]
  return result;
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d197      	bne.n	8002260 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 81a1 	beq.w	8002688 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	61d3      	str	r3, [r2, #28]
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800237e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCC_OscConfig+0x93c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_RCC_OscConfig+0x93c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_RCC_OscConfig+0x93c>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7ff f8bd 	bl	800151c <HAL_GetTick>
 80023a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	e009      	b.n	80023bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7ff f8b8 	bl	800151c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	; 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e3b1      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_RCC_OscConfig+0x93c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ef      	beq.n	80023a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_OscConfig+0x940>
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a02      	ldr	r2, [pc, #8]	; (80023e8 <HAL_RCC_OscConfig+0x934>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e03c      	b.n	8002460 <HAL_RCC_OscConfig+0x9ac>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	10908120 	.word	0x10908120
 80023f0:	40007000 	.word	0x40007000
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x96a>
 8002404:	4bc1      	ldr	r3, [pc, #772]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4ac0      	ldr	r2, [pc, #768]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	4bbe      	ldr	r3, [pc, #760]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4abd      	ldr	r2, [pc, #756]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e020      	b.n	8002460 <HAL_RCC_OscConfig+0x9ac>
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x994>
 800242e:	4bb7      	ldr	r3, [pc, #732]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4ab6      	ldr	r2, [pc, #728]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4bb4      	ldr	r3, [pc, #720]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4ab3      	ldr	r2, [pc, #716]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x9ac>
 8002448:	4bb0      	ldr	r3, [pc, #704]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4aaf      	ldr	r2, [pc, #700]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	4bad      	ldr	r3, [pc, #692]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4aac      	ldr	r2, [pc, #688]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800245a:	f023 0304 	bic.w	r3, r3, #4
 800245e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8081 	beq.w	8002574 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff f853 	bl	800151c <HAL_GetTick>
 8002476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7ff f84e 	bl	800151c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e345      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024da:	601a      	str	r2, [r3, #0]
  return result;
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0xa4c>
 80024fa:	4b84      	ldr	r3, [pc, #528]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	e013      	b.n	8002528 <HAL_RCC_OscConfig+0xa74>
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b79      	ldr	r3, [pc, #484]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002530:	2102      	movs	r1, #2
 8002532:	6011      	str	r1, [r2, #0]
 8002534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002538:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	fa92 f1a2 	rbit	r1, r2
 8002542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002546:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800254a:	6011      	str	r1, [r2, #0]
  return result;
 800254c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002550:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d084      	beq.n	800247c <HAL_RCC_OscConfig+0x9c8>
 8002572:	e07f      	b.n	8002674 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7fe ffd2 	bl	800151c <HAL_GetTick>
 8002578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe ffcd 	bl	800151c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e2c4      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025c2:	2202      	movs	r2, #2
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025dc:	601a      	str	r2, [r3, #0]
  return result;
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_OscConfig+0xb4e>
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	e013      	b.n	800262a <HAL_RCC_OscConfig+0xb76>
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800262e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002632:	2102      	movs	r1, #2
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	fa92 f1a2 	rbit	r1, r2
 8002644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002648:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800264c:	6011      	str	r1, [r2, #0]
  return result;
 800264e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002652:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f002 021f 	and.w	r2, r2, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d184      	bne.n	800257e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002674:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8242 	beq.w	8002b1e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCC_OscConfig+0xc58>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	f000 8213 	beq.w	8002ace <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 8162 	bne.w	800297e <HAL_RCC_OscConfig+0xeca>
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026de:	601a      	str	r2, [r3, #0]
  return result;
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	461a      	mov	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe ff0c 	bl	800151c <HAL_GetTick>
 8002704:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	e00c      	b.n	8002724 <HAL_RCC_OscConfig+0xc70>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe ff04 	bl	800151c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1fd      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800272c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002748:	601a      	str	r2, [r3, #0]
  return result;
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002752:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d102      	bne.n	800276e <HAL_RCC_OscConfig+0xcba>
 8002768:	4bb0      	ldr	r3, [pc, #704]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e027      	b.n	80027be <HAL_RCC_OscConfig+0xd0a>
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	fa93 f2a3 	rbit	r2, r3
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800279c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	4b9c      	ldr	r3, [pc, #624]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ca:	6011      	str	r1, [r2, #0]
 80027cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	fa92 f1a2 	rbit	r1, r2
 80027da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027e2:	6011      	str	r1, [r2, #0]
  return result;
 80027e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d182      	bne.n	8002710 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280a:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	430b      	orrs	r3, r1
 800282c:	497f      	ldr	r1, [pc, #508]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800283a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002856:	601a      	str	r2, [r3, #0]
  return result;
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002860:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800286c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	461a      	mov	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fe50 	bl	800151c <HAL_GetTick>
 800287c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002880:	e009      	b.n	8002896 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fe4b 	bl	800151c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e144      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800289e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028ba:	601a      	str	r2, [r3, #0]
  return result;
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_RCC_OscConfig+0xe2c>
 80028da:	4b54      	ldr	r3, [pc, #336]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e027      	b.n	8002930 <HAL_RCC_OscConfig+0xe7c>
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800290e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002934:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002938:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002942:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	fa92 f1a2 	rbit	r1, r2
 800294c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002950:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002954:	6011      	str	r1, [r2, #0]
  return result;
 8002956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d082      	beq.n	8002882 <HAL_RCC_OscConfig+0xdce>
 800297c:	e0cf      	b.n	8002b1e <HAL_RCC_OscConfig+0x106a>
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800298a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029a2:	601a      	str	r2, [r3, #0]
  return result;
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	461a      	mov	r2, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fdaa 	bl	800151c <HAL_GetTick>
 80029c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029cc:	e009      	b.n	80029e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fda5 	bl	800151c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e09e      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a06:	601a      	str	r2, [r3, #0]
  return result;
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d104      	bne.n	8002a30 <HAL_RCC_OscConfig+0xf7c>
 8002a26:	4b01      	ldr	r3, [pc, #4]	; (8002a2c <HAL_RCC_OscConfig+0xf78>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e029      	b.n	8002a80 <HAL_RCC_OscConfig+0xfcc>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fa93 f2a3 	rbit	r2, r3
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x1078>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002aa4:	6011      	str	r1, [r2, #0]
  return result;
 8002aa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aaa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fab2 f282 	clz	r2, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f042 0220 	orr.w	r2, r2, #32
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f002 021f 	and.w	r2, r2, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d180      	bne.n	80029ce <HAL_RCC_OscConfig+0xf1a>
 8002acc:	e027      	b.n	8002b1e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e01e      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x1078>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10b      	bne.n	8002b1a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b09e      	sub	sp, #120	; 0x78
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e162      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b8d      	ldr	r3, [pc, #564]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	498b      	ldr	r1, [pc, #556]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e14a      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b82      	ldr	r3, [pc, #520]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	497f      	ldr	r1, [pc, #508]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80dc 	beq.w	8002d5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d13c      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xf6>
 8002bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xa6>
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0xc6>
 8002bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
 8002be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bfe:	fa92 f2a2 	rbit	r2, r2
 8002c02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f042 0220 	orr.w	r2, r2, #32
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f002 021f 	and.w	r2, r2, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d17b      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0f3      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d13c      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x178>
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x128>
 8002c52:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e00f      	b.n	8002c78 <HAL_RCC_ClockConfig+0x148>
 8002c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
 8002c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c80:	fa92 f2a2 	rbit	r2, r2
 8002c84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d13a      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b2      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x1a0>
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e00d      	b.n	8002cec <HAL_RCC_ClockConfig+0x1bc>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	2302      	movs	r3, #2
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2202      	movs	r2, #2
 8002cee:	61ba      	str	r2, [r7, #24]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	617a      	str	r2, [r7, #20]
  return result;
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	fab2 f282 	clz	r2, r2
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f042 0220 	orr.w	r2, r2, #32
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f002 021f 	and.w	r2, r2, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e079      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	491a      	ldr	r1, [pc, #104]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fbf6 	bl	800151c <HAL_GetTick>
 8002d30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fe fbf2 	bl	800151c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e061      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d214      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4906      	ldr	r1, [pc, #24]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e040      	b.n	8002e0e <HAL_RCC_ClockConfig+0x2de>
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_ClockConfig+0x2e8>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	491a      	ldr	r1, [pc, #104]	; (8002e18 <HAL_RCC_ClockConfig+0x2e8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4912      	ldr	r1, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x2e8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dd2:	f000 f829 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_RCC_ClockConfig+0x2e8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	22f0      	movs	r2, #240	; 0xf0
 8002de2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	fa92 f2a2 	rbit	r2, r2
 8002dea:	60fa      	str	r2, [r7, #12]
  return result;
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	fab2 f282 	clz	r2, r2
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	40d3      	lsrs	r3, r2
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x2ec>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <HAL_RCC_ClockConfig+0x2f0>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_RCC_ClockConfig+0x2f4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fb44 	bl	8001494 <HAL_InitTick>
  
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3778      	adds	r7, #120	; 0x78
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	0800497c 	.word	0x0800497c
 8002e20:	20000010 	.word	0x20000010
 8002e24:	20000014 	.word	0x20000014

08002e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b08b      	sub	sp, #44	; 0x2c
 8002e2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x30>
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x36>
 8002e56:	e03c      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e5a:	623b      	str	r3, [r7, #32]
      break;
 8002e5c:	e03c      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	607a      	str	r2, [r7, #4]
  return result;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	40d3      	lsrs	r3, r2
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	fa92 f2a2 	rbit	r2, r2
 8002e94:	60fa      	str	r2, [r7, #12]
  return result;
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	40d3      	lsrs	r3, r2
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	e004      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	623b      	str	r3, [r7, #32]
      break;
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ed4:	623b      	str	r3, [r7, #32]
      break;
 8002ed6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	372c      	adds	r7, #44	; 0x2c
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	005b8d80 	.word	0x005b8d80
 8002ef0:	08004994 	.word	0x08004994
 8002ef4:	080049a4 	.word	0x080049a4
 8002ef8:	003d0900 	.word	0x003d0900
 8002efc:	007a1200 	.word	0x007a1200

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000010 	.word	0x20000010

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f1e:	f7ff ffef 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f22:	4601      	mov	r1, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	603a      	str	r2, [r7, #0]
  return result;
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	40d3      	lsrs	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	0800498c 	.word	0x0800498c

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f62:	f7ff ffcd 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	fa92 f2a2 	rbit	r2, r2
 8002f7c:	603a      	str	r2, [r7, #0]
  return result;
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	fab2 f282 	clz	r2, r2
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	40d3      	lsrs	r3, r2
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	0800498c 	.word	0x0800498c

08002fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b092      	sub	sp, #72	; 0x48
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80d4 	beq.w	800316c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc4:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10e      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b4b      	ldr	r3, [pc, #300]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a4a      	ldr	r2, [pc, #296]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
 8002fdc:	4b48      	ldr	r3, [pc, #288]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b45      	ldr	r3, [pc, #276]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a41      	ldr	r2, [pc, #260]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fe fa89 	bl	800151c <HAL_GetTick>
 800300a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe fa85 	bl	800151c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b64      	cmp	r3, #100	; 0x64
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e14b      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8084 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003048:	429a      	cmp	r2, r3
 800304a:	d07c      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800304c:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	461a      	mov	r2, r3
 8003076:	2301      	movs	r3, #1
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04b      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fa35 	bl	800151c <HAL_GetTick>
 80030b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe fa31 	bl	800151c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0f5      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80030cc:	2302      	movs	r3, #2
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
 80030d8:	2302      	movs	r3, #2
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	61fb      	str	r3, [r7, #28]
  return result;
 80030e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d108      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030fa:	4b01      	ldr	r3, [pc, #4]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	e00d      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
 8003108:	10908100 	.word	0x10908100
 800310c:	2302      	movs	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2202      	movs	r2, #2
 800311e:	613a      	str	r2, [r7, #16]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	fa92 f2a2 	rbit	r2, r2
 8003126:	60fa      	str	r2, [r7, #12]
  return result;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0b7      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003146:	4b5e      	ldr	r3, [pc, #376]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	495b      	ldr	r1, [pc, #364]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003154:	4313      	orrs	r3, r2
 8003156:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003158:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	f023 0203 	bic.w	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	494e      	ldr	r1, [pc, #312]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003186:	4313      	orrs	r3, r2
 8003188:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003196:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f023 0210 	bic.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4947      	ldr	r1, [pc, #284]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	493f      	ldr	r1, [pc, #252]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f023 0220 	bic.w	r2, r3, #32
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	4938      	ldr	r1, [pc, #224]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4930      	ldr	r1, [pc, #192]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800320e:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4929      	ldr	r1, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4921      	ldr	r1, [pc, #132]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800323a:	4313      	orrs	r3, r2
 800323c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	491a      	ldr	r1, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003258:	4313      	orrs	r3, r2
 800325a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	4912      	ldr	r1, [pc, #72]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003276:	4313      	orrs	r3, r2
 8003278:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	490b      	ldr	r1, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003294:	4313      	orrs	r3, r2
 8003296:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3748      	adds	r7, #72	; 0x48
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e040      	b.n	8003358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd ff8a 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f82c 	bl	8003360 <UART_SetConfig>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e022      	b.n	8003358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f956 	bl	80035cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f9dd 	bl	8003710 <UART_CheckIdleState>
 8003356:	4603      	mov	r3, r0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b8a      	ldr	r3, [pc, #552]	; (80035b4 <UART_SetConfig+0x254>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	430b      	orrs	r3, r1
 8003396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a78      	ldr	r2, [pc, #480]	; (80035b8 <UART_SetConfig+0x258>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d120      	bne.n	800341e <UART_SetConfig+0xbe>
 80033dc:	4b77      	ldr	r3, [pc, #476]	; (80035bc <UART_SetConfig+0x25c>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d817      	bhi.n	8003418 <UART_SetConfig+0xb8>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <UART_SetConfig+0x90>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	0800340d 	.word	0x0800340d
 80033f8:	08003413 	.word	0x08003413
 80033fc:	08003407 	.word	0x08003407
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e01d      	b.n	8003442 <UART_SetConfig+0xe2>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e01a      	b.n	8003442 <UART_SetConfig+0xe2>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e017      	b.n	8003442 <UART_SetConfig+0xe2>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e014      	b.n	8003442 <UART_SetConfig+0xe2>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e011      	b.n	8003442 <UART_SetConfig+0xe2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <UART_SetConfig+0x260>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <UART_SetConfig+0xce>
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e009      	b.n	8003442 <UART_SetConfig+0xe2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a64      	ldr	r2, [pc, #400]	; (80035c4 <UART_SetConfig+0x264>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d102      	bne.n	800343e <UART_SetConfig+0xde>
 8003438:	2300      	movs	r3, #0
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e001      	b.n	8003442 <UART_SetConfig+0xe2>
 800343e:	2310      	movs	r3, #16
 8003440:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344a:	d15a      	bne.n	8003502 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800344c:	7ffb      	ldrb	r3, [r7, #31]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d827      	bhi.n	80034a2 <UART_SetConfig+0x142>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <UART_SetConfig+0xf8>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	0800347d 	.word	0x0800347d
 800345c:	08003485 	.word	0x08003485
 8003460:	0800348d 	.word	0x0800348d
 8003464:	080034a3 	.word	0x080034a3
 8003468:	08003493 	.word	0x08003493
 800346c:	080034a3 	.word	0x080034a3
 8003470:	080034a3 	.word	0x080034a3
 8003474:	080034a3 	.word	0x080034a3
 8003478:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7ff fd4c 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8003480:	61b8      	str	r0, [r7, #24]
        break;
 8003482:	e013      	b.n	80034ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7ff fd6a 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 8003488:	61b8      	str	r0, [r7, #24]
        break;
 800348a:	e00f      	b.n	80034ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <UART_SetConfig+0x268>)
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e00c      	b.n	80034ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7ff fcc9 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8003496:	61b8      	str	r0, [r7, #24]
        break;
 8003498:	e008      	b.n	80034ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	61bb      	str	r3, [r7, #24]
        break;
 80034a0:	e004      	b.n	80034ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	77bb      	strb	r3, [r7, #30]
        break;
 80034aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d074      	beq.n	800359c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	005a      	lsls	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	441a      	add	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	d916      	bls.n	80034fc <UART_SetConfig+0x19c>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d212      	bcs.n	80034fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f023 030f 	bic.w	r3, r3, #15
 80034de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	89fb      	ldrh	r3, [r7, #14]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	89fa      	ldrh	r2, [r7, #14]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	e04f      	b.n	800359c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	77bb      	strb	r3, [r7, #30]
 8003500:	e04c      	b.n	800359c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d828      	bhi.n	800355a <UART_SetConfig+0x1fa>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x1b0>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003535 	.word	0x08003535
 8003514:	0800353d 	.word	0x0800353d
 8003518:	08003545 	.word	0x08003545
 800351c:	0800355b 	.word	0x0800355b
 8003520:	0800354b 	.word	0x0800354b
 8003524:	0800355b 	.word	0x0800355b
 8003528:	0800355b 	.word	0x0800355b
 800352c:	0800355b 	.word	0x0800355b
 8003530:	08003553 	.word	0x08003553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7ff fcf0 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8003538:	61b8      	str	r0, [r7, #24]
        break;
 800353a:	e013      	b.n	8003564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7ff fd0e 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 8003540:	61b8      	str	r0, [r7, #24]
        break;
 8003542:	e00f      	b.n	8003564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003544:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <UART_SetConfig+0x268>)
 8003546:	61bb      	str	r3, [r7, #24]
        break;
 8003548:	e00c      	b.n	8003564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354a:	f7ff fc6d 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 800354e:	61b8      	str	r0, [r7, #24]
        break;
 8003550:	e008      	b.n	8003564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e004      	b.n	8003564 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	77bb      	strb	r3, [r7, #30]
        break;
 8003562:	bf00      	nop
    }

    if (pclk != 0U)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d018      	beq.n	800359c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085a      	lsrs	r2, r3, #1
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b0f      	cmp	r3, #15
 8003582:	d909      	bls.n	8003598 <UART_SetConfig+0x238>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d205      	bcs.n	8003598 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e001      	b.n	800359c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	efff69f3 	.word	0xefff69f3
 80035b8:	40013800 	.word	0x40013800
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40004800 	.word	0x40004800
 80035c8:	007a1200 	.word	0x007a1200

080035cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ca:	d10a      	bne.n	80036e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b098      	sub	sp, #96	; 0x60
 8003714:	af02      	add	r7, sp, #8
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003720:	f7fd fefc 	bl	800151c <HAL_GetTick>
 8003724:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d12e      	bne.n	8003792 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f88c 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d021      	beq.n	8003792 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
 800376e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e062      	b.n	8003858 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d149      	bne.n	8003834 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f856 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03c      	beq.n	8003834 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	623b      	str	r3, [r7, #32]
   return(result);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
 80037da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380c:	61fa      	str	r2, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	617b      	str	r3, [r7, #20]
   return(result);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e011      	b.n	8003858 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3758      	adds	r7, #88	; 0x58
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003870:	e049      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d045      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fd fe4f 	bl	800151c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <UART_WaitOnFlagUntilTimeout+0x30>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e048      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d031      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d110      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2208      	movs	r2, #8
 80038b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f838 	bl	800392e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2208      	movs	r2, #8
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e029      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d111      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f81e 	bl	800392e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d0a6      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392e:	b480      	push	{r7}
 8003930:	b095      	sub	sp, #84	; 0x54
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
 8003956:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800395a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e6      	bne.n	8003936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	61fb      	str	r3, [r7, #28]
   return(result);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d118      	bne.n	80039d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0310 	bic.w	r3, r3, #16
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	613b      	str	r3, [r7, #16]
   return(result);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e6      	bne.n	80039a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039ea:	bf00      	nop
 80039ec:	3754      	adds	r7, #84	; 0x54
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <__errno>:
 80039f8:	4b01      	ldr	r3, [pc, #4]	; (8003a00 <__errno+0x8>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	2000001c 	.word	0x2000001c

08003a04 <__libc_init_array>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4d0d      	ldr	r5, [pc, #52]	; (8003a3c <__libc_init_array+0x38>)
 8003a08:	4c0d      	ldr	r4, [pc, #52]	; (8003a40 <__libc_init_array+0x3c>)
 8003a0a:	1b64      	subs	r4, r4, r5
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	2600      	movs	r6, #0
 8003a10:	42a6      	cmp	r6, r4
 8003a12:	d109      	bne.n	8003a28 <__libc_init_array+0x24>
 8003a14:	4d0b      	ldr	r5, [pc, #44]	; (8003a44 <__libc_init_array+0x40>)
 8003a16:	4c0c      	ldr	r4, [pc, #48]	; (8003a48 <__libc_init_array+0x44>)
 8003a18:	f000 fc9c 	bl	8004354 <_init>
 8003a1c:	1b64      	subs	r4, r4, r5
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	2600      	movs	r6, #0
 8003a22:	42a6      	cmp	r6, r4
 8003a24:	d105      	bne.n	8003a32 <__libc_init_array+0x2e>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2c:	4798      	blx	r3
 8003a2e:	3601      	adds	r6, #1
 8003a30:	e7ee      	b.n	8003a10 <__libc_init_array+0xc>
 8003a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a36:	4798      	blx	r3
 8003a38:	3601      	adds	r6, #1
 8003a3a:	e7f2      	b.n	8003a22 <__libc_init_array+0x1e>
 8003a3c:	080049e8 	.word	0x080049e8
 8003a40:	080049e8 	.word	0x080049e8
 8003a44:	080049e8 	.word	0x080049e8
 8003a48:	080049ec 	.word	0x080049ec

08003a4c <memset>:
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <siprintf>:
 8003a5c:	b40e      	push	{r1, r2, r3}
 8003a5e:	b500      	push	{lr}
 8003a60:	b09c      	sub	sp, #112	; 0x70
 8003a62:	ab1d      	add	r3, sp, #116	; 0x74
 8003a64:	9002      	str	r0, [sp, #8]
 8003a66:	9006      	str	r0, [sp, #24]
 8003a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a6c:	4809      	ldr	r0, [pc, #36]	; (8003a94 <siprintf+0x38>)
 8003a6e:	9107      	str	r1, [sp, #28]
 8003a70:	9104      	str	r1, [sp, #16]
 8003a72:	4909      	ldr	r1, [pc, #36]	; (8003a98 <siprintf+0x3c>)
 8003a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a78:	9105      	str	r1, [sp, #20]
 8003a7a:	6800      	ldr	r0, [r0, #0]
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	a902      	add	r1, sp, #8
 8003a80:	f000 f876 	bl	8003b70 <_svfiprintf_r>
 8003a84:	9b02      	ldr	r3, [sp, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	b01c      	add	sp, #112	; 0x70
 8003a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a90:	b003      	add	sp, #12
 8003a92:	4770      	bx	lr
 8003a94:	2000001c 	.word	0x2000001c
 8003a98:	ffff0208 	.word	0xffff0208

08003a9c <strcat>:
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	7814      	ldrb	r4, [r2, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	3201      	adds	r2, #1
 8003aa6:	2c00      	cmp	r4, #0
 8003aa8:	d1fa      	bne.n	8003aa0 <strcat+0x4>
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ab0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d1f9      	bne.n	8003aac <strcat+0x10>
 8003ab8:	bd10      	pop	{r4, pc}

08003aba <__ssputs_r>:
 8003aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abe:	688e      	ldr	r6, [r1, #8]
 8003ac0:	429e      	cmp	r6, r3
 8003ac2:	4682      	mov	sl, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	4690      	mov	r8, r2
 8003ac8:	461f      	mov	r7, r3
 8003aca:	d838      	bhi.n	8003b3e <__ssputs_r+0x84>
 8003acc:	898a      	ldrh	r2, [r1, #12]
 8003ace:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ad2:	d032      	beq.n	8003b3a <__ssputs_r+0x80>
 8003ad4:	6825      	ldr	r5, [r4, #0]
 8003ad6:	6909      	ldr	r1, [r1, #16]
 8003ad8:	eba5 0901 	sub.w	r9, r5, r1
 8003adc:	6965      	ldr	r5, [r4, #20]
 8003ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	444b      	add	r3, r9
 8003aea:	106d      	asrs	r5, r5, #1
 8003aec:	429d      	cmp	r5, r3
 8003aee:	bf38      	it	cc
 8003af0:	461d      	movcc	r5, r3
 8003af2:	0553      	lsls	r3, r2, #21
 8003af4:	d531      	bpl.n	8003b5a <__ssputs_r+0xa0>
 8003af6:	4629      	mov	r1, r5
 8003af8:	f000 fb62 	bl	80041c0 <_malloc_r>
 8003afc:	4606      	mov	r6, r0
 8003afe:	b950      	cbnz	r0, 8003b16 <__ssputs_r+0x5c>
 8003b00:	230c      	movs	r3, #12
 8003b02:	f8ca 3000 	str.w	r3, [sl]
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b16:	6921      	ldr	r1, [r4, #16]
 8003b18:	464a      	mov	r2, r9
 8003b1a:	f000 fabd 	bl	8004098 <memcpy>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	6126      	str	r6, [r4, #16]
 8003b2c:	6165      	str	r5, [r4, #20]
 8003b2e:	444e      	add	r6, r9
 8003b30:	eba5 0509 	sub.w	r5, r5, r9
 8003b34:	6026      	str	r6, [r4, #0]
 8003b36:	60a5      	str	r5, [r4, #8]
 8003b38:	463e      	mov	r6, r7
 8003b3a:	42be      	cmp	r6, r7
 8003b3c:	d900      	bls.n	8003b40 <__ssputs_r+0x86>
 8003b3e:	463e      	mov	r6, r7
 8003b40:	6820      	ldr	r0, [r4, #0]
 8003b42:	4632      	mov	r2, r6
 8003b44:	4641      	mov	r1, r8
 8003b46:	f000 fab5 	bl	80040b4 <memmove>
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	1b9b      	subs	r3, r3, r6
 8003b4e:	60a3      	str	r3, [r4, #8]
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	4433      	add	r3, r6
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	2000      	movs	r0, #0
 8003b58:	e7db      	b.n	8003b12 <__ssputs_r+0x58>
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	f000 fba4 	bl	80042a8 <_realloc_r>
 8003b60:	4606      	mov	r6, r0
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d1e1      	bne.n	8003b2a <__ssputs_r+0x70>
 8003b66:	6921      	ldr	r1, [r4, #16]
 8003b68:	4650      	mov	r0, sl
 8003b6a:	f000 fabd 	bl	80040e8 <_free_r>
 8003b6e:	e7c7      	b.n	8003b00 <__ssputs_r+0x46>

08003b70 <_svfiprintf_r>:
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	4698      	mov	r8, r3
 8003b76:	898b      	ldrh	r3, [r1, #12]
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	b09d      	sub	sp, #116	; 0x74
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	460d      	mov	r5, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	d50e      	bpl.n	8003ba2 <_svfiprintf_r+0x32>
 8003b84:	690b      	ldr	r3, [r1, #16]
 8003b86:	b963      	cbnz	r3, 8003ba2 <_svfiprintf_r+0x32>
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	f000 fb19 	bl	80041c0 <_malloc_r>
 8003b8e:	6028      	str	r0, [r5, #0]
 8003b90:	6128      	str	r0, [r5, #16]
 8003b92:	b920      	cbnz	r0, 8003b9e <_svfiprintf_r+0x2e>
 8003b94:	230c      	movs	r3, #12
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	e0d1      	b.n	8003d42 <_svfiprintf_r+0x1d2>
 8003b9e:	2340      	movs	r3, #64	; 0x40
 8003ba0:	616b      	str	r3, [r5, #20]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bb0:	2330      	movs	r3, #48	; 0x30
 8003bb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d5c <_svfiprintf_r+0x1ec>
 8003bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bba:	f04f 0901 	mov.w	r9, #1
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	469a      	mov	sl, r3
 8003bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc6:	b10a      	cbz	r2, 8003bcc <_svfiprintf_r+0x5c>
 8003bc8:	2a25      	cmp	r2, #37	; 0x25
 8003bca:	d1f9      	bne.n	8003bc0 <_svfiprintf_r+0x50>
 8003bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8003bd0:	d00b      	beq.n	8003bea <_svfiprintf_r+0x7a>
 8003bd2:	465b      	mov	r3, fp
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	4638      	mov	r0, r7
 8003bda:	f7ff ff6e 	bl	8003aba <__ssputs_r>
 8003bde:	3001      	adds	r0, #1
 8003be0:	f000 80aa 	beq.w	8003d38 <_svfiprintf_r+0x1c8>
 8003be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003be6:	445a      	add	r2, fp
 8003be8:	9209      	str	r2, [sp, #36]	; 0x24
 8003bea:	f89a 3000 	ldrb.w	r3, [sl]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a2 	beq.w	8003d38 <_svfiprintf_r+0x1c8>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bfe:	f10a 0a01 	add.w	sl, sl, #1
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	9307      	str	r3, [sp, #28]
 8003c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c0c:	4654      	mov	r4, sl
 8003c0e:	2205      	movs	r2, #5
 8003c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c14:	4851      	ldr	r0, [pc, #324]	; (8003d5c <_svfiprintf_r+0x1ec>)
 8003c16:	f7fc faf3 	bl	8000200 <memchr>
 8003c1a:	9a04      	ldr	r2, [sp, #16]
 8003c1c:	b9d8      	cbnz	r0, 8003c56 <_svfiprintf_r+0xe6>
 8003c1e:	06d0      	lsls	r0, r2, #27
 8003c20:	bf44      	itt	mi
 8003c22:	2320      	movmi	r3, #32
 8003c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c28:	0711      	lsls	r1, r2, #28
 8003c2a:	bf44      	itt	mi
 8003c2c:	232b      	movmi	r3, #43	; 0x2b
 8003c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c32:	f89a 3000 	ldrb.w	r3, [sl]
 8003c36:	2b2a      	cmp	r3, #42	; 0x2a
 8003c38:	d015      	beq.n	8003c66 <_svfiprintf_r+0xf6>
 8003c3a:	9a07      	ldr	r2, [sp, #28]
 8003c3c:	4654      	mov	r4, sl
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f04f 0c0a 	mov.w	ip, #10
 8003c44:	4621      	mov	r1, r4
 8003c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c4a:	3b30      	subs	r3, #48	; 0x30
 8003c4c:	2b09      	cmp	r3, #9
 8003c4e:	d94e      	bls.n	8003cee <_svfiprintf_r+0x17e>
 8003c50:	b1b0      	cbz	r0, 8003c80 <_svfiprintf_r+0x110>
 8003c52:	9207      	str	r2, [sp, #28]
 8003c54:	e014      	b.n	8003c80 <_svfiprintf_r+0x110>
 8003c56:	eba0 0308 	sub.w	r3, r0, r8
 8003c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	9304      	str	r3, [sp, #16]
 8003c62:	46a2      	mov	sl, r4
 8003c64:	e7d2      	b.n	8003c0c <_svfiprintf_r+0x9c>
 8003c66:	9b03      	ldr	r3, [sp, #12]
 8003c68:	1d19      	adds	r1, r3, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	9103      	str	r1, [sp, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfbb      	ittet	lt
 8003c72:	425b      	neglt	r3, r3
 8003c74:	f042 0202 	orrlt.w	r2, r2, #2
 8003c78:	9307      	strge	r3, [sp, #28]
 8003c7a:	9307      	strlt	r3, [sp, #28]
 8003c7c:	bfb8      	it	lt
 8003c7e:	9204      	strlt	r2, [sp, #16]
 8003c80:	7823      	ldrb	r3, [r4, #0]
 8003c82:	2b2e      	cmp	r3, #46	; 0x2e
 8003c84:	d10c      	bne.n	8003ca0 <_svfiprintf_r+0x130>
 8003c86:	7863      	ldrb	r3, [r4, #1]
 8003c88:	2b2a      	cmp	r3, #42	; 0x2a
 8003c8a:	d135      	bne.n	8003cf8 <_svfiprintf_r+0x188>
 8003c8c:	9b03      	ldr	r3, [sp, #12]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	9203      	str	r2, [sp, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bfb8      	it	lt
 8003c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c9c:	3402      	adds	r4, #2
 8003c9e:	9305      	str	r3, [sp, #20]
 8003ca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d6c <_svfiprintf_r+0x1fc>
 8003ca4:	7821      	ldrb	r1, [r4, #0]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	4650      	mov	r0, sl
 8003caa:	f7fc faa9 	bl	8000200 <memchr>
 8003cae:	b140      	cbz	r0, 8003cc2 <_svfiprintf_r+0x152>
 8003cb0:	2340      	movs	r3, #64	; 0x40
 8003cb2:	eba0 000a 	sub.w	r0, r0, sl
 8003cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8003cba:	9b04      	ldr	r3, [sp, #16]
 8003cbc:	4303      	orrs	r3, r0
 8003cbe:	3401      	adds	r4, #1
 8003cc0:	9304      	str	r3, [sp, #16]
 8003cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc6:	4826      	ldr	r0, [pc, #152]	; (8003d60 <_svfiprintf_r+0x1f0>)
 8003cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ccc:	2206      	movs	r2, #6
 8003cce:	f7fc fa97 	bl	8000200 <memchr>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d038      	beq.n	8003d48 <_svfiprintf_r+0x1d8>
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <_svfiprintf_r+0x1f4>)
 8003cd8:	bb1b      	cbnz	r3, 8003d22 <_svfiprintf_r+0x1b2>
 8003cda:	9b03      	ldr	r3, [sp, #12]
 8003cdc:	3307      	adds	r3, #7
 8003cde:	f023 0307 	bic.w	r3, r3, #7
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	9303      	str	r3, [sp, #12]
 8003ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce8:	4433      	add	r3, r6
 8003cea:	9309      	str	r3, [sp, #36]	; 0x24
 8003cec:	e767      	b.n	8003bbe <_svfiprintf_r+0x4e>
 8003cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	e7a5      	b.n	8003c44 <_svfiprintf_r+0xd4>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	3401      	adds	r4, #1
 8003cfc:	9305      	str	r3, [sp, #20]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f04f 0c0a 	mov.w	ip, #10
 8003d04:	4620      	mov	r0, r4
 8003d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d0a:	3a30      	subs	r2, #48	; 0x30
 8003d0c:	2a09      	cmp	r2, #9
 8003d0e:	d903      	bls.n	8003d18 <_svfiprintf_r+0x1a8>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0c5      	beq.n	8003ca0 <_svfiprintf_r+0x130>
 8003d14:	9105      	str	r1, [sp, #20]
 8003d16:	e7c3      	b.n	8003ca0 <_svfiprintf_r+0x130>
 8003d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e7f0      	b.n	8003d04 <_svfiprintf_r+0x194>
 8003d22:	ab03      	add	r3, sp, #12
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	462a      	mov	r2, r5
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <_svfiprintf_r+0x1f8>)
 8003d2a:	a904      	add	r1, sp, #16
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	f3af 8000 	nop.w
 8003d32:	1c42      	adds	r2, r0, #1
 8003d34:	4606      	mov	r6, r0
 8003d36:	d1d6      	bne.n	8003ce6 <_svfiprintf_r+0x176>
 8003d38:	89ab      	ldrh	r3, [r5, #12]
 8003d3a:	065b      	lsls	r3, r3, #25
 8003d3c:	f53f af2c 	bmi.w	8003b98 <_svfiprintf_r+0x28>
 8003d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d42:	b01d      	add	sp, #116	; 0x74
 8003d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d48:	ab03      	add	r3, sp, #12
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	462a      	mov	r2, r5
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <_svfiprintf_r+0x1f8>)
 8003d50:	a904      	add	r1, sp, #16
 8003d52:	4638      	mov	r0, r7
 8003d54:	f000 f87a 	bl	8003e4c <_printf_i>
 8003d58:	e7eb      	b.n	8003d32 <_svfiprintf_r+0x1c2>
 8003d5a:	bf00      	nop
 8003d5c:	080049b4 	.word	0x080049b4
 8003d60:	080049be 	.word	0x080049be
 8003d64:	00000000 	.word	0x00000000
 8003d68:	08003abb 	.word	0x08003abb
 8003d6c:	080049ba 	.word	0x080049ba

08003d70 <_printf_common>:
 8003d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d74:	4616      	mov	r6, r2
 8003d76:	4699      	mov	r9, r3
 8003d78:	688a      	ldr	r2, [r1, #8]
 8003d7a:	690b      	ldr	r3, [r1, #16]
 8003d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bfb8      	it	lt
 8003d84:	4613      	movlt	r3, r2
 8003d86:	6033      	str	r3, [r6, #0]
 8003d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d8c:	4607      	mov	r7, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	b10a      	cbz	r2, 8003d96 <_printf_common+0x26>
 8003d92:	3301      	adds	r3, #1
 8003d94:	6033      	str	r3, [r6, #0]
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	0699      	lsls	r1, r3, #26
 8003d9a:	bf42      	ittt	mi
 8003d9c:	6833      	ldrmi	r3, [r6, #0]
 8003d9e:	3302      	addmi	r3, #2
 8003da0:	6033      	strmi	r3, [r6, #0]
 8003da2:	6825      	ldr	r5, [r4, #0]
 8003da4:	f015 0506 	ands.w	r5, r5, #6
 8003da8:	d106      	bne.n	8003db8 <_printf_common+0x48>
 8003daa:	f104 0a19 	add.w	sl, r4, #25
 8003dae:	68e3      	ldr	r3, [r4, #12]
 8003db0:	6832      	ldr	r2, [r6, #0]
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	42ab      	cmp	r3, r5
 8003db6:	dc26      	bgt.n	8003e06 <_printf_common+0x96>
 8003db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dbc:	1e13      	subs	r3, r2, #0
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	bf18      	it	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	0692      	lsls	r2, r2, #26
 8003dc6:	d42b      	bmi.n	8003e20 <_printf_common+0xb0>
 8003dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dcc:	4649      	mov	r1, r9
 8003dce:	4638      	mov	r0, r7
 8003dd0:	47c0      	blx	r8
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d01e      	beq.n	8003e14 <_printf_common+0xa4>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	68e5      	ldr	r5, [r4, #12]
 8003dda:	6832      	ldr	r2, [r6, #0]
 8003ddc:	f003 0306 	and.w	r3, r3, #6
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	bf08      	it	eq
 8003de4:	1aad      	subeq	r5, r5, r2
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	6922      	ldr	r2, [r4, #16]
 8003dea:	bf0c      	ite	eq
 8003dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003df0:	2500      	movne	r5, #0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	bfc4      	itt	gt
 8003df6:	1a9b      	subgt	r3, r3, r2
 8003df8:	18ed      	addgt	r5, r5, r3
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	341a      	adds	r4, #26
 8003dfe:	42b5      	cmp	r5, r6
 8003e00:	d11a      	bne.n	8003e38 <_printf_common+0xc8>
 8003e02:	2000      	movs	r0, #0
 8003e04:	e008      	b.n	8003e18 <_printf_common+0xa8>
 8003e06:	2301      	movs	r3, #1
 8003e08:	4652      	mov	r2, sl
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	47c0      	blx	r8
 8003e10:	3001      	adds	r0, #1
 8003e12:	d103      	bne.n	8003e1c <_printf_common+0xac>
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1c:	3501      	adds	r5, #1
 8003e1e:	e7c6      	b.n	8003dae <_printf_common+0x3e>
 8003e20:	18e1      	adds	r1, r4, r3
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	2030      	movs	r0, #48	; 0x30
 8003e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e2a:	4422      	add	r2, r4
 8003e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e34:	3302      	adds	r3, #2
 8003e36:	e7c7      	b.n	8003dc8 <_printf_common+0x58>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	4638      	mov	r0, r7
 8003e40:	47c0      	blx	r8
 8003e42:	3001      	adds	r0, #1
 8003e44:	d0e6      	beq.n	8003e14 <_printf_common+0xa4>
 8003e46:	3601      	adds	r6, #1
 8003e48:	e7d9      	b.n	8003dfe <_printf_common+0x8e>
	...

08003e4c <_printf_i>:
 8003e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	7e0f      	ldrb	r7, [r1, #24]
 8003e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e54:	2f78      	cmp	r7, #120	; 0x78
 8003e56:	4691      	mov	r9, r2
 8003e58:	4680      	mov	r8, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	469a      	mov	sl, r3
 8003e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e62:	d807      	bhi.n	8003e74 <_printf_i+0x28>
 8003e64:	2f62      	cmp	r7, #98	; 0x62
 8003e66:	d80a      	bhi.n	8003e7e <_printf_i+0x32>
 8003e68:	2f00      	cmp	r7, #0
 8003e6a:	f000 80d8 	beq.w	800401e <_printf_i+0x1d2>
 8003e6e:	2f58      	cmp	r7, #88	; 0x58
 8003e70:	f000 80a3 	beq.w	8003fba <_printf_i+0x16e>
 8003e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e7c:	e03a      	b.n	8003ef4 <_printf_i+0xa8>
 8003e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e82:	2b15      	cmp	r3, #21
 8003e84:	d8f6      	bhi.n	8003e74 <_printf_i+0x28>
 8003e86:	a101      	add	r1, pc, #4	; (adr r1, 8003e8c <_printf_i+0x40>)
 8003e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e8c:	08003ee5 	.word	0x08003ee5
 8003e90:	08003ef9 	.word	0x08003ef9
 8003e94:	08003e75 	.word	0x08003e75
 8003e98:	08003e75 	.word	0x08003e75
 8003e9c:	08003e75 	.word	0x08003e75
 8003ea0:	08003e75 	.word	0x08003e75
 8003ea4:	08003ef9 	.word	0x08003ef9
 8003ea8:	08003e75 	.word	0x08003e75
 8003eac:	08003e75 	.word	0x08003e75
 8003eb0:	08003e75 	.word	0x08003e75
 8003eb4:	08003e75 	.word	0x08003e75
 8003eb8:	08004005 	.word	0x08004005
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003fe7 	.word	0x08003fe7
 8003ec4:	08003e75 	.word	0x08003e75
 8003ec8:	08003e75 	.word	0x08003e75
 8003ecc:	08004027 	.word	0x08004027
 8003ed0:	08003e75 	.word	0x08003e75
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	08003e75 	.word	0x08003e75
 8003edc:	08003e75 	.word	0x08003e75
 8003ee0:	08003fef 	.word	0x08003fef
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	1d1a      	adds	r2, r3, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	602a      	str	r2, [r5, #0]
 8003eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0a3      	b.n	8004040 <_printf_i+0x1f4>
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	6829      	ldr	r1, [r5, #0]
 8003efc:	0606      	lsls	r6, r0, #24
 8003efe:	f101 0304 	add.w	r3, r1, #4
 8003f02:	d50a      	bpl.n	8003f1a <_printf_i+0xce>
 8003f04:	680e      	ldr	r6, [r1, #0]
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	da03      	bge.n	8003f14 <_printf_i+0xc8>
 8003f0c:	232d      	movs	r3, #45	; 0x2d
 8003f0e:	4276      	negs	r6, r6
 8003f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f14:	485e      	ldr	r0, [pc, #376]	; (8004090 <_printf_i+0x244>)
 8003f16:	230a      	movs	r3, #10
 8003f18:	e019      	b.n	8003f4e <_printf_i+0x102>
 8003f1a:	680e      	ldr	r6, [r1, #0]
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f22:	bf18      	it	ne
 8003f24:	b236      	sxthne	r6, r6
 8003f26:	e7ef      	b.n	8003f08 <_printf_i+0xbc>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	6820      	ldr	r0, [r4, #0]
 8003f2c:	1d19      	adds	r1, r3, #4
 8003f2e:	6029      	str	r1, [r5, #0]
 8003f30:	0601      	lsls	r1, r0, #24
 8003f32:	d501      	bpl.n	8003f38 <_printf_i+0xec>
 8003f34:	681e      	ldr	r6, [r3, #0]
 8003f36:	e002      	b.n	8003f3e <_printf_i+0xf2>
 8003f38:	0646      	lsls	r6, r0, #25
 8003f3a:	d5fb      	bpl.n	8003f34 <_printf_i+0xe8>
 8003f3c:	881e      	ldrh	r6, [r3, #0]
 8003f3e:	4854      	ldr	r0, [pc, #336]	; (8004090 <_printf_i+0x244>)
 8003f40:	2f6f      	cmp	r7, #111	; 0x6f
 8003f42:	bf0c      	ite	eq
 8003f44:	2308      	moveq	r3, #8
 8003f46:	230a      	movne	r3, #10
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f4e:	6865      	ldr	r5, [r4, #4]
 8003f50:	60a5      	str	r5, [r4, #8]
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	bfa2      	ittt	ge
 8003f56:	6821      	ldrge	r1, [r4, #0]
 8003f58:	f021 0104 	bicge.w	r1, r1, #4
 8003f5c:	6021      	strge	r1, [r4, #0]
 8003f5e:	b90e      	cbnz	r6, 8003f64 <_printf_i+0x118>
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	d04d      	beq.n	8004000 <_printf_i+0x1b4>
 8003f64:	4615      	mov	r5, r2
 8003f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8003f6e:	5dc7      	ldrb	r7, [r0, r7]
 8003f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f74:	4637      	mov	r7, r6
 8003f76:	42bb      	cmp	r3, r7
 8003f78:	460e      	mov	r6, r1
 8003f7a:	d9f4      	bls.n	8003f66 <_printf_i+0x11a>
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d10b      	bne.n	8003f98 <_printf_i+0x14c>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	07de      	lsls	r6, r3, #31
 8003f84:	d508      	bpl.n	8003f98 <_printf_i+0x14c>
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	6861      	ldr	r1, [r4, #4]
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	bfde      	ittt	le
 8003f8e:	2330      	movle	r3, #48	; 0x30
 8003f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f98:	1b52      	subs	r2, r2, r5
 8003f9a:	6122      	str	r2, [r4, #16]
 8003f9c:	f8cd a000 	str.w	sl, [sp]
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	aa03      	add	r2, sp, #12
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	f7ff fee2 	bl	8003d70 <_printf_common>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d14c      	bne.n	800404a <_printf_i+0x1fe>
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	b004      	add	sp, #16
 8003fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fba:	4835      	ldr	r0, [pc, #212]	; (8004090 <_printf_i+0x244>)
 8003fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fc0:	6829      	ldr	r1, [r5, #0]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fc8:	6029      	str	r1, [r5, #0]
 8003fca:	061d      	lsls	r5, r3, #24
 8003fcc:	d514      	bpl.n	8003ff8 <_printf_i+0x1ac>
 8003fce:	07df      	lsls	r7, r3, #31
 8003fd0:	bf44      	itt	mi
 8003fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8003fd6:	6023      	strmi	r3, [r4, #0]
 8003fd8:	b91e      	cbnz	r6, 8003fe2 <_printf_i+0x196>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	f023 0320 	bic.w	r3, r3, #32
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	e7b0      	b.n	8003f48 <_printf_i+0xfc>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	f043 0320 	orr.w	r3, r3, #32
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	2378      	movs	r3, #120	; 0x78
 8003ff0:	4828      	ldr	r0, [pc, #160]	; (8004094 <_printf_i+0x248>)
 8003ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ff6:	e7e3      	b.n	8003fc0 <_printf_i+0x174>
 8003ff8:	0659      	lsls	r1, r3, #25
 8003ffa:	bf48      	it	mi
 8003ffc:	b2b6      	uxthmi	r6, r6
 8003ffe:	e7e6      	b.n	8003fce <_printf_i+0x182>
 8004000:	4615      	mov	r5, r2
 8004002:	e7bb      	b.n	8003f7c <_printf_i+0x130>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	6826      	ldr	r6, [r4, #0]
 8004008:	6961      	ldr	r1, [r4, #20]
 800400a:	1d18      	adds	r0, r3, #4
 800400c:	6028      	str	r0, [r5, #0]
 800400e:	0635      	lsls	r5, r6, #24
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	d501      	bpl.n	8004018 <_printf_i+0x1cc>
 8004014:	6019      	str	r1, [r3, #0]
 8004016:	e002      	b.n	800401e <_printf_i+0x1d2>
 8004018:	0670      	lsls	r0, r6, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0x1c8>
 800401c:	8019      	strh	r1, [r3, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	6123      	str	r3, [r4, #16]
 8004022:	4615      	mov	r5, r2
 8004024:	e7ba      	b.n	8003f9c <_printf_i+0x150>
 8004026:	682b      	ldr	r3, [r5, #0]
 8004028:	1d1a      	adds	r2, r3, #4
 800402a:	602a      	str	r2, [r5, #0]
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	6862      	ldr	r2, [r4, #4]
 8004030:	2100      	movs	r1, #0
 8004032:	4628      	mov	r0, r5
 8004034:	f7fc f8e4 	bl	8000200 <memchr>
 8004038:	b108      	cbz	r0, 800403e <_printf_i+0x1f2>
 800403a:	1b40      	subs	r0, r0, r5
 800403c:	6060      	str	r0, [r4, #4]
 800403e:	6863      	ldr	r3, [r4, #4]
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	2300      	movs	r3, #0
 8004044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004048:	e7a8      	b.n	8003f9c <_printf_i+0x150>
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	462a      	mov	r2, r5
 800404e:	4649      	mov	r1, r9
 8004050:	4640      	mov	r0, r8
 8004052:	47d0      	blx	sl
 8004054:	3001      	adds	r0, #1
 8004056:	d0ab      	beq.n	8003fb0 <_printf_i+0x164>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	079b      	lsls	r3, r3, #30
 800405c:	d413      	bmi.n	8004086 <_printf_i+0x23a>
 800405e:	68e0      	ldr	r0, [r4, #12]
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	4298      	cmp	r0, r3
 8004064:	bfb8      	it	lt
 8004066:	4618      	movlt	r0, r3
 8004068:	e7a4      	b.n	8003fb4 <_printf_i+0x168>
 800406a:	2301      	movs	r3, #1
 800406c:	4632      	mov	r2, r6
 800406e:	4649      	mov	r1, r9
 8004070:	4640      	mov	r0, r8
 8004072:	47d0      	blx	sl
 8004074:	3001      	adds	r0, #1
 8004076:	d09b      	beq.n	8003fb0 <_printf_i+0x164>
 8004078:	3501      	adds	r5, #1
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	9903      	ldr	r1, [sp, #12]
 800407e:	1a5b      	subs	r3, r3, r1
 8004080:	42ab      	cmp	r3, r5
 8004082:	dcf2      	bgt.n	800406a <_printf_i+0x21e>
 8004084:	e7eb      	b.n	800405e <_printf_i+0x212>
 8004086:	2500      	movs	r5, #0
 8004088:	f104 0619 	add.w	r6, r4, #25
 800408c:	e7f5      	b.n	800407a <_printf_i+0x22e>
 800408e:	bf00      	nop
 8004090:	080049c5 	.word	0x080049c5
 8004094:	080049d6 	.word	0x080049d6

08004098 <memcpy>:
 8004098:	440a      	add	r2, r1
 800409a:	4291      	cmp	r1, r2
 800409c:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a0:	d100      	bne.n	80040a4 <memcpy+0xc>
 80040a2:	4770      	bx	lr
 80040a4:	b510      	push	{r4, lr}
 80040a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ae:	4291      	cmp	r1, r2
 80040b0:	d1f9      	bne.n	80040a6 <memcpy+0xe>
 80040b2:	bd10      	pop	{r4, pc}

080040b4 <memmove>:
 80040b4:	4288      	cmp	r0, r1
 80040b6:	b510      	push	{r4, lr}
 80040b8:	eb01 0402 	add.w	r4, r1, r2
 80040bc:	d902      	bls.n	80040c4 <memmove+0x10>
 80040be:	4284      	cmp	r4, r0
 80040c0:	4623      	mov	r3, r4
 80040c2:	d807      	bhi.n	80040d4 <memmove+0x20>
 80040c4:	1e43      	subs	r3, r0, #1
 80040c6:	42a1      	cmp	r1, r4
 80040c8:	d008      	beq.n	80040dc <memmove+0x28>
 80040ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040d2:	e7f8      	b.n	80040c6 <memmove+0x12>
 80040d4:	4402      	add	r2, r0
 80040d6:	4601      	mov	r1, r0
 80040d8:	428a      	cmp	r2, r1
 80040da:	d100      	bne.n	80040de <memmove+0x2a>
 80040dc:	bd10      	pop	{r4, pc}
 80040de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040e6:	e7f7      	b.n	80040d8 <memmove+0x24>

080040e8 <_free_r>:
 80040e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ea:	2900      	cmp	r1, #0
 80040ec:	d044      	beq.n	8004178 <_free_r+0x90>
 80040ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f2:	9001      	str	r0, [sp, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f1a1 0404 	sub.w	r4, r1, #4
 80040fa:	bfb8      	it	lt
 80040fc:	18e4      	addlt	r4, r4, r3
 80040fe:	f000 f913 	bl	8004328 <__malloc_lock>
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <_free_r+0x94>)
 8004104:	9801      	ldr	r0, [sp, #4]
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	b933      	cbnz	r3, 8004118 <_free_r+0x30>
 800410a:	6063      	str	r3, [r4, #4]
 800410c:	6014      	str	r4, [r2, #0]
 800410e:	b003      	add	sp, #12
 8004110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004114:	f000 b90e 	b.w	8004334 <__malloc_unlock>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d908      	bls.n	800412e <_free_r+0x46>
 800411c:	6825      	ldr	r5, [r4, #0]
 800411e:	1961      	adds	r1, r4, r5
 8004120:	428b      	cmp	r3, r1
 8004122:	bf01      	itttt	eq
 8004124:	6819      	ldreq	r1, [r3, #0]
 8004126:	685b      	ldreq	r3, [r3, #4]
 8004128:	1949      	addeq	r1, r1, r5
 800412a:	6021      	streq	r1, [r4, #0]
 800412c:	e7ed      	b.n	800410a <_free_r+0x22>
 800412e:	461a      	mov	r2, r3
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b10b      	cbz	r3, 8004138 <_free_r+0x50>
 8004134:	42a3      	cmp	r3, r4
 8004136:	d9fa      	bls.n	800412e <_free_r+0x46>
 8004138:	6811      	ldr	r1, [r2, #0]
 800413a:	1855      	adds	r5, r2, r1
 800413c:	42a5      	cmp	r5, r4
 800413e:	d10b      	bne.n	8004158 <_free_r+0x70>
 8004140:	6824      	ldr	r4, [r4, #0]
 8004142:	4421      	add	r1, r4
 8004144:	1854      	adds	r4, r2, r1
 8004146:	42a3      	cmp	r3, r4
 8004148:	6011      	str	r1, [r2, #0]
 800414a:	d1e0      	bne.n	800410e <_free_r+0x26>
 800414c:	681c      	ldr	r4, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	6053      	str	r3, [r2, #4]
 8004152:	4421      	add	r1, r4
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	e7da      	b.n	800410e <_free_r+0x26>
 8004158:	d902      	bls.n	8004160 <_free_r+0x78>
 800415a:	230c      	movs	r3, #12
 800415c:	6003      	str	r3, [r0, #0]
 800415e:	e7d6      	b.n	800410e <_free_r+0x26>
 8004160:	6825      	ldr	r5, [r4, #0]
 8004162:	1961      	adds	r1, r4, r5
 8004164:	428b      	cmp	r3, r1
 8004166:	bf04      	itt	eq
 8004168:	6819      	ldreq	r1, [r3, #0]
 800416a:	685b      	ldreq	r3, [r3, #4]
 800416c:	6063      	str	r3, [r4, #4]
 800416e:	bf04      	itt	eq
 8004170:	1949      	addeq	r1, r1, r5
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	6054      	str	r4, [r2, #4]
 8004176:	e7ca      	b.n	800410e <_free_r+0x26>
 8004178:	b003      	add	sp, #12
 800417a:	bd30      	pop	{r4, r5, pc}
 800417c:	200002f8 	.word	0x200002f8

08004180 <sbrk_aligned>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	4e0e      	ldr	r6, [pc, #56]	; (80041bc <sbrk_aligned+0x3c>)
 8004184:	460c      	mov	r4, r1
 8004186:	6831      	ldr	r1, [r6, #0]
 8004188:	4605      	mov	r5, r0
 800418a:	b911      	cbnz	r1, 8004192 <sbrk_aligned+0x12>
 800418c:	f000 f8bc 	bl	8004308 <_sbrk_r>
 8004190:	6030      	str	r0, [r6, #0]
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f000 f8b7 	bl	8004308 <_sbrk_r>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	d00a      	beq.n	80041b4 <sbrk_aligned+0x34>
 800419e:	1cc4      	adds	r4, r0, #3
 80041a0:	f024 0403 	bic.w	r4, r4, #3
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d007      	beq.n	80041b8 <sbrk_aligned+0x38>
 80041a8:	1a21      	subs	r1, r4, r0
 80041aa:	4628      	mov	r0, r5
 80041ac:	f000 f8ac 	bl	8004308 <_sbrk_r>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d101      	bne.n	80041b8 <sbrk_aligned+0x38>
 80041b4:	f04f 34ff 	mov.w	r4, #4294967295
 80041b8:	4620      	mov	r0, r4
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	200002fc 	.word	0x200002fc

080041c0 <_malloc_r>:
 80041c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c4:	1ccd      	adds	r5, r1, #3
 80041c6:	f025 0503 	bic.w	r5, r5, #3
 80041ca:	3508      	adds	r5, #8
 80041cc:	2d0c      	cmp	r5, #12
 80041ce:	bf38      	it	cc
 80041d0:	250c      	movcc	r5, #12
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	4607      	mov	r7, r0
 80041d6:	db01      	blt.n	80041dc <_malloc_r+0x1c>
 80041d8:	42a9      	cmp	r1, r5
 80041da:	d905      	bls.n	80041e8 <_malloc_r+0x28>
 80041dc:	230c      	movs	r3, #12
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	2600      	movs	r6, #0
 80041e2:	4630      	mov	r0, r6
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e8:	4e2e      	ldr	r6, [pc, #184]	; (80042a4 <_malloc_r+0xe4>)
 80041ea:	f000 f89d 	bl	8004328 <__malloc_lock>
 80041ee:	6833      	ldr	r3, [r6, #0]
 80041f0:	461c      	mov	r4, r3
 80041f2:	bb34      	cbnz	r4, 8004242 <_malloc_r+0x82>
 80041f4:	4629      	mov	r1, r5
 80041f6:	4638      	mov	r0, r7
 80041f8:	f7ff ffc2 	bl	8004180 <sbrk_aligned>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	4604      	mov	r4, r0
 8004200:	d14d      	bne.n	800429e <_malloc_r+0xde>
 8004202:	6834      	ldr	r4, [r6, #0]
 8004204:	4626      	mov	r6, r4
 8004206:	2e00      	cmp	r6, #0
 8004208:	d140      	bne.n	800428c <_malloc_r+0xcc>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	4631      	mov	r1, r6
 800420e:	4638      	mov	r0, r7
 8004210:	eb04 0803 	add.w	r8, r4, r3
 8004214:	f000 f878 	bl	8004308 <_sbrk_r>
 8004218:	4580      	cmp	r8, r0
 800421a:	d13a      	bne.n	8004292 <_malloc_r+0xd2>
 800421c:	6821      	ldr	r1, [r4, #0]
 800421e:	3503      	adds	r5, #3
 8004220:	1a6d      	subs	r5, r5, r1
 8004222:	f025 0503 	bic.w	r5, r5, #3
 8004226:	3508      	adds	r5, #8
 8004228:	2d0c      	cmp	r5, #12
 800422a:	bf38      	it	cc
 800422c:	250c      	movcc	r5, #12
 800422e:	4629      	mov	r1, r5
 8004230:	4638      	mov	r0, r7
 8004232:	f7ff ffa5 	bl	8004180 <sbrk_aligned>
 8004236:	3001      	adds	r0, #1
 8004238:	d02b      	beq.n	8004292 <_malloc_r+0xd2>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	442b      	add	r3, r5
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	e00e      	b.n	8004260 <_malloc_r+0xa0>
 8004242:	6822      	ldr	r2, [r4, #0]
 8004244:	1b52      	subs	r2, r2, r5
 8004246:	d41e      	bmi.n	8004286 <_malloc_r+0xc6>
 8004248:	2a0b      	cmp	r2, #11
 800424a:	d916      	bls.n	800427a <_malloc_r+0xba>
 800424c:	1961      	adds	r1, r4, r5
 800424e:	42a3      	cmp	r3, r4
 8004250:	6025      	str	r5, [r4, #0]
 8004252:	bf18      	it	ne
 8004254:	6059      	strne	r1, [r3, #4]
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	bf08      	it	eq
 800425a:	6031      	streq	r1, [r6, #0]
 800425c:	5162      	str	r2, [r4, r5]
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	4638      	mov	r0, r7
 8004262:	f104 060b 	add.w	r6, r4, #11
 8004266:	f000 f865 	bl	8004334 <__malloc_unlock>
 800426a:	f026 0607 	bic.w	r6, r6, #7
 800426e:	1d23      	adds	r3, r4, #4
 8004270:	1af2      	subs	r2, r6, r3
 8004272:	d0b6      	beq.n	80041e2 <_malloc_r+0x22>
 8004274:	1b9b      	subs	r3, r3, r6
 8004276:	50a3      	str	r3, [r4, r2]
 8004278:	e7b3      	b.n	80041e2 <_malloc_r+0x22>
 800427a:	6862      	ldr	r2, [r4, #4]
 800427c:	42a3      	cmp	r3, r4
 800427e:	bf0c      	ite	eq
 8004280:	6032      	streq	r2, [r6, #0]
 8004282:	605a      	strne	r2, [r3, #4]
 8004284:	e7ec      	b.n	8004260 <_malloc_r+0xa0>
 8004286:	4623      	mov	r3, r4
 8004288:	6864      	ldr	r4, [r4, #4]
 800428a:	e7b2      	b.n	80041f2 <_malloc_r+0x32>
 800428c:	4634      	mov	r4, r6
 800428e:	6876      	ldr	r6, [r6, #4]
 8004290:	e7b9      	b.n	8004206 <_malloc_r+0x46>
 8004292:	230c      	movs	r3, #12
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4638      	mov	r0, r7
 8004298:	f000 f84c 	bl	8004334 <__malloc_unlock>
 800429c:	e7a1      	b.n	80041e2 <_malloc_r+0x22>
 800429e:	6025      	str	r5, [r4, #0]
 80042a0:	e7de      	b.n	8004260 <_malloc_r+0xa0>
 80042a2:	bf00      	nop
 80042a4:	200002f8 	.word	0x200002f8

080042a8 <_realloc_r>:
 80042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ac:	4680      	mov	r8, r0
 80042ae:	4614      	mov	r4, r2
 80042b0:	460e      	mov	r6, r1
 80042b2:	b921      	cbnz	r1, 80042be <_realloc_r+0x16>
 80042b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	4611      	mov	r1, r2
 80042ba:	f7ff bf81 	b.w	80041c0 <_malloc_r>
 80042be:	b92a      	cbnz	r2, 80042cc <_realloc_r+0x24>
 80042c0:	f7ff ff12 	bl	80040e8 <_free_r>
 80042c4:	4625      	mov	r5, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042cc:	f000 f838 	bl	8004340 <_malloc_usable_size_r>
 80042d0:	4284      	cmp	r4, r0
 80042d2:	4607      	mov	r7, r0
 80042d4:	d802      	bhi.n	80042dc <_realloc_r+0x34>
 80042d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042da:	d812      	bhi.n	8004302 <_realloc_r+0x5a>
 80042dc:	4621      	mov	r1, r4
 80042de:	4640      	mov	r0, r8
 80042e0:	f7ff ff6e 	bl	80041c0 <_malloc_r>
 80042e4:	4605      	mov	r5, r0
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0ed      	beq.n	80042c6 <_realloc_r+0x1e>
 80042ea:	42bc      	cmp	r4, r7
 80042ec:	4622      	mov	r2, r4
 80042ee:	4631      	mov	r1, r6
 80042f0:	bf28      	it	cs
 80042f2:	463a      	movcs	r2, r7
 80042f4:	f7ff fed0 	bl	8004098 <memcpy>
 80042f8:	4631      	mov	r1, r6
 80042fa:	4640      	mov	r0, r8
 80042fc:	f7ff fef4 	bl	80040e8 <_free_r>
 8004300:	e7e1      	b.n	80042c6 <_realloc_r+0x1e>
 8004302:	4635      	mov	r5, r6
 8004304:	e7df      	b.n	80042c6 <_realloc_r+0x1e>
	...

08004308 <_sbrk_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4d06      	ldr	r5, [pc, #24]	; (8004324 <_sbrk_r+0x1c>)
 800430c:	2300      	movs	r3, #0
 800430e:	4604      	mov	r4, r0
 8004310:	4608      	mov	r0, r1
 8004312:	602b      	str	r3, [r5, #0]
 8004314:	f7fd f836 	bl	8001384 <_sbrk>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_sbrk_r+0x1a>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b103      	cbz	r3, 8004322 <_sbrk_r+0x1a>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	20000300 	.word	0x20000300

08004328 <__malloc_lock>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__malloc_lock+0x8>)
 800432a:	f000 b811 	b.w	8004350 <__retarget_lock_acquire_recursive>
 800432e:	bf00      	nop
 8004330:	20000304 	.word	0x20000304

08004334 <__malloc_unlock>:
 8004334:	4801      	ldr	r0, [pc, #4]	; (800433c <__malloc_unlock+0x8>)
 8004336:	f000 b80c 	b.w	8004352 <__retarget_lock_release_recursive>
 800433a:	bf00      	nop
 800433c:	20000304 	.word	0x20000304

08004340 <_malloc_usable_size_r>:
 8004340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004344:	1f18      	subs	r0, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	bfbc      	itt	lt
 800434a:	580b      	ldrlt	r3, [r1, r0]
 800434c:	18c0      	addlt	r0, r0, r3
 800434e:	4770      	bx	lr

08004350 <__retarget_lock_acquire_recursive>:
 8004350:	4770      	bx	lr

08004352 <__retarget_lock_release_recursive>:
 8004352:	4770      	bx	lr

08004354 <_init>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	bf00      	nop
 8004358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435a:	bc08      	pop	{r3}
 800435c:	469e      	mov	lr, r3
 800435e:	4770      	bx	lr

08004360 <_fini>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	bf00      	nop
 8004364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004366:	bc08      	pop	{r3}
 8004368:	469e      	mov	lr, r3
 800436a:	4770      	bx	lr
